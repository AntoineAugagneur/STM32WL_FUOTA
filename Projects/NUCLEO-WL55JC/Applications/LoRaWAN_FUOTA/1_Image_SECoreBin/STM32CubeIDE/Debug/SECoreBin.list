
SECoreBin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .SE_CallGate_Code 000000cc  08000200  08000200  00000200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .SE_embedded_Keys 00000200  08000300  08000300  00000300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_Startup_Code 00000010  08000600  08000600  00000600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000063f8  08000700  08000700  00000700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000290  08006af8  08006af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08006d88  08006d88  000185d0  2**0
                  CONTENTS
  6 .ARM          00000000  08006d88  08006d88  000185d0  2**0
                  CONTENTS
  7 .preinit_array 00000000  08006d88  08006d88  000185d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08006d88  08006d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08006d90  08006d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .USER_embedded_Keys 000001d0  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         00000010  20000c00  08006d98  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00002480  20000c10  08006da8  00010c10  2**2
                  ALLOC
 13 ._user_heap_stack 00000200  20003090  08006da8  00013090  2**0
                  ALLOC
 14 .ARM.attributes 0000002a  00000000  00000000  000185d0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002db09  00000000  00000000  000185fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e03  00000000  00000000  00046103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d98  00000000  00000000  0004bf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001d40  00000000  00000000  0004cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022d9c  00000000  00000000  0004e9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000227ce  00000000  00000000  0007177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bf0c6  00000000  00000000  00093f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  0015300e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002c54  00000000  00000000  00153064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00014e97  00000000  00000000  00155cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .SE_CallGate_Code:

08000200 <SE_CallGate-0x4>:
 8000200:	00000000 	andeq	r0, r0, r0

08000204 <SE_CallGate>:
  * @param eID: Secure Engine protected function ID.
  * @param peSE_Status: Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CallGate(SE_FunctionIDTypeDef eID, SE_StatusTypeDef *const peSE_Status, uint32_t PrimaskParam, ...)
{
 8000204:	b40c      	push	{r2, r3}
 8000206:	b580      	push	{r7, lr}
 8000208:	b086      	sub	sp, #24
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	6039      	str	r1, [r7, #0]
  LR = __get_LR();
#elif defined(__ARMCC_VERSION)
  __asm volatile("MOV %0, LR\n" : "=r"(LR));
#elif defined(__GNUC__)
  register unsigned lr asm("lr");
  LR = lr;
 8000210:	4673      	mov	r3, lr
 8000212:	60fb      	str	r3, [r7, #12]
   * instead of return(SE_ERROR) to avoid any attempt of attack by modifying
   * the call stack (LR) in order to execute code inside secure enclave
   */

  /* Check the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SE_CallGate+0xb8>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d201      	bcs.n	8000220 <SE_CallGate+0x1c>
 800021c:	f006 f9d8 	bl	80065d0 <__NVIC_SystemReset>
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <SE_CallGate+0xbc>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d901      	bls.n	800022c <SE_CallGate+0x28>
 8000228:	f006 f9d2 	bl	80065d0 <__NVIC_SystemReset>

  /* Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800022c:	2104      	movs	r1, #4
 800022e:	6838      	ldr	r0, [r7, #0]
 8000230:	f000 fc92 	bl	8000b58 <SE_LL_Buffer_in_ram>
 8000234:	4603      	mov	r3, r0
 8000236:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <SE_CallGate+0xc0>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d001      	beq.n	8000240 <SE_CallGate+0x3c>
  {
    NVIC_SystemReset();
 800023c:	f006 f9c8 	bl	80065d0 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000240:	2104      	movs	r1, #4
 8000242:	6838      	ldr	r0, [r7, #0]
 8000244:	f000 fcb8 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <SE_CallGate+0xc0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d101      	bne.n	8000254 <SE_CallGate+0x50>
  {
    NVIC_SystemReset();
 8000250:	f006 f9be 	bl	80065d0 <__NVIC_SystemReset>
  }

  /* Double Check to avoid basic fault injection : the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <SE_CallGate+0xb8>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d201      	bcs.n	8000260 <SE_CallGate+0x5c>
 800025c:	f006 f9b8 	bl	80065d0 <__NVIC_SystemReset>
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <SE_CallGate+0xbc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d901      	bls.n	800026c <SE_CallGate+0x68>
 8000268:	f006 f9b2 	bl	80065d0 <__NVIC_SystemReset>

  /* Double Check to avoid basic fault injection : Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800026c:	2104      	movs	r1, #4
 800026e:	6838      	ldr	r0, [r7, #0]
 8000270:	f000 fc72 	bl	8000b58 <SE_LL_Buffer_in_ram>
 8000274:	4603      	mov	r3, r0
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <SE_CallGate+0xc0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d001      	beq.n	8000280 <SE_CallGate+0x7c>
  {
    NVIC_SystemReset();
 800027c:	f006 f9a8 	bl	80065d0 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000280:	2104      	movs	r1, #4
 8000282:	6838      	ldr	r0, [r7, #0]
 8000284:	f000 fc98 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
 8000288:	4603      	mov	r3, r0
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <SE_CallGate+0xc0>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d101      	bne.n	8000294 <SE_CallGate+0x90>
  {
    NVIC_SystemReset();
 8000290:	f006 f99e 	bl	80065d0 <__NVIC_SystemReset>

  /* Set SE vector */
  SCB->VTOR = (uint32_t)&SeVectorsTable;
#endif /* SFU_ISOLATE_SE_WITH_FIREWALL || CKS_ENABLED */

  *peSE_Status =  SE_OK;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <SE_CallGate+0xc4>)
 8000298:	601a      	str	r2, [r3, #0]

  /* Initializing arguments to store all values after peSE_Status */
  va_start(arguments, PrimaskParam);
 800029a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800029e:	613b      	str	r3, [r7, #16]
#if defined(SFU_ISOLATE_SE_WITH_FIREWALL)
  /* Set SE specific stack before executing SE service */
  e_ret_status =  SE_SP_SMUGGLE(eID, peSE_Status, arguments);
#else
  /* No need to use a specific Stack */
  e_ret_status =  SE_CallGateService(eID, peSE_Status, arguments);
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	6839      	ldr	r1, [r7, #0]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f006 f8bb 	bl	8006420 <SE_CallGateService>
 80002aa:	6178      	str	r0, [r7, #20]
#endif /* SFU_ISOLATE_SE_WITH_FIREWALL */

  /* Exit the protected area */
  EXIT_PROTECTED_AREA();

  return e_ret_status;
 80002ac:	697b      	ldr	r3, [r7, #20]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr
 80002bc:	08008700 	.word	0x08008700
 80002c0:	080095ff 	.word	0x080095ff
 80002c4:	0012310f 	.word	0x0012310f
 80002c8:	0012e223 	.word	0x0012e223

Disassembly of section .SE_Startup_Code:

08000600 <SE_CORE_Startup>:
  */
#if defined(__ARMCC_VERSION)
__attribute__((section(".SE_Startup_Code")))
#endif /* __ARMCC_VERSION */
__root SE_ErrorStatus SE_CORE_Startup(void)
{
 8000600:	b508      	push	{r3, lr}
  /* Data initialization function*/
  __iar_data_init3();
#elif defined (__ARMCC_VERSION)
  __arm_data_init();
#elif defined(__GNUC__)
  __gcc_data_init();
 8000602:	f000 f8db 	bl	80007bc <__gcc_data_init>
#endif /* __ICCARM__ */

  /*NOTE : other initialization may be added here */
  return SE_SUCCESS;
}
 8000606:	4801      	ldr	r0, [pc, #4]	; (800060c <SE_CORE_Startup+0xc>)
 8000608:	bd08      	pop	{r3, pc}
 800060a:	bf00      	nop
 800060c:	0012310f 	.word	0x0012310f

Disassembly of section .text:

08000700 <__do_global_dtors_aux>:
 8000700:	b510      	push	{r4, lr}
 8000702:	4c05      	ldr	r4, [pc, #20]	; (8000718 <__do_global_dtors_aux+0x18>)
 8000704:	7823      	ldrb	r3, [r4, #0]
 8000706:	b933      	cbnz	r3, 8000716 <__do_global_dtors_aux+0x16>
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <__do_global_dtors_aux+0x1c>)
 800070a:	b113      	cbz	r3, 8000712 <__do_global_dtors_aux+0x12>
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <__do_global_dtors_aux+0x20>)
 800070e:	f3af 8000 	nop.w
 8000712:	2301      	movs	r3, #1
 8000714:	7023      	strb	r3, [r4, #0]
 8000716:	bd10      	pop	{r4, pc}
 8000718:	20000c10 	.word	0x20000c10
 800071c:	00000000 	.word	0x00000000
 8000720:	08006adc 	.word	0x08006adc

08000724 <frame_dummy>:
 8000724:	b508      	push	{r3, lr}
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <frame_dummy+0x10>)
 8000728:	b11b      	cbz	r3, 8000732 <frame_dummy+0xe>
 800072a:	4903      	ldr	r1, [pc, #12]	; (8000738 <frame_dummy+0x14>)
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <frame_dummy+0x18>)
 800072e:	f3af 8000 	nop.w
 8000732:	bd08      	pop	{r3, pc}
 8000734:	00000000 	.word	0x00000000
 8000738:	20000c14 	.word	0x20000c14
 800073c:	08006adc 	.word	0x08006adc

08000740 <LoopCopyDataInit>:
	extern char _edata asm("_edata");
	
	vu32* src = (vu32*) &_sidata;
	vu32* dst = (vu32*) &_sdata;
	
	vu32 len = (&_edata - &_sdata) / 4;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <LoopCopyDataInit+0x38>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopCopyDataInit+0x3c>)
	
	for(vu32 i=0; i < len; i++)
		dst[i] = src[i];
 8000744:	480e      	ldr	r0, [pc, #56]	; (8000780 <LoopCopyDataInit+0x40>)
	vu32 len = (&_edata - &_sdata) / 4;
 8000746:	1a9b      	subs	r3, r3, r2
void LoopCopyDataInit(void) {
 8000748:	b082      	sub	sp, #8
	vu32 len = (&_edata - &_sdata) / 4;
 800074a:	bf48      	it	mi
 800074c:	3303      	addmi	r3, #3
 800074e:	109b      	asrs	r3, r3, #2
 8000750:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	9b00      	ldr	r3, [sp, #0]
 800075a:	4299      	cmp	r1, r3
 800075c:	d301      	bcc.n	8000762 <LoopCopyDataInit+0x22>
}
 800075e:	b002      	add	sp, #8
 8000760:	4770      	bx	lr
		dst[i] = src[i];
 8000762:	9901      	ldr	r1, [sp, #4]
 8000764:	9b01      	ldr	r3, [sp, #4]
 8000766:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 800076e:	9b01      	ldr	r3, [sp, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	e7ef      	b.n	8000756 <LoopCopyDataInit+0x16>
 8000776:	bf00      	nop
 8000778:	20000c10 	.word	0x20000c10
 800077c:	20000c00 	.word	0x20000c00
 8000780:	08006d98 	.word	0x08006d98

08000784 <LoopFillZerobss>:
void LoopFillZerobss(void) {
	extern char _sbss asm("_sbss");
	extern char _ebss asm("_ebss");
	
	vu32* dst = (vu32*) &_sbss;
	vu32 len = (&_ebss - &_sbss) / 4;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <LoopFillZerobss+0x30>)
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <LoopFillZerobss+0x34>)
 8000788:	1a9b      	subs	r3, r3, r2
void LoopFillZerobss(void) {
 800078a:	b082      	sub	sp, #8
	vu32 len = (&_ebss - &_sbss) / 4;
 800078c:	bf48      	it	mi
 800078e:	3303      	addmi	r3, #3
 8000790:	109b      	asrs	r3, r3, #2
 8000792:	9300      	str	r3, [sp, #0]
	
	for(vu32 i=0; i < len; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9801      	ldr	r0, [sp, #4]
 800079a:	9900      	ldr	r1, [sp, #0]
 800079c:	4288      	cmp	r0, r1
 800079e:	d301      	bcc.n	80007a4 <LoopFillZerobss+0x20>
		dst[i] = 0;
}
 80007a0:	b002      	add	sp, #8
 80007a2:	4770      	bx	lr
		dst[i] = 0;
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for(vu32 i=0; i < len; i++)
 80007aa:	9901      	ldr	r1, [sp, #4]
 80007ac:	3101      	adds	r1, #1
 80007ae:	9101      	str	r1, [sp, #4]
 80007b0:	e7f2      	b.n	8000798 <LoopFillZerobss+0x14>
 80007b2:	bf00      	nop
 80007b4:	20003090 	.word	0x20003090
 80007b8:	20000c10 	.word	0x20000c10

080007bc <__gcc_data_init>:

void __gcc_data_init(void) {
 80007bc:	b508      	push	{r3, lr}
	LoopFillZerobss();
 80007be:	f7ff ffe1 	bl	8000784 <LoopFillZerobss>
	LoopCopyDataInit();
}
 80007c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LoopCopyDataInit();
 80007c6:	f7ff bfbb 	b.w	8000740 <LoopCopyDataInit>
	...

080007cc <HAL_CRYP_MspInit>:
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef *hcryp)
{
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007cc:	6802      	ldr	r2, [r0, #0]
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_CRYP_MspInit+0x2c>)
 80007d0:	429a      	cmp	r2, r3
{
 80007d2:	b082      	sub	sp, #8
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007d4:	d10e      	bne.n	80007f4 <HAL_CRYP_MspInit+0x28>
  */

#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->AHB3ENR, Periphs);
 80007e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007e8:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80007ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007f2:	9b01      	ldr	r3, [sp, #4]
    /* Release AES/CRYP from reset state */
    __HAL_RCC_AES_RELEASE_RESET();
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
  }
}
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr
 80007f8:	58001800 	.word	0x58001800

080007fc <HAL_CRYP_MspDeInit>:
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef *hcryp)
{
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007fc:	6802      	ldr	r2, [r0, #0]
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_CRYP_MspDeInit+0x20>)
 8000800:	429a      	cmp	r2, r3
 8000802:	d109      	bne.n	8000818 <HAL_CRYP_MspDeInit+0x1c>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800080a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800080e:	651a      	str	r2, [r3, #80]	; 0x50
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8000810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000812:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
    /* Force AES/CRYP into reset state */
    __HAL_RCC_AES_FORCE_RESET();
  }
}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	58001800 	.word	0x58001800

08000820 <HAL_PKA_MspInit>:
  * @param[in] hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef *hpka)
{
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000820:	6802      	ldr	r2, [r0, #0]
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_PKA_MspInit+0x2c>)
 8000824:	429a      	cmp	r2, r3
{
 8000826:	b082      	sub	sp, #8
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000828:	d10e      	bne.n	8000848 <HAL_PKA_MspInit+0x28>
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000838:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800083c:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800083e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000844:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000846:	9b01      	ldr	r3, [sp, #4]
    /* Release PKA from reset state */
    __HAL_RCC_PKA_RELEASE_RESET();
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
  }
}
 8000848:	b002      	add	sp, #8
 800084a:	4770      	bx	lr
 800084c:	58002000 	.word	0x58002000

08000850 <HAL_PKA_MspDeInit>:
  * @param[in] hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspDeInit(PKA_HandleTypeDef *hpka)
{
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_PKA_MspDeInit+0x20>)
 8000854:	429a      	cmp	r2, r3
 8000856:	d109      	bne.n	800086c <HAL_PKA_MspDeInit+0x1c>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800085e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000862:	651a      	str	r2, [r3, #80]	; 0x50
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8000864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000866:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Peripheral clock disable */
    __HAL_RCC_PKA_CLK_DISABLE();
    /* Force PKA into reset state */
    __HAL_RCC_PKA_FORCE_RESET();
  }
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	58002000 	.word	0x58002000

08000874 <KMS_LL_IsBufferInSecureEnclave>:
  * @param  pBuffer Buffer address
  * @param  ulSize  Buffer size
  * @retval void
  */
void KMS_LL_IsBufferInSecureEnclave(void *pBuffer, uint32_t ulSize)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  /* If pBuffer is NULL, simply return FALSE */
  if ((pBuffer == NULL) || (ulSize == 0UL))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <KMS_LL_IsBufferInSecureEnclave+0x38>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d010      	beq.n	80008ac <KMS_LL_IsBufferInSecureEnclave+0x38>
  {
    return;
  }
  /* Check if address range is within secure enclave                           */
  /* Called APIs will generate exception in case buffer is in forbidden area   */
  (void)SE_LL_Buffer_part_of_SE_ram(pBuffer, ulSize);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f993 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
  /*     Checking RAM Need to add test to protect on NVM_STORAGE */
  (void)SE_LL_Buffer_part_of_SE_rom(pBuffer, ulSize);
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f9ab 	bl	8000bf0 <SE_LL_Buffer_part_of_SE_rom>

  /* Double Check to avoid basic fault injection */
  (void)SE_LL_Buffer_part_of_SE_ram(pBuffer, ulSize);
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f98b 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
  /*     Checking RAM Need to add test to protect on NVM_STORAGE */
  (void)SE_LL_Buffer_part_of_SE_rom(pBuffer, ulSize);
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f9a3 	bl	8000bf0 <SE_LL_Buffer_part_of_SE_rom>

  return;
 80008aa:	e000      	b.n	80008ae <KMS_LL_IsBufferInSecureEnclave+0x3a>
    return;
 80008ac:	bf00      	nop
}
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <KMS_LL_ReportError>:
  * @param  error Error reported by KMS
  */
void KMS_LL_ReportError(uint32_t error)
{
  (void)error;
  while (1 == 1) {;}
 80008b4:	e7fe      	b.n	80008b4 <KMS_LL_ReportError>
	...

080008b8 <KMS_LL_FLASH_Read>:
{
 80008b8:	b508      	push	{r3, lr}
  seStatus = SE_LL_FLASH_Read(pDestination, pSource, Length);
 80008ba:	f000 f913 	bl	8000ae4 <SE_LL_FLASH_Read>
}
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <KMS_LL_FLASH_Read+0x14>)
 80008c0:	4298      	cmp	r0, r3
 80008c2:	bf14      	ite	ne
 80008c4:	2005      	movne	r0, #5
 80008c6:	2000      	moveq	r0, #0
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	0012310f 	.word	0x0012310f

080008d0 <NVMS_LL_Init>:
  * @brief   Flash low level driver initialization.
  */
void NVMS_LL_Init(void)
{

}
 80008d0:	4770      	bx	lr
	...

080008d4 <NVMS_LL_IsBlockErased>:
  * @retval true             if the block is in erased state.
  */
bool NVMS_LL_IsBlockErased(nvms_block_t block)
{
  uint32_t i;
  uint32_t *p = (uint32_t *)((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS :
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <NVMS_LL_IsBlockErased+0x28>)
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <NVMS_LL_IsBlockErased+0x2c>)
 80008d8:	1ad2      	subs	r2, r2, r3
 80008da:	b108      	cbz	r0, 80008e0 <NVMS_LL_IsBlockErased+0xc>
                             NVMS_LL_BLOCK1_ADDRESS);
 80008dc:	eb03 0352 	add.w	r3, r3, r2, lsr #1

  for (i = 0; i < (NVMS_LL_BLOCK_SIZE / sizeof(uint32_t)); i++)
 80008e0:	08d2      	lsrs	r2, r2, #3
 80008e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <NVMS_LL_IsBlockErased+0x1a>
    {
      return false;
    }
    p++;
  }
  return true;
 80008ea:	2001      	movs	r0, #1
 80008ec:	4770      	bx	lr
    if (*p != NVMS_LL_ERASED)
 80008ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80008f2:	3101      	adds	r1, #1
 80008f4:	d0f7      	beq.n	80008e6 <NVMS_LL_IsBlockErased+0x12>
      return false;
 80008f6:	2000      	movs	r0, #0
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	08013000 	.word	0x08013000
 8000900:	08015000 	.word	0x08015000

08000904 <NVMS_LL_BlockErase>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the erase operation failed.
  */
bool NVMS_LL_BlockErase(nvms_block_t block)
{
 8000904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Erase First Flash sector */
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000906:	2200      	movs	r2, #0
 8000908:	2302      	movs	r3, #2
 800090a:	e9cd 2300 	strd	r2, r3, [sp]
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <NVMS_LL_BlockErase+0x44>)
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <NVMS_LL_BlockErase+0x48>)
 8000912:	4604      	mov	r4, r0
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	b108      	cbz	r0, 800091c <NVMS_LL_BlockErase+0x18>
 8000918:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800091c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000920:	0adb      	lsrs	r3, r3, #11
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 8000922:	0b12      	lsrs	r2, r2, #12
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8000924:	9302      	str	r3, [sp, #8]
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 8000926:	9203      	str	r2, [sp, #12]

  /* Unlock the Flash to enable the flash control register access *************/
  (void)HAL_FLASH_Unlock();
 8000928:	f000 ff54 	bl	80017d4 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800092c:	4669      	mov	r1, sp
 800092e:	a801      	add	r0, sp, #4
 8000930:	f000 ffe2 	bl	80018f8 <HAL_FLASHEx_Erase>
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  (void)HAL_FLASH_Lock();
 8000934:	f000 ff60 	bl	80017f8 <HAL_FLASH_Lock>

  /* Operation verification.*/
  return !NVMS_LL_IsBlockErased(block);
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff ffcb 	bl	80008d4 <NVMS_LL_IsBlockErased>
 800093e:	f080 0001 	eor.w	r0, r0, #1
}
 8000942:	b2c0      	uxtb	r0, r0
 8000944:	b004      	add	sp, #16
 8000946:	bd10      	pop	{r4, pc}
 8000948:	08013000 	.word	0x08013000
 800094c:	08015000 	.word	0x08015000

08000950 <NVMS_LL_Write>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the write operation failed.
  */
bool NVMS_LL_Write(const uint8_t *source, uint8_t *destination, size_t size)
{
 8000950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000954:	4605      	mov	r5, r0
 8000956:	460e      	mov	r6, r1
 8000958:	4617      	mov	r7, r2
  const uint8_t *s = source;
  uint8_t *d = destination;
  size_t sz = size;
 800095a:	4690      	mov	r8, r2
  uint8_t *d = destination;
 800095c:	468b      	mov	fp, r1
  const uint8_t *s = source;
 800095e:	4681      	mov	r9, r0

  while (sz > 0UL)
 8000960:	f1b8 0f00 	cmp.w	r8, #0
 8000964:	d10a      	bne.n	800097c <NVMS_LL_Write+0x2c>
      return true;
    }
  }

  /* Operation verification.*/
  return (bool)(memcmp(source, destination, size) != 0);
 8000966:	463a      	mov	r2, r7
 8000968:	4631      	mov	r1, r6
 800096a:	4628      	mov	r0, r5
 800096c:	f006 f892 	bl	8006a94 <memcmp>
 8000970:	3800      	subs	r0, #0
 8000972:	bf18      	it	ne
 8000974:	2001      	movne	r0, #1
}
 8000976:	b003      	add	sp, #12
 8000978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                     ((uint32_t) * destinationp & (NVMS_LL_PAGE_SIZE - 1UL)));
 800097c:	f00b 0407 	and.w	r4, fp, #7
  maxsize = (size_t)(NVMS_LL_PAGE_SIZE -
 8000980:	f1c4 0408 	rsb	r4, r4, #8
  if (maxsize > *sizep)
 8000984:	4544      	cmp	r4, r8
 8000986:	bf28      	it	cs
 8000988:	4644      	movcs	r4, r8
  *destinationp += maxsize;
 800098a:	eb0b 0304 	add.w	r3, fp, r4
 800098e:	9300      	str	r3, [sp, #0]
  *sizep        -= maxsize;
 8000990:	eba8 0804 	sub.w	r8, r8, r4
  (void)HAL_FLASH_Unlock();
 8000994:	f000 ff1e 	bl	80017d4 <HAL_FLASH_Unlock>
  while ((maxsize >= 8UL) && (ret == HAL_OK))
 8000998:	46ca      	mov	sl, r9
  HAL_StatusTypeDef ret = HAL_OK;
 800099a:	2300      	movs	r3, #0
  while ((maxsize >= 8UL) && (ret == HAL_OK))
 800099c:	2c08      	cmp	r4, #8
 800099e:	46d1      	mov	r9, sl
 80009a0:	d115      	bne.n	80009ce <NVMS_LL_Write+0x7e>
 80009a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80009a6:	b13b      	cbz	r3, 80009b8 <NVMS_LL_Write+0x68>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009a8:	e9d9 2300 	ldrd	r2, r3, [r9]
 80009ac:	4659      	mov	r1, fp
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 ff5c 	bl	800186c <HAL_FLASH_Program>
 80009b4:	4603      	mov	r3, r0
 80009b6:	e00c      	b.n	80009d2 <NVMS_LL_Write+0x82>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009b8:	460b      	mov	r3, r1
 80009ba:	4602      	mov	r2, r0
 80009bc:	4659      	mov	r1, fp
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 ff54 	bl	800186c <HAL_FLASH_Program>
    p = &p[8];
 80009c4:	f10b 0b08 	add.w	fp, fp, #8
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009c8:	4603      	mov	r3, r0
    maxsize -= 8UL;
 80009ca:	2400      	movs	r4, #0
 80009cc:	e7e6      	b.n	800099c <NVMS_LL_Write+0x4c>
  if (maxsize != 0UL)
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d1ea      	bne.n	80009a8 <NVMS_LL_Write+0x58>
 80009d2:	9301      	str	r3, [sp, #4]
  (void)HAL_FLASH_Lock();
 80009d4:	f000 ff10 	bl	80017f8 <HAL_FLASH_Lock>
  if (ret == HAL_OK)
 80009d8:	9b01      	ldr	r3, [sp, #4]
 80009da:	b913      	cbnz	r3, 80009e2 <NVMS_LL_Write+0x92>
  *destinationp += maxsize;
 80009dc:	f8dd b000 	ldr.w	fp, [sp]
 80009e0:	e7be      	b.n	8000960 <NVMS_LL_Write+0x10>
      return true;
 80009e2:	2001      	movs	r0, #1
 80009e4:	e7c7      	b.n	8000976 <NVMS_LL_Write+0x26>
	...

080009e8 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009ec:	4905      	ldr	r1, [pc, #20]	; (8000a04 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009f0:	68ca      	ldr	r2, [r1, #12]
 80009f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009f6:	4313      	orrs	r3, r2
 80009f8:	60cb      	str	r3, [r1, #12]
 80009fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000a00:	e7fd      	b.n	80009fe <__NVIC_SystemReset+0x16>
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	05fa0004 	.word	0x05fa0004

08000a0c <SE_LL_GetPage>:
  */
static uint32_t SE_LL_GetPage(uint32_t Address)
{
  uint32_t page;

  if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <SE_LL_GetPage+0x20>)
{
 8000a0e:	4602      	mov	r2, r0
  if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <SE_LL_GetPage+0x24>)
 8000a14:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8000a18:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 8000a1c:	4291      	cmp	r1, r2
  {
    /* Bank 1 */
    page = (Address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000a1e:	f102 4378 	add.w	r3, r2, #4160749568	; 0xf8000000
 8000a22:	bf8e      	itee	hi
 8000a24:	0ad8      	lsrhi	r0, r3, #11
  }
  else
  {
    /* Bank 2 */
    page = (Address - (FLASH_BASE + (FLASH_BANK_SIZE))) / FLASH_PAGE_SIZE;
 8000a26:	1a18      	subls	r0, r3, r0
 8000a28:	0ac0      	lsrls	r0, r0, #11
  }
  return page;
}
 8000a2a:	4770      	bx	lr
 8000a2c:	1fff75e0 	.word	0x1fff75e0
 8000a30:	03fffc00 	.word	0x03fffc00

08000a34 <SE_LL_FLASH_Erase>:
{
 8000a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t page_error = 0U;
 8000a36:	2300      	movs	r3, #0
{
 8000a38:	4606      	mov	r6, r0
 8000a3a:	460c      	mov	r4, r1
  uint32_t page_error = 0U;
 8000a3c:	9300      	str	r3, [sp, #0]
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000a3e:	f000 fec9 	bl	80017d4 <HAL_FLASH_Unlock>
 8000a42:	b9d8      	cbnz	r0, 8000a7c <SE_LL_FLASH_Erase+0x48>
    p_erase_init.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000a44:	2302      	movs	r3, #2
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a46:	4630      	mov	r0, r6
    p_erase_init.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000a48:	9301      	str	r3, [sp, #4]
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a4a:	f7ff ffdf 	bl	8000a0c <SE_LL_GetPage>
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a4e:	3c01      	subs	r4, #1
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a50:	4605      	mov	r5, r0
 8000a52:	9002      	str	r0, [sp, #8]
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a54:	1930      	adds	r0, r6, r4
 8000a56:	f7ff ffd9 	bl	8000a0c <SE_LL_GetPage>
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	1b5b      	subs	r3, r3, r5
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8000a5e:	4669      	mov	r1, sp
 8000a60:	a801      	add	r0, sp, #4
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a62:	9303      	str	r3, [sp, #12]
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8000a64:	f000 ff48 	bl	80018f8 <HAL_FLASHEx_Erase>
      e_ret_status = SE_ERROR;
 8000a68:	4c05      	ldr	r4, [pc, #20]	; (8000a80 <SE_LL_FLASH_Erase+0x4c>)
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SE_LL_FLASH_Erase+0x50>)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	bf18      	it	ne
 8000a70:	461c      	movne	r4, r3
    (void)HAL_FLASH_Lock();
 8000a72:	f000 fec1 	bl	80017f8 <HAL_FLASH_Lock>
}
 8000a76:	4620      	mov	r0, r4
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = SE_ERROR;
 8000a7c:	4c01      	ldr	r4, [pc, #4]	; (8000a84 <SE_LL_FLASH_Erase+0x50>)
  return e_ret_status;
 8000a7e:	e7fa      	b.n	8000a76 <SE_LL_FLASH_Erase+0x42>
 8000a80:	0012310f 	.word	0x0012310f
 8000a84:	00018799 	.word	0x00018799

08000a88 <SE_LL_FLASH_Write>:
{
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	4606      	mov	r6, r0
 8000a8c:	460d      	mov	r5, r1
  if (Length == 0U)
 8000a8e:	4617      	mov	r7, r2
 8000a90:	b912      	cbnz	r2, 8000a98 <SE_LL_FLASH_Write+0x10>
    return SE_ERROR;
 8000a92:	4c11      	ldr	r4, [pc, #68]	; (8000ad8 <SE_LL_FLASH_Write+0x50>)
}
 8000a94:	4620      	mov	r0, r4
 8000a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <SE_LL_FLASH_Write+0x54>)
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	d8f9      	bhi.n	8000a92 <SE_LL_FLASH_Write+0xa>
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000a9e:	1882      	adds	r2, r0, r2
 8000aa0:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f4      	bhi.n	8000a92 <SE_LL_FLASH_Write+0xa>
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000aa8:	f000 fe94 	bl	80017d4 <HAL_FLASH_Unlock>
 8000aac:	4604      	mov	r4, r0
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1ef      	bne.n	8000a92 <SE_LL_FLASH_Write+0xa>
 8000ab2:	3d08      	subs	r5, #8
 8000ab4:	e007      	b.n	8000ac6 <SE_LL_FLASH_Write+0x3e>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (destination + i), *(uint64_t *)(source + i)) != HAL_OK)
 8000ab6:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8000aba:	1931      	adds	r1, r6, r4
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 fed5 	bl	800186c <HAL_FLASH_Program>
 8000ac2:	b930      	cbnz	r0, 8000ad2 <SE_LL_FLASH_Write+0x4a>
    for (i = 0U; i < Length; i += 8U)
 8000ac4:	3408      	adds	r4, #8
 8000ac6:	42bc      	cmp	r4, r7
 8000ac8:	d3f5      	bcc.n	8000ab6 <SE_LL_FLASH_Write+0x2e>
  SE_ErrorStatus ret = SE_SUCCESS;
 8000aca:	4c05      	ldr	r4, [pc, #20]	; (8000ae0 <SE_LL_FLASH_Write+0x58>)
    (void)HAL_FLASH_Lock();
 8000acc:	f000 fe94 	bl	80017f8 <HAL_FLASH_Lock>
 8000ad0:	e7e0      	b.n	8000a94 <SE_LL_FLASH_Write+0xc>
        ret = SE_ERROR;
 8000ad2:	4c01      	ldr	r4, [pc, #4]	; (8000ad8 <SE_LL_FLASH_Write+0x50>)
 8000ad4:	e7fa      	b.n	8000acc <SE_LL_FLASH_Write+0x44>
 8000ad6:	bf00      	nop
 8000ad8:	00018799 	.word	0x00018799
 8000adc:	0802b000 	.word	0x0802b000
 8000ae0:	0012310f 	.word	0x0012310f

08000ae4 <SE_LL_FLASH_Read>:
{
 8000ae4:	b530      	push	{r4, r5, lr}
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000ae6:	4c16      	ldr	r4, [pc, #88]	; (8000b40 <SE_LL_FLASH_Read+0x5c>)
 8000ae8:	428c      	cmp	r4, r1
 8000aea:	d822      	bhi.n	8000b32 <SE_LL_FLASH_Read+0x4e>
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000aec:	188b      	adds	r3, r1, r2
 8000aee:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000af2:	429c      	cmp	r4, r3
 8000af4:	bf34      	ite	cc
 8000af6:	2300      	movcc	r3, #0
 8000af8:	2301      	movcs	r3, #1
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000afa:	4c12      	ldr	r4, [pc, #72]	; (8000b44 <SE_LL_FLASH_Read+0x60>)
 8000afc:	42a1      	cmp	r1, r4
 8000afe:	d202      	bcs.n	8000b06 <SE_LL_FLASH_Read+0x22>
  if (verified == 0U)
 8000b00:	b92b      	cbnz	r3, 8000b0e <SE_LL_FLASH_Read+0x2a>
    return SE_ERROR;
 8000b02:	4811      	ldr	r0, [pc, #68]	; (8000b48 <SE_LL_FLASH_Read+0x64>)
 8000b04:	e014      	b.n	8000b30 <SE_LL_FLASH_Read+0x4c>
        ((source + Length) <= (SlotStartAdd[SLOT_DWL_1 + i] + SLOT_SIZE(SLOT_DWL_1))))
 8000b06:	4d11      	ldr	r5, [pc, #68]	; (8000b4c <SE_LL_FLASH_Read+0x68>)
 8000b08:	188c      	adds	r4, r1, r2
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000b0a:	42ac      	cmp	r4, r5
 8000b0c:	d8f8      	bhi.n	8000b00 <SE_LL_FLASH_Read+0x1c>
  SE_DoubleECC_Error_Counter = 0U;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SE_LL_FLASH_Read+0x6c>)
 8000b10:	2400      	movs	r4, #0
 8000b12:	601c      	str	r4, [r3, #0]
  for (i = 0; (i < Length) && (SE_DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8000b14:	3901      	subs	r1, #1
 8000b16:	4402      	add	r2, r0
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	d001      	beq.n	8000b20 <SE_LL_FLASH_Read+0x3c>
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	b154      	cbz	r4, 8000b36 <SE_LL_FLASH_Read+0x52>
  if (SE_DoubleECC_Error_Counter == 0U)
 8000b20:	6819      	ldr	r1, [r3, #0]
    e_ret_status = SE_SUCCESS;
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <SE_LL_FLASH_Read+0x70>)
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <SE_LL_FLASH_Read+0x64>)
 8000b26:	2900      	cmp	r1, #0
 8000b28:	bf08      	it	eq
 8000b2a:	4610      	moveq	r0, r2
  SE_DoubleECC_Error_Counter = 0U;
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	bd30      	pop	{r4, r5, pc}
 8000b32:	2300      	movs	r3, #0
 8000b34:	e7e1      	b.n	8000afa <SE_LL_FLASH_Read+0x16>
    *pDestination = *pSource;
 8000b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000b3a:	f800 4b01 	strb.w	r4, [r0], #1
  for (i = 0; (i < Length) && (SE_DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8000b3e:	e7eb      	b.n	8000b18 <SE_LL_FLASH_Read+0x34>
 8000b40:	0802b000 	.word	0x0802b000
 8000b44:	08016000 	.word	0x08016000
 8000b48:	00018799 	.word	0x00018799
 8000b4c:	0802b000 	.word	0x0802b000
 8000b50:	20000c2c 	.word	0x20000c2c
 8000b54:	0012310f 	.word	0x0012310f

08000b58 <SE_LL_Buffer_in_ram>:
{
 8000b58:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000b5a:	1e4b      	subs	r3, r1, #1
 8000b5c:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000b5e:	b141      	cbz	r1, 8000b72 <SE_LL_Buffer_in_ram+0x1a>
 8000b60:	43c2      	mvns	r2, r0
 8000b62:	428a      	cmp	r2, r1
 8000b64:	d305      	bcc.n	8000b72 <SE_LL_Buffer_in_ram+0x1a>
      && ((addr_end  <= SB_REGION_RAM_END) && (addr_start >= (SE_REGION_RAM_END + 1U))))
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SE_LL_Buffer_in_ram+0x24>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d802      	bhi.n	8000b72 <SE_LL_Buffer_in_ram+0x1a>
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SE_LL_Buffer_in_ram+0x28>)
 8000b6e:	4283      	cmp	r3, r0
 8000b70:	d901      	bls.n	8000b76 <SE_LL_Buffer_in_ram+0x1e>
    NVIC_SystemReset();
 8000b72:	f7ff ff39 	bl	80009e8 <__NVIC_SystemReset>
}
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <SE_LL_Buffer_in_ram+0x2c>)
 8000b78:	bd08      	pop	{r3, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20007fff 	.word	0x20007fff
 8000b80:	20003400 	.word	0x20003400
 8000b84:	0012310f 	.word	0x0012310f

08000b88 <SE_LL_Buffer_in_SBSFU_ram>:
{
 8000b88:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000b8a:	1e4b      	subs	r3, r1, #1
 8000b8c:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000b8e:	b141      	cbz	r1, 8000ba2 <SE_LL_Buffer_in_SBSFU_ram+0x1a>
 8000b90:	43c2      	mvns	r2, r0
 8000b92:	428a      	cmp	r2, r1
 8000b94:	d305      	bcc.n	8000ba2 <SE_LL_Buffer_in_SBSFU_ram+0x1a>
      && ((addr_end  <= SB_REGION_RAM_END) && (addr_start >= SB_REGION_RAM_START)))
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SE_LL_Buffer_in_SBSFU_ram+0x24>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d802      	bhi.n	8000ba2 <SE_LL_Buffer_in_SBSFU_ram+0x1a>
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SE_LL_Buffer_in_SBSFU_ram+0x28>)
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d201      	bcs.n	8000ba6 <SE_LL_Buffer_in_SBSFU_ram+0x1e>
    NVIC_SystemReset();
 8000ba2:	f7ff ff21 	bl	80009e8 <__NVIC_SystemReset>
}
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <SE_LL_Buffer_in_SBSFU_ram+0x2c>)
 8000ba8:	bd08      	pop	{r3, pc}
 8000baa:	bf00      	nop
 8000bac:	20007fff 	.word	0x20007fff
 8000bb0:	20003400 	.word	0x20003400
 8000bb4:	0012310f 	.word	0x0012310f

08000bb8 <SE_LL_Buffer_part_of_SE_ram>:
{
 8000bb8:	b508      	push	{r3, lr}
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000bba:	b181      	cbz	r1, 8000bde <SE_LL_Buffer_part_of_SE_ram+0x26>
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <SE_LL_Buffer_part_of_SE_ram+0x2c>)
  uint32_t addr_end = addr_start + Length - 1U;
 8000bbe:	1e4b      	subs	r3, r1, #1
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000bc0:	4282      	cmp	r2, r0
  uint32_t addr_end = addr_start + Length - 1U;
 8000bc2:	4403      	add	r3, r0
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000bc4:	d901      	bls.n	8000bca <SE_LL_Buffer_part_of_SE_ram+0x12>
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d804      	bhi.n	8000bd4 <SE_LL_Buffer_part_of_SE_ram+0x1c>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <SE_LL_Buffer_part_of_SE_ram+0x30>)
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	d204      	bcs.n	8000bda <SE_LL_Buffer_part_of_SE_ram+0x22>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d202      	bcs.n	8000bda <SE_LL_Buffer_part_of_SE_ram+0x22>
      || ((0xFFFFFFFFUL - addr_start) < Length))
 8000bd4:	43c0      	mvns	r0, r0
 8000bd6:	4288      	cmp	r0, r1
 8000bd8:	d201      	bcs.n	8000bde <SE_LL_Buffer_part_of_SE_ram+0x26>
    NVIC_SystemReset();
 8000bda:	f7ff ff05 	bl	80009e8 <__NVIC_SystemReset>
}
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <SE_LL_Buffer_part_of_SE_ram+0x34>)
 8000be0:	bd08      	pop	{r3, pc}
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000
 8000be8:	200033ff 	.word	0x200033ff
 8000bec:	00018799 	.word	0x00018799

08000bf0 <SE_LL_Buffer_part_of_SE_rom>:
{
 8000bf0:	b508      	push	{r3, lr}
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bf2:	b181      	cbz	r1, 8000c16 <SE_LL_Buffer_part_of_SE_rom+0x26>
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <SE_LL_Buffer_part_of_SE_rom+0x2c>)
  uint32_t addr_end = addr_start + Length - 1U;
 8000bf6:	1e4b      	subs	r3, r1, #1
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bf8:	4282      	cmp	r2, r0
  uint32_t addr_end = addr_start + Length - 1U;
 8000bfa:	4403      	add	r3, r0
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bfc:	d901      	bls.n	8000c02 <SE_LL_Buffer_part_of_SE_rom+0x12>
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d804      	bhi.n	8000c0c <SE_LL_Buffer_part_of_SE_rom+0x1c>
                            || ((addr_start > SE_CODE_REGION_ROM_END) && (addr_end > SE_CODE_REGION_ROM_END))
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <SE_LL_Buffer_part_of_SE_rom+0x30>)
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000c04:	4282      	cmp	r2, r0
 8000c06:	d204      	bcs.n	8000c12 <SE_LL_Buffer_part_of_SE_rom+0x22>
                            || ((addr_start > SE_CODE_REGION_ROM_END) && (addr_end > SE_CODE_REGION_ROM_END))
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d202      	bcs.n	8000c12 <SE_LL_Buffer_part_of_SE_rom+0x22>
      || ((0xFFFFFFFFUL - addr_start) < Length))
 8000c0c:	43c0      	mvns	r0, r0
 8000c0e:	4288      	cmp	r0, r1
 8000c10:	d201      	bcs.n	8000c16 <SE_LL_Buffer_part_of_SE_rom+0x26>
    NVIC_SystemReset();
 8000c12:	f7ff fee9 	bl	80009e8 <__NVIC_SystemReset>
}
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <SE_LL_Buffer_part_of_SE_rom+0x34>)
 8000c18:	bd08      	pop	{r3, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08000200 	.word	0x08000200
 8000c20:	080086ff 	.word	0x080086ff
 8000c24:	00018799 	.word	0x00018799

08000c28 <SE_LL_Lock_Keys>:
{
 8000c28:	b510      	push	{r4, lr}
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_VERIFY) == CKR_OK)
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f004 fb6c 	bl	8005308 <KMS_LockKeyHandle>
 8000c30:	fab0 f480 	clz	r4, r0
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_DECRYPT) == CKR_OK)
 8000c34:	2002      	movs	r0, #2
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_VERIFY) == CKR_OK)
 8000c36:	0964      	lsrs	r4, r4, #5
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_DECRYPT) == CKR_OK)
 8000c38:	f004 fb66 	bl	8005308 <KMS_LockKeyHandle>
 8000c3c:	b900      	cbnz	r0, 8000c40 <SE_LL_Lock_Keys+0x18>
    i_key_locked++;
 8000c3e:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_1_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c40:	2003      	movs	r0, #3
 8000c42:	f004 fb61 	bl	8005308 <KMS_LockKeyHandle>
 8000c46:	b900      	cbnz	r0, 8000c4a <SE_LL_Lock_Keys+0x22>
    i_key_locked++;
 8000c48:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_2_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c4a:	2004      	movs	r0, #4
 8000c4c:	f004 fb5c 	bl	8005308 <KMS_LockKeyHandle>
 8000c50:	b900      	cbnz	r0, 8000c54 <SE_LL_Lock_Keys+0x2c>
    i_key_locked++;
 8000c52:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_3_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c54:	2005      	movs	r0, #5
 8000c56:	f004 fb57 	bl	8005308 <KMS_LockKeyHandle>
 8000c5a:	b900      	cbnz	r0, 8000c5e <SE_LL_Lock_Keys+0x36>
    i_key_locked++;
 8000c5c:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_1_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f004 fb52 	bl	8005308 <KMS_LockKeyHandle>
 8000c64:	b900      	cbnz	r0, 8000c68 <SE_LL_Lock_Keys+0x40>
    i_key_locked++;
 8000c66:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_2_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f004 fb4d 	bl	8005308 <KMS_LockKeyHandle>
 8000c6e:	b900      	cbnz	r0, 8000c72 <SE_LL_Lock_Keys+0x4a>
    i_key_locked++;
 8000c70:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_3_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c72:	2008      	movs	r0, #8
 8000c74:	f004 fb48 	bl	8005308 <KMS_LockKeyHandle>
 8000c78:	b928      	cbnz	r0, 8000c86 <SE_LL_Lock_Keys+0x5e>
    return SE_SUCCESS;
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <SE_LL_Lock_Keys+0x64>)
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SE_LL_Lock_Keys+0x68>)
 8000c7e:	2c07      	cmp	r4, #7
 8000c80:	bf08      	it	eq
 8000c82:	4618      	moveq	r0, r3
}
 8000c84:	bd10      	pop	{r4, pc}
    return SE_ERROR;
 8000c86:	4801      	ldr	r0, [pc, #4]	; (8000c8c <SE_LL_Lock_Keys+0x64>)
 8000c88:	e7fc      	b.n	8000c84 <SE_LL_Lock_Keys+0x5c>
 8000c8a:	bf00      	nop
 8000c8c:	00018799 	.word	0x00018799
 8000c90:	0012310f 	.word	0x0012310f

08000c94 <SE_LL_CORE_Cleanup>:
  * The function is called  during SE_LOCK_RESTRICT_SERVICES.
  *
  */
void  SE_LL_CORE_Cleanup(void)
{
}
 8000c94:	4770      	bx	lr

08000c96 <CRYP_SetKey>:
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
  if (hcryp->Init.pKey != NULL)
 8000c96:	68c3      	ldr	r3, [r0, #12]
 8000c98:	b1a3      	cbz	r3, 8000cc4 <CRYP_SetKey+0x2e>
  {
    switch (KeySize)
 8000c9a:	b1a1      	cbz	r1, 8000cc6 <CRYP_SetKey+0x30>
 8000c9c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8000ca0:	d110      	bne.n	8000cc4 <CRYP_SetKey+0x2e>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8000ca2:	6802      	ldr	r2, [r0, #0]
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	63d1      	str	r1, [r2, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	6391      	str	r1, [r2, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	6351      	str	r1, [r2, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	6311      	str	r1, [r2, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8000cb4:	6919      	ldr	r1, [r3, #16]
 8000cb6:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8000cb8:	6959      	ldr	r1, [r3, #20]
 8000cba:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8000cbc:	6999      	ldr	r1, [r3, #24]
 8000cbe:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8000cc0:	69db      	ldr	r3, [r3, #28]
        break;
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000cc2:	6113      	str	r3, [r2, #16]
        break;
      default:
        break;
    }
  }
}
 8000cc4:	4770      	bx	lr
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8000cc6:	6802      	ldr	r2, [r0, #0]
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8000ccc:	6859      	ldr	r1, [r3, #4]
 8000cce:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	e7f4      	b.n	8000cc2 <CRYP_SetKey+0x2c>

08000cd8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	4606      	mov	r6, r0
 8000cdc:	460c      	mov	r4, r1
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000cde:	f005 fcef 	bl	80066c0 <HAL_GetTick>
 8000ce2:	4605      	mov	r5, r0

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8000ce4:	6832      	ldr	r2, [r6, #0]
 8000ce6:	6853      	ldr	r3, [r2, #4]
 8000ce8:	07db      	lsls	r3, r3, #31
 8000cea:	d501      	bpl.n	8000cf0 <CRYP_WaitOnCCFlag+0x18>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cf0:	1c61      	adds	r1, r4, #1
 8000cf2:	d0f8      	beq.n	8000ce6 <CRYP_WaitOnCCFlag+0xe>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000cf4:	f005 fce4 	bl	80066c0 <HAL_GetTick>
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	42a0      	cmp	r0, r4
 8000cfc:	d801      	bhi.n	8000d02 <CRYP_WaitOnCCFlag+0x2a>
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d1f0      	bne.n	8000ce4 <CRYP_WaitOnCCFlag+0xc>
        return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
 8000d04:	e7f3      	b.n	8000cee <CRYP_WaitOnCCFlag+0x16>
	...

08000d08 <CRYP_GCMCCM_SetHeaderPhase>:
{
 8000d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000d0c:	4e79      	ldr	r6, [pc, #484]	; (8000ef4 <CRYP_GCMCCM_SetHeaderPhase+0x1ec>)
{
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460f      	mov	r7, r1
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000d12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8000d14:	b08c      	sub	sp, #48	; 0x30
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000d16:	466d      	mov	r5, sp
 8000d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8000d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d28:	69e5      	ldr	r5, [r4, #28]
 8000d2a:	b903      	cbnz	r3, 8000d2e <CRYP_GCMCCM_SetHeaderPhase+0x26>
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8000d2c:	00ad      	lsls	r5, r5, #2
  if ((size_in_bytes != 0U))
 8000d2e:	6823      	ldr	r3, [r4, #0]
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000d30:	681a      	ldr	r2, [r3, #0]
  if ((size_in_bytes != 0U))
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80cd 	beq.w	8000ed2 <CRYP_GCMCCM_SetHeaderPhase+0x1ca>
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000d38:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8000d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d40:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 8000d42:	681a      	ldr	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 8000d44:	f015 060f 	ands.w	r6, r5, #15
    __HAL_CRYP_ENABLE(hcryp);
 8000d48:	f042 0201 	orr.w	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 8000d4e:	d01f      	beq.n	8000d90 <CRYP_GCMCCM_SetHeaderPhase+0x88>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8000d50:	ea4f 1815 	mov.w	r8, r5, lsr #4
 8000d54:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000d58:	2600      	movs	r6, #0
 8000d5a:	45b0      	cmp	r8, r6
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	d85e      	bhi.n	8000e1e <CRYP_GCMCCM_SetHeaderPhase+0x116>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000d60:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8000d64:	2100      	movs	r1, #0
 8000d66:	428a      	cmp	r2, r1
 8000d68:	f040 808b 	bne.w	8000e82 <CRYP_GCMCCM_SetHeaderPhase+0x17a>
      if ((size_in_bytes % 4U) == 0U)
 8000d6c:	f015 0503 	ands.w	r5, r5, #3
 8000d70:	f040 8093 	bne.w	8000e9a <CRYP_GCMCCM_SetHeaderPhase+0x192>
          loopcounter++;
 8000d74:	3101      	adds	r1, #1
        while (loopcounter < 4U)
 8000d76:	2904      	cmp	r1, #4
          hcryp->Instance->DINR = 0x0U;
 8000d78:	609d      	str	r5, [r3, #8]
        while (loopcounter < 4U)
 8000d7a:	d1fb      	bne.n	8000d74 <CRYP_GCMCCM_SetHeaderPhase+0x6c>
      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f7ff ffaa 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f000 809e 	beq.w	8000ec8 <CRYP_GCMCCM_SetHeaderPhase+0x1c0>
        __HAL_CRYP_DISABLE(hcryp);
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	e033      	b.n	8000df8 <CRYP_GCMCCM_SetHeaderPhase+0xf0>
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8000d90:	08ad      	lsrs	r5, r5, #2
 8000d92:	42b5      	cmp	r5, r6
 8000d94:	d803      	bhi.n	8000d9e <CRYP_GCMCCM_SetHeaderPhase+0x96>
  return HAL_OK;
 8000d96:	2000      	movs	r0, #0
}
 8000d98:	b00c      	add	sp, #48	; 0x30
 8000d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d9e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000da0:	69a1      	ldr	r1, [r4, #24]
 8000da2:	6822      	ldr	r2, [r4, #0]
 8000da4:	b29b      	uxth	r3, r3
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000da6:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dac:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000dae:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000db0:	3301      	adds	r3, #1
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000db6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dbe:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000dc0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000dc8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dd0:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000dd2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000dda:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de2:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000de4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	87a3      	strh	r3, [r4, #60]	; 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000dec:	4639      	mov	r1, r7
 8000dee:	f7ff ff73 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8000df2:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 8000df4:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000df6:	b168      	cbz	r0, 8000e14 <CRYP_GCMCCM_SetHeaderPhase+0x10c>
        __HAL_CRYP_DISABLE(hcryp);
 8000df8:	f022 0201 	bic.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	6563      	str	r3, [r4, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8000e06:	2001      	movs	r0, #1
        __HAL_UNLOCK(hcryp);
 8000e08:	2300      	movs	r3, #0
        hcryp->State = HAL_CRYP_STATE_READY;
 8000e0a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        __HAL_UNLOCK(hcryp);
 8000e0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8000e12:	e7c1      	b.n	8000d98 <CRYP_GCMCCM_SetHeaderPhase+0x90>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e18:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8000e1a:	3604      	adds	r6, #4
 8000e1c:	e7b9      	b.n	8000d92 <CRYP_GCMCCM_SetHeaderPhase+0x8a>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e1e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e20:	69a1      	ldr	r1, [r4, #24]
 8000e22:	b292      	uxth	r2, r2
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000e24:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e2a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e2c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e2e:	3201      	adds	r2, #1
 8000e30:	b292      	uxth	r2, r2
 8000e32:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e34:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e36:	b292      	uxth	r2, r2
 8000e38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e3e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e40:	3201      	adds	r2, #1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e46:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e4e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e50:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e52:	3201      	adds	r2, #1
 8000e54:	b292      	uxth	r2, r2
 8000e56:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e58:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e60:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e62:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	87a3      	strh	r3, [r4, #60]	; 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	f7ff ff34 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8000e70:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 8000e72:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d1bf      	bne.n	8000df8 <CRYP_GCMCCM_SetHeaderPhase+0xf0>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e7c:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8000e7e:	3604      	adds	r6, #4
 8000e80:	e76b      	b.n	8000d5a <CRYP_GCMCCM_SetHeaderPhase+0x52>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e82:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8000e84:	69a6      	ldr	r6, [r4, #24]
 8000e86:	b280      	uxth	r0, r0
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000e88:	3101      	adds	r1, #1
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e8a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8000e8e:	6098      	str	r0, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e90:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8000e92:	3001      	adds	r0, #1
 8000e94:	b280      	uxth	r0, r0
 8000e96:	87a0      	strh	r0, [r4, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000e98:	e765      	b.n	8000d66 <CRYP_GCMCCM_SetHeaderPhase+0x5e>
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e9a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8000e9c:	69a0      	ldr	r0, [r4, #24]
 8000e9e:	b289      	uxth	r1, r1
         loopcounter++;
 8000ea0:	3201      	adds	r2, #1
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000ea2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8000ea6:	6860      	ldr	r0, [r4, #4]
 8000ea8:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8000eac:	a80c      	add	r0, sp, #48	; 0x30
 8000eae:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8000eb2:	f855 0c30 	ldr.w	r0, [r5, #-48]
 8000eb6:	4001      	ands	r1, r0
         hcryp->Instance->DINR = tmp;
 8000eb8:	6099      	str	r1, [r3, #8]
           hcryp->Instance->DINR = 0x0U;
 8000eba:	2100      	movs	r1, #0
         while (loopcounter < 4U)
 8000ebc:	2a04      	cmp	r2, #4
 8000ebe:	f43f af5d 	beq.w	8000d7c <CRYP_GCMCCM_SetHeaderPhase+0x74>
           hcryp->Instance->DINR = 0x0U;
 8000ec2:	6099      	str	r1, [r3, #8]
           loopcounter++;
 8000ec4:	3201      	adds	r2, #1
 8000ec6:	e7f9      	b.n	8000ebc <CRYP_GCMCCM_SetHeaderPhase+0x1b4>
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e762      	b.n	8000d98 <CRYP_GCMCCM_SetHeaderPhase+0x90>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8000ed2:	6861      	ldr	r1, [r4, #4]
 8000ed4:	f022 0206 	bic.w	r2, r2, #6
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8000ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ee6:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	e751      	b.n	8000d98 <CRYP_GCMCCM_SetHeaderPhase+0x90>
 8000ef4:	08006af8 	.word	0x08006af8

08000ef8 <HAL_CRYP_Init>:
{
 8000ef8:	b510      	push	{r4, lr}
  if (hcryp == NULL)
 8000efa:	4604      	mov	r4, r0
 8000efc:	b1e8      	cbz	r0, 8000f3a <HAL_CRYP_Init+0x42>
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000efe:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f06:	b91b      	cbnz	r3, 8000f10 <HAL_CRYP_Init+0x18>
    hcryp->Lock = HAL_UNLOCKED;
 8000f08:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_CRYP_MspInit(hcryp);
 8000f0c:	f7ff fc5e 	bl	80007cc <HAL_CRYP_MspInit>
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8000f10:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000f14:	6821      	ldr	r1, [r4, #0]
 8000f16:	680a      	ldr	r2, [r1, #0]
 8000f18:	4303      	orrs	r3, r0
 8000f1a:	6960      	ldr	r0, [r4, #20]
 8000f1c:	f422 22a0 	bic.w	r2, r2, #327680	; 0x50000
 8000f20:	4303      	orrs	r3, r0
 8000f22:	f022 0266 	bic.w	r2, r2, #102	; 0x66
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000f2a:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8000f2c:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000f2e:	6560      	str	r0, [r4, #84]	; 0x54
  hcryp->KeyIVConfig = 0U;
 8000f30:	65a0      	str	r0, [r4, #88]	; 0x58
  hcryp->State = HAL_CRYP_STATE_READY;
 8000f32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hcryp->Phase = CRYP_PHASE_READY;
 8000f36:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000f38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e7fc      	b.n	8000f38 <HAL_CRYP_Init+0x40>

08000f3e <HAL_CRYP_DeInit>:
{
 8000f3e:	b538      	push	{r3, r4, r5, lr}
  if (hcryp == NULL)
 8000f40:	4605      	mov	r5, r0
 8000f42:	2401      	movs	r4, #1
 8000f44:	b180      	cbz	r0, 8000f68 <HAL_CRYP_DeInit+0x2a>
  __HAL_CRYP_DISABLE(hcryp);
 8000f46:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = CRYP_PHASE_READY;
 8000f48:	6444      	str	r4, [r0, #68]	; 0x44
  hcryp->CrypInCount = 0;
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	87c4      	strh	r4, [r0, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 8000f4e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 8000f52:	8784      	strh	r4, [r0, #60]	; 0x3c
  __HAL_CRYP_DISABLE(hcryp);
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8000f5c:	f7ff fc4e 	bl	80007fc <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8000f60:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  __HAL_UNLOCK(hcryp);
 8000f64:	f885 4050 	strb.w	r4, [r5, #80]	; 0x50
    return HAL_ERROR;
 8000f68:	4620      	mov	r0, r4
}
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}

08000f6c <HAL_CRYP_ErrorCallback>:
 8000f6c:	4770      	bx	lr

08000f6e <CRYP_AES_ProcessData>:
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f6e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000f70:	6802      	ldr	r2, [r0, #0]
{
 8000f72:	b530      	push	{r4, r5, lr}
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8000f78:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f7c:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f7e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000f80:	3301      	adds	r3, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f86:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000f88:	b29b      	uxth	r3, r3
{
 8000f8a:	b085      	sub	sp, #20
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f8c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f90:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f92:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f9a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000f9c:	b29b      	uxth	r3, r3
{
 8000f9e:	4604      	mov	r4, r0
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000fa0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000fa4:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000fa6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000fae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000fb6:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000fb8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000fc0:	f7ff fe8a 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8000fc4:	b188      	cbz	r0, 8000fea <CRYP_AES_ProcessData+0x7c>
    __HAL_CRYP_DISABLE(hcryp);
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000fd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6563      	str	r3, [r4, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hcryp);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_CRYP_ErrorCallback(hcryp);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ffc1 	bl	8000f6c <HAL_CRYP_ErrorCallback>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ff2:	601a      	str	r2, [r3, #0]
    temp[i] = hcryp->Instance->DOUTR;
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	9303      	str	r3, [sp, #12]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001002:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    temp[i] = hcryp->Instance->DOUTR;
 8001006:	9202      	str	r2, [sp, #8]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001008:	3303      	adds	r3, #3
 800100a:	089b      	lsrs	r3, r3, #2
  i= 0U;
 800100c:	2100      	movs	r1, #0
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 800100e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8001012:	b292      	uxth	r2, r2
 8001014:	429a      	cmp	r2, r3
 8001016:	d201      	bcs.n	800101c <CRYP_AES_ProcessData+0xae>
 8001018:	2904      	cmp	r1, #4
 800101a:	d101      	bne.n	8001020 <CRYP_AES_ProcessData+0xb2>
}
 800101c:	b005      	add	sp, #20
 800101e:	bd30      	pop	{r4, r5, pc}
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001020:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8001024:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001026:	f85d 5021 	ldr.w	r5, [sp, r1, lsl #2]
 800102a:	b292      	uxth	r2, r2
    i++;
 800102c:	3101      	adds	r1, #1
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 800102e:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    hcryp->CrypOutCount++;
 8001032:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8001036:	3201      	adds	r2, #1
 8001038:	b292      	uxth	r2, r2
 800103a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    i++;
 800103e:	e7e6      	b.n	800100e <CRYP_AES_ProcessData+0xa0>

08001040 <CRYP_AESCCM_Process>:
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001042:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001044:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001048:	2b01      	cmp	r3, #1
{
 800104a:	b085      	sub	sp, #20
 800104c:	4604      	mov	r4, r0
 800104e:	460e      	mov	r6, r1
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001050:	d11f      	bne.n	8001092 <CRYP_AESCCM_Process+0x52>
    if (hcryp->KeyIVConfig == 1U)
 8001052:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001054:	2a01      	cmp	r2, #1
 8001056:	d11b      	bne.n	8001090 <CRYP_AESCCM_Process+0x50>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001058:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800105a:	442b      	add	r3, r5
 800105c:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hcryp->Size % 16U) != 0U)
 800105e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001062:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 8001064:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 8001066:	bf18      	it	ne
 8001068:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 800106c:	f005 fb28 	bl	80066c0 <HAL_GetTick>
 8001070:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 8001072:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    outcount = hcryp->CrypOutCount;
 8001074:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 8001078:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 800107a:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 800107c:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 800107e:	d901      	bls.n	8001084 <CRYP_AESCCM_Process+0x44>
 8001080:	429d      	cmp	r5, r3
 8001082:	d849      	bhi.n	8001118 <CRYP_AESCCM_Process+0xd8>
  if ((hcryp->Size % 16U) != 0U)
 8001084:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8001088:	071a      	lsls	r2, r3, #28
 800108a:	d162      	bne.n	8001152 <CRYP_AESCCM_Process+0x112>
  return HAL_OK;
 800108c:	2000      	movs	r0, #0
 800108e:	e027      	b.n	80010e0 <CRYP_AESCCM_Process+0xa0>
      hcryp->KeyIVConfig = 1U;
 8001090:	6583      	str	r3, [r0, #88]	; 0x58
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001092:	6822      	ldr	r2, [r4, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001094:	68a1      	ldr	r1, [r4, #8]
    hcryp->SizesSum = hcryp->Size;
 8001096:	65e5      	str	r5, [r4, #92]	; 0x5c
    hcryp->CrypHeaderCount = 0U;
 8001098:	2700      	movs	r7, #0
 800109a:	87a7      	strh	r7, [r4, #60]	; 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80010a2:	6013      	str	r3, [r2, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fdf6 	bl	8000c96 <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 80010aa:	6a22      	ldr	r2, [r4, #32]
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	6811      	ldr	r1, [r2, #0]
 80010b0:	62d9      	str	r1, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 80010b2:	6851      	ldr	r1, [r2, #4]
 80010b4:	6299      	str	r1, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 80010b6:	6891      	ldr	r1, [r2, #8]
 80010b8:	6259      	str	r1, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 80010ba:	68d2      	ldr	r2, [r2, #12]
 80010bc:	621a      	str	r2, [r3, #32]
    __HAL_CRYP_ENABLE(hcryp);
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80010c6:	4631      	mov	r1, r6
 80010c8:	f7ff fe06 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 80010cc:	b150      	cbz	r0, 80010e4 <CRYP_AESCCM_Process+0xa4>
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80010ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 80010d0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80010d4:	f043 0310 	orr.w	r3, r3, #16
      hcryp->State = HAL_CRYP_STATE_READY;
 80010d8:	2001      	movs	r0, #1
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80010da:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80010dc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 80010e0:	b005      	add	sp, #20
 80010e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80010ee:	4631      	mov	r1, r6
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff fe09 	bl	8000d08 <CRYP_GCMCCM_SetHeaderPhase>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	f040 8086 	bne.w	8001208 <CRYP_AESCCM_Process+0x1c8>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80010fc:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80010fe:	2302      	movs	r3, #2
 8001100:	6463      	str	r3, [r4, #68]	; 0x44
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e7a2      	b.n	800105e <CRYP_AESCCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001118:	4631      	mov	r1, r6
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff ff27 	bl	8000f6e <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 8001120:	1c71      	adds	r1, r6, #1
 8001122:	d0a6      	beq.n	8001072 <CRYP_AESCCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8001124:	f005 facc 	bl	80066c0 <HAL_GetTick>
 8001128:	1bc0      	subs	r0, r0, r7
 800112a:	42b0      	cmp	r0, r6
 800112c:	d801      	bhi.n	8001132 <CRYP_AESCCM_Process+0xf2>
 800112e:	2e00      	cmp	r6, #0
 8001130:	d19f      	bne.n	8001072 <CRYP_AESCCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 8001132:	6822      	ldr	r2, [r4, #0]
 8001134:	6813      	ldr	r3, [r2, #0]
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800113c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001144:	2001      	movs	r0, #1
      __HAL_UNLOCK(hcryp);
 8001146:	2300      	movs	r3, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8001148:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 800114c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR;
 8001150:	e7c6      	b.n	80010e0 <CRYP_AESCCM_Process+0xa0>
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8001152:	6821      	ldr	r1, [r4, #0]
 8001154:	6808      	ldr	r0, [r1, #0]
 8001156:	f000 0018 	and.w	r0, r0, #24
 800115a:	2810      	cmp	r0, #16
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 800115c:	bf08      	it	eq
 800115e:	6808      	ldreq	r0, [r1, #0]
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001160:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8001164:	f102 0201 	add.w	r2, r2, #1
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001168:	bf08      	it	eq
 800116a:	f420 0070 	biceq.w	r0, r0, #15728640	; 0xf00000
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800116e:	ea4f 1702 	mov.w	r7, r2, lsl #4
 8001172:	f103 0510 	add.w	r5, r3, #16
 8001176:	ebc3 1202 	rsb	r2, r3, r2, lsl #4
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 800117a:	bf08      	it	eq
 800117c:	ea40 5002 	orreq.w	r0, r0, r2, lsl #20
 8001180:	eba5 0507 	sub.w	r5, r5, r7
 8001184:	bf08      	it	eq
 8001186:	6008      	streq	r0, [r1, #0]
    if ((npblb % 4U) == 0U)
 8001188:	08ad      	lsrs	r5, r5, #2
 800118a:	0793      	lsls	r3, r2, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800118c:	bf18      	it	ne
 800118e:	3501      	addne	r5, #1
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001190:	2200      	movs	r2, #0
 8001192:	42aa      	cmp	r2, r5
 8001194:	d129      	bne.n	80011ea <CRYP_AESCCM_Process+0x1aa>
 8001196:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 8001198:	2200      	movs	r2, #0
    while (loopcounter < 4U)
 800119a:	2b03      	cmp	r3, #3
 800119c:	d931      	bls.n	8001202 <CRYP_AESCCM_Process+0x1c2>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800119e:	4631      	mov	r1, r6
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fd99 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d1c8      	bne.n	800113c <CRYP_AESCCM_Process+0xfc>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011b2:	601a      	str	r2, [r3, #0]
      temp[loopcounter] = hcryp->Instance->DOUTR;
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	9200      	str	r2, [sp, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	9202      	str	r2, [sp, #8]
 80011c2:	9303      	str	r3, [sp, #12]
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011c4:	42a8      	cmp	r0, r5
 80011c6:	f43f af61 	beq.w	800108c <CRYP_AESCCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80011ca:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80011ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011d0:	f85d 1020 	ldr.w	r1, [sp, r0, lsl #2]
 80011d4:	b29b      	uxth	r3, r3
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011d6:	3001      	adds	r0, #1
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80011d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      hcryp->CrypOutCount++;
 80011dc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011e8:	e7ec      	b.n	80011c4 <CRYP_AESCCM_Process+0x184>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80011ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011ee:	b29b      	uxth	r3, r3
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80011f0:	3201      	adds	r2, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80011f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011f6:	608b      	str	r3, [r1, #8]
      hcryp->CrypInCount++;
 80011f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001200:	e7c7      	b.n	8001192 <CRYP_AESCCM_Process+0x152>
      hcryp->Instance->DINR  = 0U;
 8001202:	608a      	str	r2, [r1, #8]
      loopcounter++;
 8001204:	3301      	adds	r3, #1
 8001206:	e7c8      	b.n	800119a <CRYP_AESCCM_Process+0x15a>
      return HAL_ERROR;
 8001208:	2001      	movs	r0, #1
 800120a:	e769      	b.n	80010e0 <CRYP_AESCCM_Process+0xa0>

0800120c <CRYP_AESGCM_Process>:
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800120e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001210:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001214:	2b01      	cmp	r3, #1
{
 8001216:	b085      	sub	sp, #20
 8001218:	4604      	mov	r4, r0
 800121a:	460e      	mov	r6, r1
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800121c:	d11f      	bne.n	800125e <CRYP_AESGCM_Process+0x52>
    if (hcryp->KeyIVConfig == 1U)
 800121e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001220:	2a01      	cmp	r2, #1
 8001222:	d11b      	bne.n	800125c <CRYP_AESGCM_Process+0x50>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001224:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001226:	442b      	add	r3, r5
 8001228:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hcryp->Size % 16U) != 0U)
 800122a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800122e:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 8001230:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 8001232:	bf18      	it	ne
 8001234:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 8001238:	f005 fa42 	bl	80066c0 <HAL_GetTick>
 800123c:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 800123e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    outcount = hcryp->CrypOutCount;
 8001240:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 8001244:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 8001246:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 8001248:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 800124a:	d901      	bls.n	8001250 <CRYP_AESGCM_Process+0x44>
 800124c:	429d      	cmp	r5, r3
 800124e:	d849      	bhi.n	80012e4 <CRYP_AESGCM_Process+0xd8>
  if ((hcryp->Size % 16U) != 0U)
 8001250:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8001254:	071a      	lsls	r2, r3, #28
 8001256:	d162      	bne.n	800131e <CRYP_AESGCM_Process+0x112>
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
 800125a:	e027      	b.n	80012ac <CRYP_AESGCM_Process+0xa0>
      hcryp->KeyIVConfig = 1U;
 800125c:	6583      	str	r3, [r0, #88]	; 0x58
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800125e:	6822      	ldr	r2, [r4, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001260:	68a1      	ldr	r1, [r4, #8]
    hcryp->SizesSum = hcryp->Size;
 8001262:	65e5      	str	r5, [r4, #92]	; 0x5c
    hcryp->CrypHeaderCount = 0U;
 8001264:	2700      	movs	r7, #0
 8001266:	87a7      	strh	r7, [r4, #60]	; 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800126e:	6013      	str	r3, [r2, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fd10 	bl	8000c96 <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001276:	6922      	ldr	r2, [r4, #16]
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	6811      	ldr	r1, [r2, #0]
 800127c:	62d9      	str	r1, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800127e:	6851      	ldr	r1, [r2, #4]
 8001280:	6299      	str	r1, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001282:	6891      	ldr	r1, [r2, #8]
 8001284:	6259      	str	r1, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001286:	68d2      	ldr	r2, [r2, #12]
 8001288:	621a      	str	r2, [r3, #32]
    __HAL_CRYP_ENABLE(hcryp);
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001292:	4631      	mov	r1, r6
 8001294:	f7ff fd20 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8001298:	b150      	cbz	r0, 80012b0 <CRYP_AESGCM_Process+0xa4>
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800129a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 800129c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80012a0:	f043 0310 	orr.w	r3, r3, #16
      hcryp->State = HAL_CRYP_STATE_READY;
 80012a4:	2001      	movs	r0, #1
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80012a6:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80012a8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 80012ac:	b005      	add	sp, #20
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80012ba:	4631      	mov	r1, r6
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fd23 	bl	8000d08 <CRYP_GCMCCM_SetHeaderPhase>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 808e 	bne.w	80013e4 <CRYP_AESGCM_Process+0x1d8>
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80012c8:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80012ca:	2302      	movs	r3, #2
 80012cc:	6463      	str	r3, [r4, #68]	; 0x44
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e7a2      	b.n	800122a <CRYP_AESGCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80012e4:	4631      	mov	r1, r6
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fe41 	bl	8000f6e <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 80012ec:	1c71      	adds	r1, r6, #1
 80012ee:	d0a6      	beq.n	800123e <CRYP_AESGCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012f0:	f005 f9e6 	bl	80066c0 <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	42b0      	cmp	r0, r6
 80012f8:	d801      	bhi.n	80012fe <CRYP_AESGCM_Process+0xf2>
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d19f      	bne.n	800123e <CRYP_AESGCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 80012fe:	6822      	ldr	r2, [r4, #0]
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001308:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6563      	str	r3, [r4, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8001310:	2001      	movs	r0, #1
        __HAL_UNLOCK(hcryp);
 8001312:	2300      	movs	r3, #0
        hcryp->State = HAL_CRYP_STATE_READY;
 8001314:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        __HAL_UNLOCK(hcryp);
 8001318:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 800131c:	e7c6      	b.n	80012ac <CRYP_AESGCM_Process+0xa0>
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 800131e:	6821      	ldr	r1, [r4, #0]
 8001320:	6808      	ldr	r0, [r1, #0]
 8001322:	f010 0f18 	tst.w	r0, #24
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001326:	bf08      	it	eq
 8001328:	6808      	ldreq	r0, [r1, #0]
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800132a:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800132e:	f102 0201 	add.w	r2, r2, #1
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001332:	bf08      	it	eq
 8001334:	f420 0070 	biceq.w	r0, r0, #15728640	; 0xf00000
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001338:	ea4f 1702 	mov.w	r7, r2, lsl #4
 800133c:	f103 0510 	add.w	r5, r3, #16
 8001340:	ebc3 1202 	rsb	r2, r3, r2, lsl #4
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001344:	bf08      	it	eq
 8001346:	ea40 5002 	orreq.w	r0, r0, r2, lsl #20
 800134a:	eba5 0507 	sub.w	r5, r5, r7
 800134e:	bf08      	it	eq
 8001350:	6008      	streq	r0, [r1, #0]
    if ((npblb % 4U) == 0U)
 8001352:	08ad      	lsrs	r5, r5, #2
 8001354:	0793      	lsls	r3, r2, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001356:	bf18      	it	ne
 8001358:	3501      	addne	r5, #1
    for (index = 0U; index < lastwordsize; index ++)
 800135a:	2200      	movs	r2, #0
 800135c:	42aa      	cmp	r2, r5
 800135e:	d132      	bne.n	80013c6 <CRYP_AESGCM_Process+0x1ba>
 8001360:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 8001362:	2200      	movs	r2, #0
    while (index < 4U)
 8001364:	2b03      	cmp	r3, #3
 8001366:	d93a      	bls.n	80013de <CRYP_AESGCM_Process+0x1d2>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001368:	4631      	mov	r1, r6
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fcb4 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 8001370:	b140      	cbz	r0, 8001384 <CRYP_AESGCM_Process+0x178>
      hcryp->State = HAL_CRYP_STATE_READY;
 8001372:	2301      	movs	r3, #1
 8001374:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8001378:	2300      	movs	r3, #0
 800137a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_CRYP_ErrorCallback(hcryp);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fdf4 	bl	8000f6c <HAL_CRYP_ErrorCallback>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800138c:	601a      	str	r2, [r3, #0]
      temp[index] = hcryp->Instance->DOUTR;
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	9303      	str	r3, [sp, #12]
    for (index = 0U; index < lastwordsize; index++)
 800139e:	2200      	movs	r2, #0
 80013a0:	42aa      	cmp	r2, r5
 80013a2:	f43f af59 	beq.w	8001258 <CRYP_AESGCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80013a6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80013aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80013ac:	f85d 0022 	ldr.w	r0, [sp, r2, lsl #2]
 80013b0:	b29b      	uxth	r3, r3
    for (index = 0U; index < lastwordsize; index++)
 80013b2:	3201      	adds	r2, #1
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80013b4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      hcryp->CrypOutCount++;
 80013b8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 80013c4:	e7ec      	b.n	80013a0 <CRYP_AESGCM_Process+0x194>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80013c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013ca:	b29b      	uxth	r3, r3
    for (index = 0U; index < lastwordsize; index ++)
 80013cc:	3201      	adds	r2, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80013ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013d2:	608b      	str	r3, [r1, #8]
      hcryp->CrypInCount++;
 80013d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	87e3      	strh	r3, [r4, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 80013dc:	e7be      	b.n	800135c <CRYP_AESGCM_Process+0x150>
      hcryp->Instance->DINR  = 0U;
 80013de:	608a      	str	r2, [r1, #8]
      index++;
 80013e0:	3301      	adds	r3, #1
 80013e2:	e7bf      	b.n	8001364 <CRYP_AESGCM_Process+0x158>
      return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e761      	b.n	80012ac <CRYP_AESGCM_Process+0xa0>

080013e8 <HAL_CRYP_Encrypt>:
{
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80013ea:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
{
 80013ee:	9d06      	ldr	r5, [sp, #24]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80013f0:	2e01      	cmp	r6, #1
{
 80013f2:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80013f4:	b2f0      	uxtb	r0, r6
 80013f6:	d178      	bne.n	80014ea <HAL_CRYP_Encrypt+0x102>
    __HAL_LOCK(hcryp);
 80013f8:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80013fc:	2602      	movs	r6, #2
    __HAL_LOCK(hcryp);
 80013fe:	2f01      	cmp	r7, #1
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001400:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
    __HAL_LOCK(hcryp);
 8001404:	d077      	beq.n	80014f6 <HAL_CRYP_Encrypt+0x10e>
    hcryp->pCrypOutBuffPtr = Output;
 8001406:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800140a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_LOCK(hcryp);
 800140c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hcryp->CrypInCount = 0U;
 8001410:	2600      	movs	r6, #0
 8001412:	87e6      	strh	r6, [r4, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8001414:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001418:	b90b      	cbnz	r3, 800141e <HAL_CRYP_Encrypt+0x36>
      hcryp->Size = Size * 4U;
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	b292      	uxth	r2, r2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f022 0218 	bic.w	r2, r2, #24
 800142a:	601a      	str	r2, [r3, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_CRYP_Encrypt+0x114>)
 8001430:	4013      	ands	r3, r2
    switch (algo)
 8001432:	2b60      	cmp	r3, #96	; 0x60
 8001434:	d052      	beq.n	80014dc <HAL_CRYP_Encrypt+0xf4>
 8001436:	d809      	bhi.n	800144c <HAL_CRYP_Encrypt+0x64>
 8001438:	2b40      	cmp	r3, #64	; 0x40
 800143a:	d00f      	beq.n	800145c <HAL_CRYP_Encrypt+0x74>
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_CRYP_Encrypt+0x118>)
 800143e:	4013      	ands	r3, r2
 8001440:	b163      	cbz	r3, 800145c <HAL_CRYP_Encrypt+0x74>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001442:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	6563      	str	r3, [r4, #84]	; 0x54
}
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (algo)
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d1f7      	bne.n	8001442 <HAL_CRYP_Encrypt+0x5a>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001452:	4629      	mov	r1, r5
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff fdf3 	bl	8001040 <CRYP_AESCCM_Process>
        break;
 800145a:	e043      	b.n	80014e4 <HAL_CRYP_Encrypt+0xfc>
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800145c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800145e:	2b01      	cmp	r3, #1
 8001460:	d103      	bne.n	800146a <HAL_CRYP_Encrypt+0x82>
    if (hcryp->KeyIVConfig == 1U)
 8001462:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001464:	2a01      	cmp	r2, #1
 8001466:	d010      	beq.n	800148a <HAL_CRYP_Encrypt+0xa2>
      hcryp->KeyIVConfig = 1U;
 8001468:	65a3      	str	r3, [r4, #88]	; 0x58
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800146a:	68a1      	ldr	r1, [r4, #8]
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fc12 	bl	8000c96 <CRYP_SetKey>
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001472:	6963      	ldr	r3, [r4, #20]
 8001474:	b14b      	cbz	r3, 800148a <HAL_CRYP_Encrypt+0xa2>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001476:	6922      	ldr	r2, [r4, #16]
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	6811      	ldr	r1, [r2, #0]
 800147c:	62d9      	str	r1, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800147e:	6851      	ldr	r1, [r2, #4]
 8001480:	6299      	str	r1, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001482:	6891      	ldr	r1, [r2, #8]
 8001484:	6259      	str	r1, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001486:	68d2      	ldr	r2, [r2, #12]
 8001488:	621a      	str	r2, [r3, #32]
  __HAL_CRYP_ENABLE(hcryp);
 800148a:	6822      	ldr	r2, [r4, #0]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 800148c:	2302      	movs	r3, #2
 800148e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_CRYP_ENABLE(hcryp);
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]
    incount = hcryp->CrypInCount;
 8001498:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800149a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    outcount = hcryp->CrypOutCount;
 800149e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 80014a2:	b292      	uxth	r2, r2
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80014a4:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
    outcount = hcryp->CrypOutCount;
 80014a8:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80014aa:	ea4f 0091 	mov.w	r0, r1, lsr #2
 80014ae:	d201      	bcs.n	80014b4 <HAL_CRYP_Encrypt+0xcc>
 80014b0:	4298      	cmp	r0, r3
 80014b2:	d80e      	bhi.n	80014d2 <HAL_CRYP_Encrypt+0xea>
  __HAL_CRYP_DISABLE(hcryp);
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 80014be:	2301      	movs	r3, #1
 80014c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 80014c4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 80014c6:	2000      	movs	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 80014c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 80014cc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 80014d0:	e7bb      	b.n	800144a <HAL_CRYP_Encrypt+0x62>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80014d2:	4629      	mov	r1, r5
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fd4a 	bl	8000f6e <CRYP_AES_ProcessData>
 80014da:	e7dd      	b.n	8001498 <HAL_CRYP_Encrypt+0xb0>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80014dc:	4629      	mov	r1, r5
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff fe94 	bl	800120c <CRYP_AESGCM_Process>
    if (status == HAL_OK)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1b0      	bne.n	800144a <HAL_CRYP_Encrypt+0x62>
 80014e8:	e7ec      	b.n	80014c4 <HAL_CRYP_Encrypt+0xdc>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80014ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	e7a9      	b.n	800144a <HAL_CRYP_Encrypt+0x62>
    __HAL_LOCK(hcryp);
 80014f6:	4630      	mov	r0, r6
 80014f8:	e7a7      	b.n	800144a <HAL_CRYP_Encrypt+0x62>
 80014fa:	bf00      	nop
 80014fc:	00010060 	.word	0x00010060
 8001500:	00010040 	.word	0x00010040

08001504 <HAL_CRYP_Decrypt>:
{
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001508:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
{
 800150c:	9e06      	ldr	r6, [sp, #24]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 800150e:	2801      	cmp	r0, #1
 8001510:	b2c5      	uxtb	r5, r0
 8001512:	f040 80ba 	bne.w	800168a <HAL_CRYP_Decrypt+0x186>
    __HAL_LOCK(hcryp);
 8001516:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800151a:	2002      	movs	r0, #2
    __HAL_LOCK(hcryp);
 800151c:	2f01      	cmp	r7, #1
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800151e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    __HAL_LOCK(hcryp);
 8001522:	f000 80b8 	beq.w	8001696 <HAL_CRYP_Decrypt+0x192>
    hcryp->pCrypOutBuffPtr = Output;
 8001526:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800152a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_LOCK(hcryp);
 800152c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    hcryp->CrypInCount = 0U;
 8001530:	2000      	movs	r0, #0
 8001532:	87e0      	strh	r0, [r4, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8001534:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001538:	b90b      	cbnz	r3, 800153e <HAL_CRYP_Decrypt+0x3a>
      hcryp->Size = Size * 4U;
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	b292      	uxth	r2, r2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	f022 0218 	bic.w	r2, r2, #24
 800154a:	f042 0210 	orr.w	r2, r2, #16
 800154e:	601a      	str	r2, [r3, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_CRYP_Decrypt+0x198>)
 8001554:	400a      	ands	r2, r1
    switch (algo)
 8001556:	2a60      	cmp	r2, #96	; 0x60
 8001558:	f000 808f 	beq.w	800167a <HAL_CRYP_Decrypt+0x176>
 800155c:	d809      	bhi.n	8001572 <HAL_CRYP_Decrypt+0x6e>
 800155e:	2a40      	cmp	r2, #64	; 0x40
 8001560:	d00f      	beq.n	8001582 <HAL_CRYP_Decrypt+0x7e>
 8001562:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_CRYP_Decrypt+0x19c>)
 8001564:	400a      	ands	r2, r1
 8001566:	b162      	cbz	r2, 8001582 <HAL_CRYP_Decrypt+0x7e>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6563      	str	r3, [r4, #84]	; 0x54
    if (status == HAL_OK)
 8001570:	e036      	b.n	80015e0 <HAL_CRYP_Decrypt+0xdc>
    switch (algo)
 8001572:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001576:	d1f7      	bne.n	8001568 <HAL_CRYP_Decrypt+0x64>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001578:	4631      	mov	r1, r6
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fd60 	bl	8001040 <CRYP_AESCCM_Process>
 8001580:	e07f      	b.n	8001682 <HAL_CRYP_Decrypt+0x17e>
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001584:	2a01      	cmp	r2, #1
 8001586:	d103      	bne.n	8001590 <HAL_CRYP_Decrypt+0x8c>
    if (hcryp->KeyIVConfig == 1U)
 8001588:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800158a:	2901      	cmp	r1, #1
 800158c:	d03f      	beq.n	800160e <HAL_CRYP_Decrypt+0x10a>
      hcryp->KeyIVConfig = 1U;
 800158e:	65a2      	str	r2, [r4, #88]	; 0x58
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001590:	6962      	ldr	r2, [r4, #20]
 8001592:	68a1      	ldr	r1, [r4, #8]
 8001594:	2a40      	cmp	r2, #64	; 0x40
 8001596:	d067      	beq.n	8001668 <HAL_CRYP_Decrypt+0x164>
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8001598:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
 800159c:	2f00      	cmp	r7, #0
 800159e:	d15a      	bne.n	8001656 <HAL_CRYP_Decrypt+0x152>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f022 0218 	bic.w	r2, r2, #24
 80015a6:	f042 0208 	orr.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fb72 	bl	8000c96 <CRYP_SetKey>
        __HAL_CRYP_ENABLE(hcryp);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80015bc:	4631      	mov	r1, r6
 80015be:	f7ff fb8b 	bl	8000cd8 <CRYP_WaitOnCCFlag>
 80015c2:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 80015c4:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80015c6:	b168      	cbz	r0, 80015e4 <HAL_CRYP_Decrypt+0xe0>
          __HAL_CRYP_DISABLE(hcryp);
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80015ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hcryp);
 80015d0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6563      	str	r3, [r4, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80015da:	2301      	movs	r3, #1
 80015dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80015e0:	4628      	mov	r0, r5
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80015e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e8:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f022 0218 	bic.w	r2, r2, #24
 80015f0:	f042 0210 	orr.w	r2, r2, #16
 80015f4:	601a      	str	r2, [r3, #0]
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80015f6:	6963      	ldr	r3, [r4, #20]
 80015f8:	b14b      	cbz	r3, 800160e <HAL_CRYP_Decrypt+0x10a>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80015fa:	6922      	ldr	r2, [r4, #16]
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	6811      	ldr	r1, [r2, #0]
 8001600:	62d9      	str	r1, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8001602:	6851      	ldr	r1, [r2, #4]
 8001604:	6299      	str	r1, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001606:	6891      	ldr	r1, [r2, #8]
 8001608:	6259      	str	r1, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800160a:	68d2      	ldr	r2, [r2, #12]
 800160c:	621a      	str	r2, [r3, #32]
  __HAL_CRYP_ENABLE(hcryp);
 800160e:	6822      	ldr	r2, [r4, #0]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8001610:	2302      	movs	r3, #2
 8001612:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_CRYP_ENABLE(hcryp);
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6013      	str	r3, [r2, #0]
    incount = hcryp->CrypInCount;
 800161c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800161e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    outcount = hcryp->CrypOutCount;
 8001622:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 8001626:	b292      	uxth	r2, r2
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001628:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
    outcount = hcryp->CrypOutCount;
 800162c:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800162e:	ea4f 0091 	mov.w	r0, r1, lsr #2
 8001632:	d201      	bcs.n	8001638 <HAL_CRYP_Decrypt+0x134>
 8001634:	4298      	cmp	r0, r3
 8001636:	d81b      	bhi.n	8001670 <HAL_CRYP_Decrypt+0x16c>
  __HAL_CRYP_DISABLE(hcryp);
 8001638:	6822      	ldr	r2, [r4, #0]
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 8001642:	2301      	movs	r3, #1
 8001644:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 8001648:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 800164a:	2500      	movs	r5, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 800164c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8001650:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001654:	e7c4      	b.n	80015e0 <HAL_CRYP_Decrypt+0xdc>
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fb1d 	bl	8000c96 <CRYP_SetKey>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	f043 0318 	orr.w	r3, r3, #24
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e7c6      	b.n	80015f6 <HAL_CRYP_Decrypt+0xf2>
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fb14 	bl	8000c96 <CRYP_SetKey>
 800166e:	e7c2      	b.n	80015f6 <HAL_CRYP_Decrypt+0xf2>
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001670:	4631      	mov	r1, r6
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fc7b 	bl	8000f6e <CRYP_AES_ProcessData>
 8001678:	e7d0      	b.n	800161c <HAL_CRYP_Decrypt+0x118>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 800167a:	4631      	mov	r1, r6
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fdc5 	bl	800120c <CRYP_AESGCM_Process>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001682:	4605      	mov	r5, r0
    if (status == HAL_OK)
 8001684:	2800      	cmp	r0, #0
 8001686:	d1ab      	bne.n	80015e0 <HAL_CRYP_Decrypt+0xdc>
 8001688:	e7de      	b.n	8001648 <HAL_CRYP_Decrypt+0x144>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800168a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001692:	2501      	movs	r5, #1
 8001694:	e7a4      	b.n	80015e0 <HAL_CRYP_Decrypt+0xdc>
    __HAL_LOCK(hcryp);
 8001696:	4605      	mov	r5, r0
 8001698:	e7a2      	b.n	80015e0 <HAL_CRYP_Decrypt+0xdc>
 800169a:	bf00      	nop
 800169c:	00010060 	.word	0x00010060
 80016a0:	00010040 	.word	0x00010040

080016a4 <HAL_CRYPEx_AESGCM_GenerateAuthTAG>:
  * @param  AuthTag Pointer to the authentication buffer
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AESGCM_GenerateAuthTAG(CRYP_HandleTypeDef *hcryp, uint32_t *AuthTag, uint32_t Timeout)
{
 80016a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a8:	4604      	mov	r4, r0
 80016aa:	4617      	mov	r7, r2
  uint32_t tickstart;
  /* Assume first Init.HeaderSize is in words */
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 80016ac:	69c0      	ldr	r0, [r0, #28]
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
  uint32_t tagaddr = (uint32_t)AuthTag;

  /* Correct headerlength if Init.HeaderSize is actually in bytes */
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 80016ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 80016b0:	0ec3      	lsrs	r3, r0, #27
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 80016b2:	2a01      	cmp	r2, #1
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 80016b4:	ea4f 1040 	mov.w	r0, r0, lsl #5
  {
    headerlength /= 4U;
 80016b8:	bf04      	itt	eq
 80016ba:	0880      	lsreq	r0, r0, #2
 80016bc:	ea40 7083 	orreq.w	r0, r0, r3, lsl #30
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80016c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80016c4:	2b01      	cmp	r3, #1
{
 80016c6:	460e      	mov	r6, r1
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80016c8:	b2dd      	uxtb	r5, r3
 80016ca:	d163      	bne.n	8001794 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xf0>
  {
    /* Process locked */
    __HAL_LOCK(hcryp);
 80016cc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	f04f 0302 	mov.w	r3, #2
 80016d6:	d063      	beq.n	80017a0 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xfc>

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_BUSY;

    /* Check if initialization phase has already been performed */
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 80016d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80016da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 80016de:	2902      	cmp	r1, #2
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 80016e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    __HAL_LOCK(hcryp);
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 80016e8:	d12d      	bne.n	8001746 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xa2>
    {
      /* Change the CRYP phase */
      hcryp->Phase = CRYPEx_PHASE_FINAL;
 80016ea:	2103      	movs	r1, #3
 80016ec:	6461      	str	r1, [r4, #68]	; 0x44
      __HAL_UNLOCK(hcryp);
      return HAL_ERROR;
    }

    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80016f4:	6019      	str	r1, [r3, #0]

    /* Set the encrypt operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	f021 0118 	bic.w	r1, r1, #24
 80016fc:	6019      	str	r1, [r3, #0]
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 80016fe:	00d2      	lsls	r2, r2, #3

    /*TinyAES peripheral from V3.1.1 : data has to be inserted normally (no swapping)*/
    /* Write into the AES_DINR register the number of bits in header (64 bits)
    followed by the number of bits in the payload */

    hcryp->Instance->DINR = 0U;
 8001700:	2100      	movs	r1, #0
 8001702:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(headerlength);
 8001704:	6098      	str	r0, [r3, #8]
    hcryp->Instance->DINR = 0U;
 8001706:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(inputlength);
 8001708:	609a      	str	r2, [r3, #8]

    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 800170a:	f004 ffd9 	bl	80066c0 <HAL_GetTick>
 800170e:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	07d2      	lsls	r2, r2, #31
 8001716:	d526      	bpl.n	8001766 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xc2>
        }
      }
    }

    /* Read the authentication TAG in the output FIFO */
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	6032      	str	r2, [r6, #0]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	6072      	str	r2, [r6, #4]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	60b2      	str	r2, [r6, #8]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	60f2      	str	r2, [r6, #12]

    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172e:	601a      	str	r2, [r3, #0]

    /* Disable the peripheral */
    __HAL_CRYP_DISABLE(hcryp);
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8001738:	2500      	movs	r5, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 800173a:	2301      	movs	r3, #1
 800173c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hcryp);
 8001740:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
    return HAL_ERROR;
  }
  /* Return function status */
  return HAL_OK;
 8001744:	e00c      	b.n	8001760 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbc>
      __HAL_CRYP_DISABLE(hcryp);
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE;
 800174e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001754:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001756:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
          __HAL_UNLOCK(hcryp);
 800175a:	2300      	movs	r3, #0
 800175c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001760:	4628      	mov	r0, r5
 8001762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001766:	1c79      	adds	r1, r7, #1
 8001768:	d0d3      	beq.n	8001712 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x6e>
        if (((HAL_GetTick() - tickstart) > Timeout)||(Timeout == 0U))
 800176a:	f004 ffa9 	bl	80066c0 <HAL_GetTick>
 800176e:	eba0 0008 	sub.w	r0, r0, r8
 8001772:	42b8      	cmp	r0, r7
 8001774:	d801      	bhi.n	800177a <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xd6>
 8001776:	2f00      	cmp	r7, #0
 8001778:	d1ca      	bne.n	8001710 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x6c>
          __HAL_CRYP_DISABLE(hcryp);
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6813      	ldr	r3, [r2, #0]
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001784:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6563      	str	r3, [r4, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800178c:	2301      	movs	r3, #1
 800178e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8001792:	e7e2      	b.n	800175a <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xb6>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8001794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800179c:	2501      	movs	r5, #1
 800179e:	e7df      	b.n	8001760 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbc>
    __HAL_LOCK(hcryp);
 80017a0:	461d      	mov	r5, r3
 80017a2:	e7dd      	b.n	8001760 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbc>

080017a4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <FLASH_Program_Fast+0x2c>)
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
{
 80017ac:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80017ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	2200      	movs	r2, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80017b8:	588d      	ldr	r5, [r1, r2]
 80017ba:	5085      	str	r5, [r0, r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 80017bc:	3204      	adds	r2, #4
 80017be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80017c2:	d1f9      	bne.n	80017b8 <FLASH_Program_Fast+0x14>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	03d2      	lsls	r2, r2, #15
 80017c8:	d4fc      	bmi.n	80017c4 <FLASH_Program_Fast+0x20>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ca:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80017ce:	bd30      	pop	{r4, r5, pc}
 80017d0:	58004000 	.word	0x58004000

080017d4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_FLASH_Unlock+0x1c>)
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017da:	bfbf      	itttt	lt
 80017dc:	4a05      	ldrlt	r2, [pc, #20]	; (80017f4 <HAL_FLASH_Unlock+0x20>)
 80017de:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017e0:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80017e4:	609a      	strlt	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017e6:	bfba      	itte	lt
 80017e8:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	0fc0      	lsrlt	r0, r0, #31
 80017ec:	2000      	movge	r0, #0
}
 80017ee:	4770      	bx	lr
 80017f0:	58004000 	.word	0x58004000
 80017f4:	45670123 	.word	0x45670123

080017f8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_FLASH_Lock+0x14>)
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001800:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001802:	6958      	ldr	r0, [r3, #20]
}
 8001804:	43c0      	mvns	r0, r0
 8001806:	0fc0      	lsrs	r0, r0, #31
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	58004000 	.word	0x58004000

08001810 <FLASH_WaitForLastOperation>:
{
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001814:	f004 ff54 	bl	80066c0 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001818:	4e12      	ldr	r6, [pc, #72]	; (8001864 <FLASH_WaitForLastOperation+0x54>)
  uint32_t tickstart = HAL_GetTick();
 800181a:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800181c:	6933      	ldr	r3, [r6, #16]
 800181e:	03d9      	lsls	r1, r3, #15
 8001820:	d413      	bmi.n	800184a <FLASH_WaitForLastOperation+0x3a>
  error = FLASH->SR;
 8001822:	6933      	ldr	r3, [r6, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001824:	07da      	lsls	r2, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001826:	bf44      	itt	mi
 8001828:	2201      	movmi	r2, #1
 800182a:	6132      	strmi	r2, [r6, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800182c:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8001830:	4013      	ands	r3, r2
 8001832:	d111      	bne.n	8001858 <FLASH_WaitForLastOperation+0x48>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001834:	4e0b      	ldr	r6, [pc, #44]	; (8001864 <FLASH_WaitForLastOperation+0x54>)
 8001836:	6930      	ldr	r0, [r6, #16]
 8001838:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 800183c:	d00b      	beq.n	8001856 <FLASH_WaitForLastOperation+0x46>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800183e:	f004 ff3f 	bl	80066c0 <HAL_GetTick>
 8001842:	1b00      	subs	r0, r0, r4
 8001844:	42a8      	cmp	r0, r5
 8001846:	d3f6      	bcc.n	8001836 <FLASH_WaitForLastOperation+0x26>
 8001848:	e004      	b.n	8001854 <FLASH_WaitForLastOperation+0x44>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800184a:	f004 ff39 	bl	80066c0 <HAL_GetTick>
 800184e:	1b00      	subs	r0, r0, r4
 8001850:	42a8      	cmp	r0, r5
 8001852:	d3e3      	bcc.n	800181c <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8001854:	2003      	movs	r0, #3
}
 8001856:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_FLASH_CLEAR_FLAG(error);
 8001858:	4a02      	ldr	r2, [pc, #8]	; (8001864 <FLASH_WaitForLastOperation+0x54>)
 800185a:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 800185c:	4a02      	ldr	r2, [pc, #8]	; (8001868 <FLASH_WaitForLastOperation+0x58>)
    return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 8001860:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8001862:	e7f8      	b.n	8001856 <FLASH_WaitForLastOperation+0x46>
 8001864:	58004000 	.word	0x58004000
 8001868:	20000c30 	.word	0x20000c30

0800186c <HAL_FLASH_Program>:
{
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001870:	4c18      	ldr	r4, [pc, #96]	; (80018d4 <HAL_FLASH_Program+0x68>)
{
 8001872:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8001874:	7823      	ldrb	r3, [r4, #0]
 8001876:	2b01      	cmp	r3, #1
{
 8001878:	4606      	mov	r6, r0
 800187a:	460d      	mov	r5, r1
 800187c:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800187e:	d026      	beq.n	80018ce <HAL_FLASH_Program+0x62>
 8001880:	2301      	movs	r3, #1
 8001882:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800188c:	f7ff ffc0 	bl	8001810 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001890:	b9a0      	cbnz	r0, 80018bc <HAL_FLASH_Program+0x50>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001892:	2e01      	cmp	r6, #1
 8001894:	d116      	bne.n	80018c4 <HAL_FLASH_Program+0x58>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_FLASH_Program+0x6c>)
 8001898:	6953      	ldr	r3, [r2, #20]
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 80018a0:	602f      	str	r7, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80018a2:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80018a6:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ae:	f7ff ffaf 	bl	8001810 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_FLASH_Program+0x6c>)
 80018b4:	6953      	ldr	r3, [r2, #20]
 80018b6:	ea23 0606 	bic.w	r6, r3, r6
 80018ba:	6156      	str	r6, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80018bc:	2300      	movs	r3, #0
 80018be:	7023      	strb	r3, [r4, #0]
}
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80018c4:	4639      	mov	r1, r7
 80018c6:	4628      	mov	r0, r5
 80018c8:	f7ff ff6c 	bl	80017a4 <FLASH_Program_Fast>
 80018cc:	e7ed      	b.n	80018aa <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80018ce:	2002      	movs	r0, #2
 80018d0:	e7f6      	b.n	80018c0 <HAL_FLASH_Program+0x54>
 80018d2:	bf00      	nop
 80018d4:	20000c30 	.word	0x20000c30
 80018d8:	58004000 	.word	0x58004000

080018dc <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <FLASH_PageErase+0x18>)
 80018de:	6953      	ldr	r3, [r2, #20]
 80018e0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80018e4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80018e8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80018ec:	f040 0002 	orr.w	r0, r0, #2
 80018f0:	6150      	str	r0, [r2, #20]
#endif
}
 80018f2:	4770      	bx	lr
 80018f4:	58004000 	.word	0x58004000

080018f8 <HAL_FLASHEx_Erase>:
{
 80018f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80018fc:	4d23      	ldr	r5, [pc, #140]	; (800198c <HAL_FLASHEx_Erase+0x94>)
 80018fe:	782b      	ldrb	r3, [r5, #0]
 8001900:	2b01      	cmp	r3, #1
{
 8001902:	4606      	mov	r6, r0
 8001904:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001906:	d03f      	beq.n	8001988 <HAL_FLASHEx_Erase+0x90>
 8001908:	2301      	movs	r3, #1
 800190a:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800190c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001910:	2300      	movs	r3, #0
 8001912:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001914:	f7ff ff7c 	bl	8001810 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001918:	4604      	mov	r4, r0
 800191a:	b988      	cbnz	r0, 8001940 <HAL_FLASHEx_Erase+0x48>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800191c:	6833      	ldr	r3, [r6, #0]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d113      	bne.n	800194a <HAL_FLASHEx_Erase+0x52>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_FLASHEx_Erase+0x98>)
 8001924:	6953      	ldr	r3, [r2, #20]
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f7ff ff6c 	bl	8001810 <FLASH_WaitForLastOperation>
 8001938:	4604      	mov	r4, r0
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_FLASHEx_Erase+0x98>)
 800193c:	681a      	ldr	r2, [r3, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800193e:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 8001940:	2300      	movs	r3, #0
 8001942:	702b      	strb	r3, [r5, #0]
}
 8001944:	4620      	mov	r0, r4
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *PageError = 0xFFFFFFFFU;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	f8c8 3000 	str.w	r3, [r8]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001952:	6877      	ldr	r7, [r6, #4]
 8001954:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
 8001958:	4413      	add	r3, r2
 800195a:	42bb      	cmp	r3, r7
 800195c:	d90a      	bls.n	8001974 <HAL_FLASHEx_Erase+0x7c>
        FLASH_PageErase(index);
 800195e:	4638      	mov	r0, r7
 8001960:	f7ff ffbc 	bl	80018dc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001968:	f7ff ff52 	bl	8001810 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800196c:	b150      	cbz	r0, 8001984 <HAL_FLASHEx_Erase+0x8c>
          *PageError = index;
 800196e:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001972:	4604      	mov	r4, r0
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_FLASHEx_Erase+0x98>)
 8001976:	6953      	ldr	r3, [r2, #20]
 8001978:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800197c:	f023 0302 	bic.w	r3, r3, #2
 8001980:	6153      	str	r3, [r2, #20]
#endif
}
 8001982:	e7da      	b.n	800193a <HAL_FLASHEx_Erase+0x42>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001984:	3701      	adds	r7, #1
 8001986:	e7e5      	b.n	8001954 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001988:	2402      	movs	r4, #2
 800198a:	e7db      	b.n	8001944 <HAL_FLASHEx_Erase+0x4c>
 800198c:	20000c30 	.word	0x20000c30
 8001990:	58004000 	.word	0x58004000

08001994 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8001994:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef err = HAL_OK;
  uint32_t tickstart;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8001996:	4604      	mov	r4, r0
 8001998:	b310      	cbz	r0, 80019e0 <HAL_PKA_Init+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800199a:	7903      	ldrb	r3, [r0, #4]
 800199c:	b90b      	cbnz	r3, 80019a2 <HAL_PKA_Init+0xe>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800199e:	f7fe ff3f 	bl	8000820 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80019a2:	2302      	movs	r3, #2
 80019a4:	7123      	strb	r3, [r4, #4]

    /* Get current tick */
    tickstart = HAL_GetTick();
 80019a6:	f004 fe8b 	bl	80066c0 <HAL_GetTick>

    /* Reset the control register and enable the PKA (wait the end of PKA RAM erase) */
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
    {
      hpka->Instance->CR = PKA_CR_EN;
 80019aa:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 80019ac:	4605      	mov	r5, r0
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	07d2      	lsls	r2, r2, #31
 80019b4:	d508      	bpl.n	80019c8 <HAL_PKA_Init+0x34>
    }

    if (err == HAL_OK)
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80019bc:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80019be:	2000      	movs	r0, #0

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
 80019c0:	2301      	movs	r3, #1
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80019c2:	60a0      	str	r0, [r4, #8]
      hpka->State = HAL_PKA_STATE_READY;
 80019c4:	7123      	strb	r3, [r4, #4]
 80019c6:	e00c      	b.n	80019e2 <HAL_PKA_Init+0x4e>
      hpka->Instance->CR = PKA_CR_EN;
 80019c8:	601e      	str	r6, [r3, #0]
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
 80019ca:	f004 fe79 	bl	80066c0 <HAL_GetTick>
 80019ce:	1b40      	subs	r0, r0, r5
 80019d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019d4:	d9eb      	bls.n	80019ae <HAL_PKA_Init+0x1a>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 80019d6:	2304      	movs	r3, #4

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
 80019d8:	2003      	movs	r0, #3
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 80019da:	60a3      	str	r3, [r4, #8]
      hpka->State = HAL_PKA_STATE_ERROR;
 80019dc:	7120      	strb	r0, [r4, #4]
  else
  {
    err = HAL_ERROR;
  }

  return err;
 80019de:	e000      	b.n	80019e2 <HAL_PKA_Init+0x4e>
    err = HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
}
 80019e2:	bd70      	pop	{r4, r5, r6, pc}

080019e4 <HAL_PKA_DeInit>:
  * @brief  DeInitialize the PKA peripheral.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_DeInit(PKA_HandleTypeDef *hpka)
{
 80019e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef err = HAL_OK;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 80019e6:	4605      	mov	r5, r0
 80019e8:	b170      	cbz	r0, 8001a08 <HAL_PKA_DeInit+0x24>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	7103      	strb	r3, [r0, #4]

    /* Reset the control register */
    /* This abort any operation in progress (PKA RAM content is not guaranteed in this case) */
    hpka->Instance->CR = 0;
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	2400      	movs	r4, #0
 80019f2:	601c      	str	r4, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80019fa:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
    hpka->MspDeInitCallback(hpka);
#else
    /* DeInit the low level hardware: CLOCK, NVIC */
    HAL_PKA_MspDeInit(hpka);
 80019fc:	f7fe ff28 	bl	8000850 <HAL_PKA_MspDeInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */

    /* Reset the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001a00:	60ac      	str	r4, [r5, #8]
  HAL_StatusTypeDef err = HAL_OK;
 8001a02:	4620      	mov	r0, r4

    /* Reset the state */
    hpka->State = HAL_PKA_STATE_RESET;
 8001a04:	712c      	strb	r4, [r5, #4]
  {
    err = HAL_ERROR;
  }

  return err;
}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
    err = HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e7fc      	b.n	8001a06 <HAL_PKA_DeInit+0x22>

08001a0c <HAL_PKA_ECDSAVerif_IsValidSignature>:
  * @retval 1 if signature is verified, 0 in other case
  */
uint32_t HAL_PKA_ECDSAVerif_IsValidSignature(PKA_HandleTypeDef const *const hpka)
{
  /* Invert the state of the PKA RAM bit containing the result of the operation */
  return (hpka->Instance->RAM[PKA_ECDSA_VERIF_OUT_RESULT] == 0UL) ? 1UL : 0UL;
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
}
 8001a12:	fab0 f080 	clz	r0, r0
 8001a16:	0940      	lsrs	r0, r0, #5
 8001a18:	4770      	bx	lr

08001a1a <PKA_PollEndOfOperation>:
  * @param  Timeout Timeout duration in millisecond.
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_PollEndOfOperation(PKA_HandleTypeDef *hpka, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1a:	b570      	push	{r4, r5, r6, lr}
 8001a1c:	4605      	mov	r5, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4616      	mov	r6, r2
  /* Wait for the end of operation or timeout */
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 8001a22:	682a      	ldr	r2, [r5, #0]
 8001a24:	6853      	ldr	r3, [r2, #4]
 8001a26:	039b      	lsls	r3, r3, #14
 8001a28:	d501      	bpl.n	8001a2e <PKA_PollEndOfOperation+0x14>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a2a:	2000      	movs	r0, #0
}
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a2e:	1c61      	adds	r1, r4, #1
 8001a30:	d0f8      	beq.n	8001a24 <PKA_PollEndOfOperation+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0UL))
 8001a32:	f004 fe45 	bl	80066c0 <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	42a0      	cmp	r0, r4
 8001a3a:	d801      	bhi.n	8001a40 <PKA_PollEndOfOperation+0x26>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d1f0      	bne.n	8001a22 <PKA_PollEndOfOperation+0x8>
        return HAL_TIMEOUT;
 8001a40:	2003      	movs	r0, #3
 8001a42:	e7f3      	b.n	8001a2c <PKA_PollEndOfOperation+0x12>

08001a44 <PKA_CheckError>:
uint32_t PKA_CheckError(PKA_HandleTypeDef *hpka, uint32_t mode)
{
  uint32_t err = HAL_PKA_ERROR_NONE;

  /* Check RAMERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 8001a44:	6803      	ldr	r3, [r0, #0]
 8001a46:	6858      	ldr	r0, [r3, #4]
  {
    err |= HAL_PKA_ERROR_RAMERR;
  }

  /* Check ADDRERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 8001a48:	685a      	ldr	r2, [r3, #4]
    err |= HAL_PKA_ERROR_RAMERR;
 8001a4a:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8001a4e:	bf18      	it	ne
 8001a50:	2002      	movne	r0, #2
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 8001a52:	02d2      	lsls	r2, r2, #11
  {
    err |= HAL_PKA_ERROR_ADDRERR;
 8001a54:	bf48      	it	mi
 8001a56:	f040 0001 	orrmi.w	r0, r0, #1
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 8001a5a:	2924      	cmp	r1, #36	; 0x24
 8001a5c:	d104      	bne.n	8001a68 <PKA_CheckError+0x24>
  {
#define EDCSA_SIGN_NOERROR 0UL
    /* If error output result is different from no error, ecsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != EDCSA_SIGN_NOERROR)
 8001a5e:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	; 0xee8
 8001a62:	b10b      	cbz	r3, 8001a68 <PKA_CheckError+0x24>
    {
      err |= HAL_PKA_ERROR_OPERATION;
 8001a64:	f040 0008 	orr.w	r0, r0, #8
    }
  }

  return err;
}
 8001a68:	4770      	bx	lr

08001a6a <PKA_GetOptBitSize_u8>:
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a6a:	b129      	cbz	r1, 8001a78 <PKA_GetOptBitSize_u8+0xe>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a6c:	fab1 f181 	clz	r1, r1
  }
#else
  position = 32UL - __CLZ(msb);
#endif

  return (((byteNumber - 1UL) * 8UL) + position);
 8001a70:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
}
 8001a74:	3018      	adds	r0, #24
 8001a76:	4770      	bx	lr
    return 32U;
 8001a78:	2120      	movs	r1, #32
 8001a7a:	e7f9      	b.n	8001a70 <PKA_GetOptBitSize_u8+0x6>

08001a7c <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dst != NULL)
 8001a7e:	b190      	cbz	r0, 8001aa6 <PKA_Memcpy_u8_to_u32+0x2a>
  {
    if (src != NULL)
 8001a80:	b189      	cbz	r1, 8001aa6 <PKA_Memcpy_u8_to_u32+0x2a>
 8001a82:	f022 0603 	bic.w	r6, r2, #3
 8001a86:	188d      	adds	r5, r1, r2
 8001a88:	4607      	mov	r7, r0
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */

      for (; index < (n / 4UL); index++)
 8001a8a:	0894      	lsrs	r4, r2, #2
 8001a8c:	eb06 0c00 	add.w	ip, r6, r0
 8001a90:	4567      	cmp	r7, ip
 8001a92:	d109      	bne.n	8001aa8 <PKA_Memcpy_u8_to_u32+0x2c>
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 8001a94:	f002 0303 	and.w	r3, r2, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d117      	bne.n	8001acc <PKA_Memcpy_u8_to_u32+0x50>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	1b92      	subs	r2, r2, r6
 8001aa0:	5c8b      	ldrb	r3, [r1, r2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
      }
      else if ((n % 4UL) == 3UL)
      {
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001aa2:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001aa8:	f815 3c03 	ldrb.w	r3, [r5, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001aac:	f815 ec02 	ldrb.w	lr, [r5, #-2]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001ab6:	f815 ec01 	ldrb.w	lr, [r5, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001aba:	ea43 030e 	orr.w	r3, r3, lr
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 8001abe:	f815 ed04 	ldrb.w	lr, [r5, #-4]!
 8001ac2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001ac6:	f847 3b04 	str.w	r3, [r7], #4
      for (; index < (n / 4UL); index++)
 8001aca:	e7e1      	b.n	8001a90 <PKA_Memcpy_u8_to_u32+0x14>
      else if ((n % 4UL) == 2UL)
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d108      	bne.n	8001ae2 <PKA_Memcpy_u8_to_u32+0x66>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001ad0:	1b92      	subs	r2, r2, r6
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001ad2:	440a      	add	r2, r1
 8001ad4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001ad8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001adc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ae0:	e7df      	b.n	8001aa2 <PKA_Memcpy_u8_to_u32+0x26>
      else if ((n % 4UL) == 3UL)
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d1df      	bne.n	8001aa6 <PKA_Memcpy_u8_to_u32+0x2a>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001ae6:	1b92      	subs	r2, r2, r6
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001ae8:	440a      	add	r2, r1
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001aea:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001aee:	f812 1c02 	ldrb.w	r1, [r2, #-2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001af2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	e7d0      	b.n	8001aa2 <PKA_Memcpy_u8_to_u32+0x26>

08001b00 <PKA_Process>:
  * @param  mode PKA operation
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_Process(PKA_HandleTypeDef *hpka, uint32_t mode, uint32_t Timeout)
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef err = HAL_OK;
  uint32_t tickstart;

  if (hpka->State == HAL_PKA_STATE_READY)
 8001b02:	7903      	ldrb	r3, [r0, #4]
 8001b04:	2b01      	cmp	r3, #1
{
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	4617      	mov	r7, r2
  if (hpka->State == HAL_PKA_STATE_READY)
 8001b0c:	d138      	bne.n	8001b80 <PKA_Process+0x80>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	7103      	strb	r3, [r0, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	6083      	str	r3, [r0, #8]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b16:	f004 fdd3 	bl	80066c0 <HAL_GetTick>

    /* Set the mode and deactivate the interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE, mode << PKA_CR_MODE_Pos);
 8001b1a:	6826      	ldr	r6, [r4, #0]
 8001b1c:	6833      	ldr	r3, [r6, #0]
 8001b1e:	f423 13d1 	bic.w	r3, r3, #1712128	; 0x1a2000
 8001b22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001b2a:	6033      	str	r3, [r6, #0]

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;
 8001b2c:	6833      	ldr	r3, [r6, #0]
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
    tickstart = HAL_GetTick();
 8001b32:	4602      	mov	r2, r0
    hpka->Instance->CR |= PKA_CR_START;
 8001b34:	6033      	str	r3, [r6, #0]

    /* Wait for the end of operation or timeout */
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 8001b36:	4639      	mov	r1, r7
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff ff6e 	bl	8001a1a <PKA_PollEndOfOperation>
 8001b3e:	b160      	cbz	r0, 8001b5a <PKA_Process+0x5a>
    {
      /* Abort any ongoing operation */
      CLEAR_BIT(hpka->Instance->CR, PKA_CR_EN);
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

      hpka->ErrorCode |= HAL_PKA_ERROR_TIMEOUT;
 8001b4a:	68a2      	ldr	r2, [r4, #8]
 8001b4c:	f042 0204 	orr.w	r2, r2, #4
 8001b50:	60a2      	str	r2, [r4, #8]

      /* Make ready for the next operation */
      SET_BIT(hpka->Instance->CR, PKA_CR_EN);
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    }

    /* Check error */
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff ff71 	bl	8001a44 <PKA_CheckError>
 8001b62:	68a3      	ldr	r3, [r4, #8]

    /* Clear all flags */
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001b64:	6822      	ldr	r2, [r4, #0]
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8001b66:	4318      	orrs	r0, r3
 8001b68:	60a0      	str	r0, [r4, #8]
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
 8001b70:	6093      	str	r3, [r2, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8001b72:	2301      	movs	r3, #1
 8001b74:	7123      	strb	r3, [r4, #4]

    /* Manage the result based on encountered errors */
    if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8001b76:	68a0      	ldr	r0, [r4, #8]
    {
      err = HAL_ERROR;
 8001b78:	3800      	subs	r0, #0
 8001b7a:	bf18      	it	ne
 8001b7c:	2001      	movne	r0, #1
  else
  {
    err = HAL_ERROR;
  }
  return err;
}
 8001b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7fc      	b.n	8001b7e <PKA_Process+0x7e>

08001b84 <PKA_ECDSAVerif_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ECDSAVerif_Set(PKA_HandleTypeDef *hpka, PKA_ECDSAVerifInTypeDef *in)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
  /* Get the prime order n length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 8001b86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001b88:	6803      	ldr	r3, [r0, #0]
{
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4605      	mov	r5, r0
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 8001b8e:	7811      	ldrb	r1, [r2, #0]
 8001b90:	6820      	ldr	r0, [r4, #0]
 8001b92:	f7ff ff6a 	bl	8001a6a <PKA_GetOptBitSize_u8>

  /* Get the modulus p length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	6921      	ldr	r1, [r4, #16]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 8001b9a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001b9e:	7809      	ldrb	r1, [r1, #0]
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff ff62 	bl	8001a6a <PKA_GetOptBitSize_u8>

  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 8001ba6:	68a1      	ldr	r1, [r4, #8]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001ba8:	f8c3 04b4 	str.w	r0, [r3, #1204]	; 0x4b4
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 8001bac:	f8c3 145c 	str.w	r1, [r3, #1116]	; 0x45c

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF], in->coef, in->modulusSize);
 8001bb0:	f503 608c 	add.w	r0, r3, #1120	; 0x460
 8001bb4:	68e1      	ldr	r1, [r4, #12]
 8001bb6:	f7ff ff61 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 8001bba:	6862      	ldr	r2, [r4, #4]
 8001bbc:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_GF], in->modulus, in->modulusSize);
 8001bbe:	6921      	ldr	r1, [r4, #16]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 8001bc0:	1cd3      	adds	r3, r2, #3
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001bc8:	2600      	movs	r6, #0
 8001bca:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_GF], in->modulus, in->modulusSize);
 8001bce:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
 8001bd2:	f7ff ff53 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters base point G coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 8001bda:	6961      	ldr	r1, [r4, #20]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 8001bdc:	1cd3      	adds	r3, r2, #3
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001be4:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 8001be8:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
 8001bec:	f7ff ff46 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001bf0:	6862      	ldr	r2, [r4, #4]
 8001bf2:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters base point G coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 8001bf4:	69a1      	ldr	r1, [r4, #24]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001bf6:	1cd3      	adds	r3, r2, #3
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 8001bfe:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 8001c02:	f200 603c 	addw	r0, r0, #1596	; 0x63c
 8001c06:	f7ff ff39 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c0a:	6862      	ldr	r2, [r4, #4]
 8001c0c:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX, in->modulusSize);
 8001c0e:	69e1      	ldr	r1, [r4, #28]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c10:	1cd3      	adds	r3, r2, #3
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	f203 138f 	addw	r3, r3, #399	; 0x18f
 8001c18:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX, in->modulusSize);
 8001c1c:	f500 6074 	add.w	r0, r0, #3904	; 0xf40
 8001c20:	f7ff ff2c 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c24:	6862      	ldr	r2, [r4, #4]
 8001c26:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY, in->modulusSize);
 8001c28:	6a21      	ldr	r1, [r4, #32]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c2a:	1cd3      	adds	r3, r2, #3
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8001c32:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY, in->modulusSize);
 8001c36:	f600 7094 	addw	r0, r0, #3988	; 0xf94
 8001c3a:	f7ff ff1f 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c3e:	6863      	ldr	r3, [r4, #4]
 8001c40:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters signature part r to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 8001c42:	6822      	ldr	r2, [r4, #0]
 8001c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c46:	3303      	adds	r3, #3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	f203 33e5 	addw	r3, r3, #997	; 0x3e5
 8001c4e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 8001c52:	f500 5084 	add.w	r0, r0, #4224	; 0x1080
 8001c56:	3018      	adds	r0, #24
 8001c58:	f7ff ff10 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters signature part s to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 8001c60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 8001c62:	1cd3      	adds	r3, r2, #3
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	f203 4326 	addw	r3, r3, #1062	; 0x426
 8001c6a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 8001c6e:	f600 2044 	addw	r0, r0, #2628	; 0xa44
 8001c72:	f7ff ff03 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters hash of message z to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 8001c7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 8001c7c:	1cd3      	adds	r3, r2, #3
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	f203 2391 	addw	r3, r3, #657	; 0x291
 8001c84:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 8001c88:	f600 70e8 	addw	r0, r0, #4072	; 0xfe8
 8001c8c:	f7ff fef6 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 8001c90:	6822      	ldr	r2, [r4, #0]
 8001c92:	6828      	ldr	r0, [r5, #0]

  /* Move the input parameters curve prime order n to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 8001c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 8001c96:	1cd3      	adds	r3, r2, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 8001c9e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 8001ca2:	f600 505c 	addw	r0, r0, #3420	; 0xd5c
 8001ca6:	f7ff fee9 	bl	8001a7c <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_ORDER_N + ((in->primeOrderSize + 3UL) / 4UL));
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	682a      	ldr	r2, [r5, #0]
 8001cae:	3303      	adds	r3, #3
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	f203 3357 	addw	r3, r3, #855	; 0x357
 8001cb6:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 8001cba:	bd70      	pop	{r4, r5, r6, pc}

08001cbc <HAL_PKA_ECDSAVerif>:
{
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4615      	mov	r5, r2
  PKA_ECDSAVerif_Set(hpka, in);
 8001cc2:	f7ff ff5f 	bl	8001b84 <PKA_ECDSAVerif_Set>
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	4620      	mov	r0, r4
 8001cca:	2126      	movs	r1, #38	; 0x26
}
 8001ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 8001cd0:	f7ff bf16 	b.w	8001b00 <PKA_Process>

08001cd4 <load_block>:
  * @retval  None
  */
static void load_block(const uint8_t *input_start,
                       uint32_t num_els,
                       uint32_t *load_buffer)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t j;
  uint32_t full_words = num_els / 4u;
 8001cd6:	088c      	lsrs	r4, r1, #2

  uint32_t remaining_bytes = num_els % 4u;
 8001cd8:	f001 0603 	and.w	r6, r1, #3
  uint32_t temp_word;

  /* Convert any 4 bytes in one 32 bits word */
  for (i = 0; i < full_words; i++)
 8001cdc:	4605      	mov	r5, r0
 8001cde:	2700      	movs	r7, #0
 8001ce0:	42a7      	cmp	r7, r4
 8001ce2:	f105 0504 	add.w	r5, r5, #4
 8001ce6:	d115      	bne.n	8001d14 <load_block+0x40>
  {
    load_buffer[i] = BYTES_TO_WORD(input_start, 4u * i);
  }

  /* If the block is not multiple of 16 bytes, pad the buffer */
  if ((num_els == 0u) || (full_words < 4u))
 8001ce8:	290f      	cmp	r1, #15
 8001cea:	d812      	bhi.n	8001d12 <load_block+0x3e>
  {
    /* last block: 0x [remaining data] 80 00 00 .. 00 */
    temp_word = 0x80u;

    /* Insert the 0x80 byte in the correct position */
    load_buffer[full_words] = temp_word << (24u - (8u * remaining_bytes));
 8001cec:	f1c6 0303 	rsb	r3, r6, #3
 8001cf0:	f021 0103 	bic.w	r1, r1, #3
 8001cf4:	00dd      	lsls	r5, r3, #3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	40ab      	lsls	r3, r5
 8001cfa:	5053      	str	r3, [r2, r1]
 8001cfc:	1857      	adds	r7, r2, r1

    /* Include the remaining bytes of data */
    for (j = 0u; j < remaining_bytes; j++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	4401      	add	r1, r0
    {
      load_buffer[full_words]
      |= (uint32_t)(input_start[(4u * full_words) + j]) << (24u - (8u * j));
 8001d02:	f06f 0c07 	mvn.w	ip, #7
    for (j = 0u; j < remaining_bytes; j++)
 8001d06:	42b3      	cmp	r3, r6
 8001d08:	d117      	bne.n	8001d3a <load_block+0x66>
    }

    /* Fill the rest of the block with zeros */
    for (i = full_words + 1u; i < 4u; i++)
 8001d0a:	1c63      	adds	r3, r4, #1
    {
      load_buffer[i] = 0u;
 8001d0c:	2100      	movs	r1, #0
    for (i = full_words + 1u; i < 4u; i++)
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d91f      	bls.n	8001d52 <load_block+0x7e>
    }
  }
}
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    load_buffer[i] = BYTES_TO_WORD(input_start, 4u * i);
 8001d14:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 8001d18:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8001d22:	f815 cc01 	ldrb.w	ip, [r5, #-1]
 8001d26:	ea43 030c 	orr.w	r3, r3, ip
 8001d2a:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8001d2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001d32:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (i = 0; i < full_words; i++)
 8001d36:	3701      	adds	r7, #1
 8001d38:	e7d2      	b.n	8001ce0 <load_block+0xc>
      |= (uint32_t)(input_start[(4u * full_words) + j]) << (24u - (8u * j));
 8001d3a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001d3e:	fb0c f503 	mul.w	r5, ip, r3
 8001d42:	3518      	adds	r5, #24
 8001d44:	fa00 f505 	lsl.w	r5, r0, r5
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	4328      	orrs	r0, r5
 8001d4c:	6038      	str	r0, [r7, #0]
    for (j = 0u; j < remaining_bytes; j++)
 8001d4e:	3301      	adds	r3, #1
 8001d50:	e7d9      	b.n	8001d06 <load_block+0x32>
      load_buffer[i] = 0u;
 8001d52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = full_words + 1u; i < 4u; i++)
 8001d56:	3301      	adds	r3, #1
 8001d58:	e7d9      	b.n	8001d0e <load_block+0x3a>

08001d5a <derive_subkey2>:
  * @param   output_buffer Buffer that will contain the computed K2 subkey
  *
  * @retval  None
  */
static void derive_subkey2(const uint32_t *sub_key1, uint32_t *output_buffer)
{
 8001d5a:	b510      	push	{r4, lr}
  uint32_t carry = ((sub_key1[0] >> 31) & 1u) * 0x00000087u;

  output_buffer[0] = ((sub_key1[0] << 1) | (sub_key1[1] >> 31));
 8001d5c:	e9d0 3400 	ldrd	r3, r4, [r0]
 8001d60:	005a      	lsls	r2, r3, #1
 8001d62:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8001d66:	600a      	str	r2, [r1, #0]
  output_buffer[1] = ((sub_key1[1] << 1) | (sub_key1[2] >> 31));
 8001d68:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 8001d6c:	0fd2      	lsrs	r2, r2, #31
 8001d6e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8001d72:	604a      	str	r2, [r1, #4]
  output_buffer[2] = ((sub_key1[2] << 1) | (sub_key1[3] >> 31));
 8001d74:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
 8001d78:	0fd2      	lsrs	r2, r2, #31
 8001d7a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8001d7e:	608a      	str	r2, [r1, #8]
  output_buffer[3] = (sub_key1[3] << 1) ^ carry;
 8001d80:	68c0      	ldr	r0, [r0, #12]
  uint32_t carry = ((sub_key1[0] >> 31) & 1u) * 0x00000087u;
 8001d82:	0fda      	lsrs	r2, r3, #31
 8001d84:	2387      	movs	r3, #135	; 0x87
 8001d86:	4353      	muls	r3, r2
  output_buffer[3] = (sub_key1[3] << 1) ^ carry;
 8001d88:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
 8001d8c:	60cb      	str	r3, [r1, #12]

}
 8001d8e:	bd10      	pop	{r4, pc}

08001d90 <xor_key>:
  * @param   key Buffer containing the key
  *
  * @retval  None
  */
static void xor_key(uint32_t *block, const uint32_t *key)
{
 8001d90:	b510      	push	{r4, lr}
 8001d92:	1f03      	subs	r3, r0, #4
 8001d94:	3904      	subs	r1, #4
 8001d96:	300c      	adds	r0, #12
  uint32_t i;

  for (i = 0u; i < 4u; i++)
  {
    block[i] ^= key[i];
 8001d98:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001d9c:	f851 4f04 	ldr.w	r4, [r1, #4]!
  for (i = 0u; i < 4u; i++)
 8001da0:	4283      	cmp	r3, r0
    block[i] ^= key[i];
 8001da2:	ea82 0204 	eor.w	r2, r2, r4
 8001da6:	601a      	str	r2, [r3, #0]
  for (i = 0u; i < 4u; i++)
 8001da8:	d1f6      	bne.n	8001d98 <xor_key+0x8>
  }
}
 8001daa:	bd10      	pop	{r4, pc}

08001dac <cleanup_handle>:
static void cleanup_handle(CRYP_HandleTypeDef *CrypHandle);

/* Private function definitions -----------------------------------------------*/
static void cleanup_handle(CRYP_HandleTypeDef *CrypHandle)
{
  (void)memset(CrypHandle, 0, sizeof(CRYP_HandleTypeDef));
 8001dac:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001db0:	2100      	movs	r1, #0
 8001db2:	f004 be8b 	b.w	8006acc <memset>

08001db6 <wrap_allocate_memory>:
  * @param[in]  size Size of area to reserved
  * @param[in]  P_pMemBuf Buffer in which area must be reserved
  * @retval     Area pointer if success, NULL otherwise
  */
uint32_t wrap_allocate_memory(uint32_t size, CA_membuf_stt *P_pMemBuf)
{
 8001db6:	b510      	push	{r4, lr}
 8001db8:	4604      	mov	r4, r0
  uint32_t ptr;
  /* Check memory buffer exists and available size is enough */
  if ((P_pMemBuf == NULL) || ((P_pMemBuf->mSize - P_pMemBuf->mUsed) < (uint16_t)size))
 8001dba:	b151      	cbz	r1, 8001dd2 <wrap_allocate_memory+0x1c>
 8001dbc:	88ca      	ldrh	r2, [r1, #6]
 8001dbe:	888b      	ldrh	r3, [r1, #4]
 8001dc0:	b280      	uxth	r0, r0
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	4283      	cmp	r3, r0
 8001dc6:	db04      	blt.n	8001dd2 <wrap_allocate_memory+0x1c>
  {
    return (uint32_t)NULL;
  }
  /* Return current buffer pointer */
  ptr = (((uint32_t)(P_pMemBuf->pmBuf)) + P_pMemBuf->mUsed);
 8001dc8:	680b      	ldr	r3, [r1, #0]
 8001dca:	1898      	adds	r0, r3, r2
  /* Remove the allocated bytes from the available ones */
  P_pMemBuf->mUsed += (uint16_t)size;
 8001dcc:	4422      	add	r2, r4
 8001dce:	80ca      	strh	r2, [r1, #6]
  return ptr;
}
 8001dd0:	bd10      	pop	{r4, pc}
    return (uint32_t)NULL;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e7fc      	b.n	8001dd0 <wrap_allocate_memory+0x1a>

08001dd6 <wrap_uint8_to_BigNum>:
  * @param[in]  Psize: Size of the Array in bytes
  * @retval     WRAP_SUCCESS: On success
  * @reval      WRAP_FAILURE: An error occur
  */
uint8_t wrap_uint8_to_BigNum(CA_BigNum_stt *P_pBigNum, const uint8_t *P_pArray, int32_t Psize)
{
 8001dd6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dda:	4688      	mov	r8, r1
 8001ddc:	4616      	mov	r6, r2
  uint32_t size_tp;
  uint32_t size_counter = 0;
  uint32_t psize = (uint32_t)Psize;

  /* Check parameters */
  if ((P_pBigNum == NULL)
 8001dde:	4604      	mov	r4, r0
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d042      	beq.n	8001e6a <wrap_uint8_to_BigNum+0x94>
      || (P_pArray == NULL))
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d040      	beq.n	8001e6a <wrap_uint8_to_BigNum+0x94>
  {
    return WRAP_FAILURE;
  }
  if (Psize <= 0)
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	dd3e      	ble.n	8001e6a <wrap_uint8_to_BigNum+0x94>
  {
    return WRAP_FAILURE;
  }

  if (P_pBigNum->pmDigit == NULL)
 8001dec:	6800      	ldr	r0, [r0, #0]
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d03b      	beq.n	8001e6a <wrap_uint8_to_BigNum+0x94>
  }
  else
  {
    /* Compute size of u32 buffer to host u8 buffer.
     * Taking into account if bytes buffer length is or not a multiple of 4 */
    if ((psize % 4UL) > 0UL)
 8001df2:	0895      	lsrs	r5, r2, #2
 8001df4:	0793      	lsls	r3, r2, #30
    {
      size_tp = (psize / 4UL) + 1UL;
 8001df6:	bf18      	it	ne
 8001df8:	3501      	addne	r5, #1
    else
    {
      size_tp = psize / 4UL;
    }
    /*Set to zero*/
    (void)memset(P_pBigNum->pmDigit, 0, size_tp * 4U);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	00aa      	lsls	r2, r5, #2
 8001dfe:	f004 fe65 	bl	8006acc <memset>
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
        }
        else
        {
          /* When there is not enough u8 to fill all the u32, pad with previous u8 */
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e02:	f105 4c80 	add.w	ip, r5, #1073741824	; 0x40000000
    for (i = 0U; i < size_tp; i++)
 8001e06:	2100      	movs	r1, #0
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e08:	f10c 3cff 	add.w	ip, ip, #4294967295
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e0c:	f06f 0e07 	mvn.w	lr, #7
 8001e10:	b2ca      	uxtb	r2, r1
    for (i = 0U; i < size_tp; i++)
 8001e12:	4295      	cmp	r5, r2
 8001e14:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8001e18:	d804      	bhi.n	8001e24 <wrap_uint8_to_BigNum+0x4e>
        }
      }
    }
    /*Fill the rest of the structure*/
    P_pBigNum->mNumDigits = (uint16_t) size_tp;
    P_pBigNum->mSignFlag = CA_SIGN_POSITIVE;
 8001e1a:	2000      	movs	r0, #0
    P_pBigNum->mNumDigits = (uint16_t) size_tp;
 8001e1c:	80a5      	strh	r5, [r4, #4]
    P_pBigNum->mSignFlag = CA_SIGN_POSITIVE;
 8001e1e:	71e0      	strb	r0, [r4, #7]
  }
  return WRAP_SUCCESS;
}
 8001e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e24:	6823      	ldr	r3, [r4, #0]
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e26:	ebac 0002 	sub.w	r0, ip, r2
 8001e2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        if (size_counter <= psize)
 8001e2e:	f109 0901 	add.w	r9, r9, #1
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e32:	2300      	movs	r3, #0
 8001e34:	eb08 0282 	add.w	r2, r8, r2, lsl #2
        if (size_counter <= psize)
 8001e38:	eb09 0703 	add.w	r7, r9, r3
 8001e3c:	42b7      	cmp	r7, r6
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e3e:	bf98      	it	ls
 8001e40:	5cd7      	ldrbls	r7, [r2, r3]
 8001e42:	f8d0 a000 	ldr.w	sl, [r0]
 8001e46:	bf9e      	ittt	ls
 8001e48:	fb0e fb03 	mulls.w	fp, lr, r3
 8001e4c:	f10b 0b18 	addls.w	fp, fp, #24
 8001e50:	fa07 f70b 	lslls.w	r7, r7, fp
 8001e54:	f103 0301 	add.w	r3, r3, #1
 8001e58:	bf94      	ite	ls
 8001e5a:	4457      	addls	r7, sl
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e5c:	ea4f 271a 	movhi.w	r7, sl, lsr #8
      for (j = 0U; j < 4U; j++)
 8001e60:	2b04      	cmp	r3, #4
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e62:	6007      	str	r7, [r0, #0]
      for (j = 0U; j < 4U; j++)
 8001e64:	d1e8      	bne.n	8001e38 <wrap_uint8_to_BigNum+0x62>
    for (i = 0U; i < size_tp; i++)
 8001e66:	3101      	adds	r1, #1
 8001e68:	e7d2      	b.n	8001e10 <wrap_uint8_to_BigNum+0x3a>
    return WRAP_FAILURE;
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	e7d8      	b.n	8001e20 <wrap_uint8_to_BigNum+0x4a>

08001e6e <wrap_BigNum_to_uint8>:
  * @reval      WRAP_FAILURE: An error occurs
  */
uint8_t wrap_BigNum_to_uint8(uint8_t *P_pArray,
                             const CA_BigNum_stt *P_pBigNum,
                             int32_t *P_psize)
{
 8001e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e70:	4605      	mov	r5, r0
 8001e72:	4610      	mov	r0, r2
  uint16_t i;
  uint16_t j;
  /* Check parameters */
  if ((P_pBigNum == NULL)
 8001e74:	b301      	cbz	r1, 8001eb8 <wrap_BigNum_to_uint8+0x4a>
      || (P_pArray == NULL))
 8001e76:	b1fd      	cbz	r5, 8001eb8 <wrap_BigNum_to_uint8+0x4a>
 8001e78:	2400      	movs	r4, #0
    return WRAP_FAILURE;
  }

  /* Fill the array */
  /* Loop on u32 buffer */
  for (i = 0U; i < P_pBigNum->mNumDigits; i++)
 8001e7a:	888b      	ldrh	r3, [r1, #4]
 8001e7c:	b2a2      	uxth	r2, r4
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d804      	bhi.n	8001e8c <wrap_BigNum_to_uint8+0x1e>
    for (j = 4U; j > 0U; j--)
    {
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
    }
  }
  if (P_psize != NULL)
 8001e82:	b110      	cbz	r0, 8001e8a <wrap_BigNum_to_uint8+0x1c>
  {
    *P_psize = ((int32_t)(P_pBigNum->mNumDigits) * 4); /*uint32 -> uint8*/
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	6003      	str	r3, [r0, #0]
 8001e88:	2000      	movs	r0, #0
  }

  return WRAP_SUCCESS;
}
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	fa1f fc84 	uxth.w	ip, r4
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
 8001e90:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8001e94:	2304      	movs	r3, #4
 8001e96:	00de      	lsls	r6, r3, #3
 8001e98:	888a      	ldrh	r2, [r1, #4]
 8001e9a:	f1a6 0708 	sub.w	r7, r6, #8
 8001e9e:	680e      	ldr	r6, [r1, #0]
 8001ea0:	eba2 020c 	sub.w	r2, r2, ip
 8001ea4:	f856 600e 	ldr.w	r6, [r6, lr]
 8001ea8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
 8001eac:	40fe      	lsrs	r6, r7
    for (j = 4U; j > 0U; j--)
 8001eae:	3b01      	subs	r3, #1
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
 8001eb0:	54ae      	strb	r6, [r5, r2]
    for (j = 4U; j > 0U; j--)
 8001eb2:	d1f0      	bne.n	8001e96 <wrap_BigNum_to_uint8+0x28>
  for (i = 0U; i < P_pBigNum->mNumDigits; i++)
 8001eb4:	3401      	adds	r4, #1
 8001eb6:	e7e0      	b.n	8001e7a <wrap_BigNum_to_uint8+0xc>
    return WRAP_FAILURE;
 8001eb8:	2001      	movs	r0, #1
 8001eba:	e7e6      	b.n	8001e8a <wrap_BigNum_to_uint8+0x1c>

08001ebc <CMAC_compute>:
                         uint32_t inputDataLength,
                         const uint8_t *key,
                         uint32_t keySize,
                         uint32_t macSize,
                         uint8_t *macBuff)
{
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  mac_error_t retval;

  /* Internal variables, buffers */
  uint32_t temp_iv[4] = {0,};
 8001ec4:	f10d 0a14 	add.w	sl, sp, #20
{
 8001ec8:	4691      	mov	r9, r2
 8001eca:	4607      	mov	r7, r0
  uint32_t temp_iv[4] = {0,};
 8001ecc:	2210      	movs	r2, #16
{
 8001ece:	460c      	mov	r4, r1
  uint32_t temp_iv[4] = {0,};
 8001ed0:	4650      	mov	r0, sl
 8001ed2:	2100      	movs	r1, #0
{
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	9da6      	ldr	r5, [sp, #664]	; 0x298
  uint32_t temp_key[8] = {0,};
  uint32_t temp_buffer[4u * MAX_PROCESSED_BLOCKS];

  uint32_t k1[4] = {0,};
 8001ed8:	ae09      	add	r6, sp, #36	; 0x24
  uint32_t temp_iv[4] = {0,};
 8001eda:	f004 fdf7 	bl	8006acc <memset>
  uint32_t temp_key[8] = {0,};
 8001ede:	2220      	movs	r2, #32
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	a811      	add	r0, sp, #68	; 0x44
 8001ee4:	f004 fdf2 	bl	8006acc <memset>
  uint32_t k1[4] = {0,};
 8001ee8:	2210      	movs	r2, #16
 8001eea:	2100      	movs	r1, #0
 8001eec:	4630      	mov	r0, r6
 8001eee:	f004 fded 	bl	8006acc <memset>
  uint32_t k2[4] = {0,};
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	a80d      	add	r0, sp, #52	; 0x34
 8001ef8:	f004 fde8 	bl	8006acc <memset>

  CRYP_HandleTypeDef hcryp;
  HAL_StatusTypeDef periph_retval;

  /* Check that pointers to buffers are not null */
  if ((key == NULL) || (macBuff == NULL))
 8001efc:	f1b9 0f00 	cmp.w	r9, #0
 8001f00:	f000 80cf 	beq.w	80020a2 <CMAC_compute+0x1e6>
 8001f04:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80cb 	beq.w	80020a2 <CMAC_compute+0x1e6>
  {
    return MAC_ERROR_BAD_PARAMETER;
  }

  /* Plaintext buffer can be null only when there is no data to authenticate */
  if ((inputData == NULL) && (inputDataLength > 0u))
 8001f0c:	b917      	cbnz	r7, 8001f14 <CMAC_compute+0x58>
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	f040 80c7 	bne.w	80020a2 <CMAC_compute+0x1e6>
  if (macSize > AES_BLOCK_SIZE)
  {
    return MAC_ERROR_WRONG_MAC_SIZE;
  }
  /* check that the requested mac size is greater than 0 */
  if (macSize == 0u)
 8001f14:	1e6b      	subs	r3, r5, #1
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f200 80c5 	bhi.w	80020a6 <CMAC_compute+0x1ea>
  {
    return MAC_ERROR_WRONG_MAC_SIZE;
  }

  /* Initialize the AES peripheral */
  (void)memset((uint8_t *)&hcryp, 0, sizeof(CRYP_HandleTypeDef));
 8001f1c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001f20:	2100      	movs	r1, #0
 8001f22:	a859      	add	r0, sp, #356	; 0x164
 8001f24:	f004 fdd2 	bl	8006acc <memset>

  /* check that the provided key size is acceptable */
  switch (keySize)
 8001f28:	f1b8 0f10 	cmp.w	r8, #16
 8001f2c:	d007      	beq.n	8001f3e <CMAC_compute+0x82>
 8001f2e:	f1b8 0f20 	cmp.w	r8, #32
 8001f32:	d013      	beq.n	8001f5c <CMAC_compute+0xa0>
 8001f34:	2003      	movs	r0, #3
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
    }
  }

  return retval;
}
 8001f36:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8001f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8001f3e:	2300      	movs	r3, #0
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8001f40:	495a      	ldr	r1, [pc, #360]	; (80020ac <CMAC_compute+0x1f0>)
      hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8001f42:	935b      	str	r3, [sp, #364]	; 0x16c
  hcryp.Init.Algorithm = CRYP_AES_CBC;
 8001f44:	2220      	movs	r2, #32
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8001f46:	2300      	movs	r3, #0
  periph_retval = HAL_CRYP_Init(&hcryp);
 8001f48:	a859      	add	r0, sp, #356	; 0x164
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8001f4a:	e9cd 1359 	strd	r1, r3, [sp, #356]	; 0x164
  hcryp.Init.Algorithm = CRYP_AES_CBC;
 8001f4e:	925e      	str	r2, [sp, #376]	; 0x178
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8001f50:	9362      	str	r3, [sp, #392]	; 0x188
  periph_retval = HAL_CRYP_Init(&hcryp);
 8001f52:	f7fe ffd1 	bl	8000ef8 <HAL_CRYP_Init>
  if (periph_retval != HAL_OK)
 8001f56:	b120      	cbz	r0, 8001f62 <CMAC_compute+0xa6>
    return MAC_ERROR_HW_FAILURE;
 8001f58:	2004      	movs	r0, #4
 8001f5a:	e7ec      	b.n	8001f36 <CMAC_compute+0x7a>
      hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8001f5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f60:	e7ee      	b.n	8001f40 <CMAC_compute+0x84>
  load_block(key, keySize, temp_key);
 8001f62:	aa11      	add	r2, sp, #68	; 0x44
 8001f64:	4641      	mov	r1, r8
 8001f66:	4648      	mov	r0, r9
 8001f68:	f7ff feb4 	bl	8001cd4 <load_block>
  hcryp->Init.pKey = key;
 8001f6c:	ab11      	add	r3, sp, #68	; 0x44
  hcryp->Init.pInitVect = iv;
 8001f6e:	e9cd 365c 	strd	r3, r6, [sp, #368]	; 0x170
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 8001f72:	23ff      	movs	r3, #255	; 0xff
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4633      	mov	r3, r6
 8001f7a:	4631      	mov	r1, r6
 8001f7c:	a859      	add	r0, sp, #356	; 0x164
 8001f7e:	f7ff fa33 	bl	80013e8 <HAL_CRYP_Encrypt>
  if (periph_retval != HAL_OK)
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d1e8      	bne.n	8001f58 <CMAC_compute+0x9c>
    derive_subkey2(output_buffer, output_buffer);
 8001f86:	4631      	mov	r1, r6
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f7ff fee6 	bl	8001d5a <derive_subkey2>
  derive_subkey2(k1, k2);
 8001f8e:	4630      	mov	r0, r6
 8001f90:	a90d      	add	r1, sp, #52	; 0x34
 8001f92:	f7ff fee2 	bl	8001d5a <derive_subkey2>
  num_blocks = inputDataLength / AES_BLOCK_SIZE;
 8001f96:	0923      	lsrs	r3, r4, #4
  if (remaining_bytes > 0u)
 8001f98:	0722      	lsls	r2, r4, #28
    num_blocks++;
 8001f9a:	bf18      	it	ne
 8001f9c:	3301      	addne	r3, #1
  num_blocks *= AES_BLOCK_SIZE;
 8001f9e:	ea4f 1b03 	mov.w	fp, r3, lsl #4
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001fa2:	193b      	adds	r3, r7, r4
  num_blocks *= AES_BLOCK_SIZE;
 8001fa4:	4626      	mov	r6, r4
  uint32_t processed_block = 0u;
 8001fa6:	f04f 0800 	mov.w	r8, #0
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001faa:	9303      	str	r3, [sp, #12]
    if ((inputDataLength - i) < AES_BLOCK_SIZE)
 8001fac:	2e0f      	cmp	r6, #15
 8001fae:	bf8c      	ite	hi
 8001fb0:	2300      	movhi	r3, #0
 8001fb2:	2301      	movls	r3, #1
 8001fb4:	9302      	str	r3, [sp, #8]
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001fb6:	ab19      	add	r3, sp, #100	; 0x64
 8001fb8:	eb03 1708 	add.w	r7, r3, r8, lsl #4
 8001fbc:	9b03      	ldr	r3, [sp, #12]
    if ((inputDataLength - i) < AES_BLOCK_SIZE)
 8001fbe:	bf94      	ite	ls
 8001fc0:	46b1      	movls	r9, r6
 8001fc2:	f04f 0910 	movhi.w	r9, #16
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	463a      	mov	r2, r7
 8001fca:	1b98      	subs	r0, r3, r6
 8001fcc:	f7ff fe82 	bl	8001cd4 <load_block>
    if (block_size < AES_BLOCK_SIZE)
 8001fd0:	f1b9 0f10 	cmp.w	r9, #16
 8001fd4:	f108 0901 	add.w	r9, r8, #1
 8001fd8:	d00a      	beq.n	8001ff0 <CMAC_compute+0x134>
      xor_key(&temp_buffer[processed_block * 4u], k2);
 8001fda:	a90d      	add	r1, sp, #52	; 0x34
 8001fdc:	4638      	mov	r0, r7
 8001fde:	f7ff fed7 	bl	8001d90 <xor_key>
    if (processed_block == (MAX_PROCESSED_BLOCKS - 1u))
 8001fe2:	f1b8 0f0f 	cmp.w	r8, #15
 8001fe6:	d009      	beq.n	8001ffc <CMAC_compute+0x140>
    if (encrypt == 0u)
 8001fe8:	9b02      	ldr	r3, [sp, #8]
 8001fea:	b93b      	cbnz	r3, 8001ffc <CMAC_compute+0x140>
 8001fec:	46c8      	mov	r8, r9
 8001fee:	e01e      	b.n	800202e <CMAC_compute+0x172>
    else if ((inputDataLength - i) == AES_BLOCK_SIZE)
 8001ff0:	2e10      	cmp	r6, #16
 8001ff2:	d1f6      	bne.n	8001fe2 <CMAC_compute+0x126>
      xor_key(&temp_buffer[processed_block * 4u], k1);
 8001ff4:	a909      	add	r1, sp, #36	; 0x24
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	f7ff feca 	bl	8001d90 <xor_key>
  hcryp->Init.pKey = key;
 8001ffc:	ab11      	add	r3, sp, #68	; 0x44
  hcryp->Init.pInitVect = iv;
 8001ffe:	e9cd 3a5c 	strd	r3, sl, [sp, #368]	; 0x170
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 8002002:	23ff      	movs	r3, #255	; 0xff
      retval = AES_Encrypt(&hcryp, temp_buffer, 4u * (processed_block + 1u),
 8002004:	ea4f 0289 	mov.w	r2, r9, lsl #2
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	ab19      	add	r3, sp, #100	; 0x64
 800200c:	b292      	uxth	r2, r2
 800200e:	4619      	mov	r1, r3
 8002010:	a859      	add	r0, sp, #356	; 0x164
 8002012:	f7ff f9e9 	bl	80013e8 <HAL_CRYP_Encrypt>
  if (periph_retval != HAL_OK)
 8002016:	2800      	cmp	r0, #0
 8002018:	d19e      	bne.n	8001f58 <CMAC_compute+0x9c>
 800201a:	4653      	mov	r3, sl
      for (j = 0; j < 4u; j++)
 800201c:	3001      	adds	r0, #1
        temp_iv[j] = temp_buffer[(processed_block * 4u) + j];
 800201e:	f857 2b04 	ldr.w	r2, [r7], #4
 8002022:	f843 2b04 	str.w	r2, [r3], #4
      for (j = 0; j < 4u; j++)
 8002026:	2804      	cmp	r0, #4
 8002028:	d1f8      	bne.n	800201c <CMAC_compute+0x160>
      processed_block = 0u;
 800202a:	f04f 0800 	mov.w	r8, #0
  } while (i < num_blocks);
 800202e:	3e10      	subs	r6, #16
 8002030:	1ba2      	subs	r2, r4, r6
 8002032:	4593      	cmp	fp, r2
 8002034:	d8ba      	bhi.n	8001fac <CMAC_compute+0xf0>
  periph_retval = HAL_CRYP_DeInit(&hcryp);
 8002036:	a859      	add	r0, sp, #356	; 0x164
 8002038:	f7fe ff81 	bl	8000f3e <HAL_CRYP_DeInit>
  if (periph_retval != HAL_OK)
 800203c:	2800      	cmp	r0, #0
 800203e:	d18b      	bne.n	8001f58 <CMAC_compute+0x9c>
 8002040:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  for (i = 0u; i < (macSize / 4u); i++)
 8002042:	08ac      	lsrs	r4, r5, #2
 8002044:	4601      	mov	r1, r0
 8002046:	428c      	cmp	r4, r1
 8002048:	f103 0304 	add.w	r3, r3, #4
 800204c:	d10a      	bne.n	8002064 <CMAC_compute+0x1a8>
  if (macSize < 16u)
 800204e:	2d10      	cmp	r5, #16
 8002050:	f43f af71 	beq.w	8001f36 <CMAC_compute+0x7a>
    for (i = 0; i < (macSize % 4u); i++)
 8002054:	f005 0603 	and.w	r6, r5, #3
 8002058:	2300      	movs	r3, #0
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
 800205a:	f025 0503 	bic.w	r5, r5, #3
 800205e:	f06f 0707 	mvn.w	r7, #7
 8002062:	e01b      	b.n	800209c <CMAC_compute+0x1e0>
    WORD_TO_BYTES(temp_iv[i], macBuff[(4u * i) + 3u], macBuff[(4u * i) + 2u],
 8002064:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
 8002068:	f803 2c01 	strb.w	r2, [r3, #-1]
 800206c:	0a16      	lsrs	r6, r2, #8
 800206e:	f803 6c02 	strb.w	r6, [r3, #-2]
 8002072:	0c16      	lsrs	r6, r2, #16
 8002074:	0e12      	lsrs	r2, r2, #24
 8002076:	f803 6c03 	strb.w	r6, [r3, #-3]
 800207a:	f803 2c04 	strb.w	r2, [r3, #-4]
  for (i = 0u; i < (macSize / 4u); i++)
 800207e:	3101      	adds	r1, #1
 8002080:	e7e1      	b.n	8002046 <CMAC_compute+0x18a>
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
 8002082:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
 8002084:	eb02 0c03 	add.w	ip, r2, r3
 8002088:	fb07 f203 	mul.w	r2, r7, r3
 800208c:	f102 0418 	add.w	r4, r2, #24
 8002090:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
 8002094:	40e2      	lsrs	r2, r4
 8002096:	f80c 2005 	strb.w	r2, [ip, r5]
    for (i = 0; i < (macSize % 4u); i++)
 800209a:	3301      	adds	r3, #1
 800209c:	429e      	cmp	r6, r3
 800209e:	d8f0      	bhi.n	8002082 <CMAC_compute+0x1c6>
 80020a0:	e749      	b.n	8001f36 <CMAC_compute+0x7a>
    return MAC_ERROR_BAD_PARAMETER;
 80020a2:	2001      	movs	r0, #1
 80020a4:	e747      	b.n	8001f36 <CMAC_compute+0x7a>
    return MAC_ERROR_WRONG_MAC_SIZE;
 80020a6:	2002      	movs	r0, #2
 80020a8:	e745      	b.n	8001f36 <CMAC_compute+0x7a>
 80020aa:	bf00      	nop
 80020ac:	58001800 	.word	0x58001800

080020b0 <CA_AES_CBC_Encrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_CBC_Encrypt_Init(CA_AESCBCctx_stt *P_pAESCBCctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 80020b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b4:	460e      	mov	r6, r1
 80020b6:	4615      	mov	r5, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80020b8:	4604      	mov	r4, r0
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d06e      	beq.n	800219c <CA_AES_CBC_Encrypt_Init+0xec>
 80020be:	2900      	cmp	r1, #0
 80020c0:	d06c      	beq.n	800219c <CA_AES_CBC_Encrypt_Init+0xec>
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d06a      	beq.n	800219c <CA_AES_CBC_Encrypt_Init+0xec>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESCBCctx->mKeySize == 0)
 80020c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d044      	beq.n	8002156 <CA_AES_CBC_Encrypt_Init+0xa6>
      || (P_pAESCBCctx->mIvSize == 0))
 80020cc:	6903      	ldr	r3, [r0, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d041      	beq.n	8002156 <CA_AES_CBC_Encrypt_Init+0xa6>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 80020d2:	f100 072c 	add.w	r7, r0, #44	; 0x2c
 80020d6:	4638      	mov	r0, r7
 80020d8:	f7ff fe68 	bl	8001dac <cleanup_handle>
  P_pAESCBCctx->CrypHandle.Instance = CA_AES_INSTANCE;
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <CA_AES_CBC_Encrypt_Init+0xf4>)
 80020de:	62e3      	str	r3, [r4, #44]	; 0x2c

  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 80020e0:	4638      	mov	r0, r7
 80020e2:	f7fe ff2c 	bl	8000f3e <HAL_CRYP_DeInit>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d135      	bne.n	8002156 <CA_AES_CBC_Encrypt_Init+0xa6>
    return CA_AES_ERR_BAD_CONTEXT;
  }

  /* Initialize the CRYP peripheral */
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80020ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 80020ec:	2304      	movs	r3, #4
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80020ee:	2910      	cmp	r1, #16
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 80020f0:	6323      	str	r3, [r4, #48]	; 0x30
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80020f2:	d134      	bne.n	800215e <CA_AES_CBC_Encrypt_Init+0xae>
  {
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 80020f4:	6360      	str	r0, [r4, #52]	; 0x34
 80020f6:	462a      	mov	r2, r5
 80020f8:	4623      	mov	r3, r4
 80020fa:	f104 0010 	add.w	r0, r4, #16
  }

  /* Init IV and key here because of endianness */
  for (uint8_t i = 0; i < 4U; i++)
  {
    P_pAESCBCctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 80020fe:	78d5      	ldrb	r5, [r2, #3]
 8002100:	f883 5138 	strb.w	r5, [r3, #312]	; 0x138
    P_pAESCBCctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 8002104:	7895      	ldrb	r5, [r2, #2]
 8002106:	f883 5139 	strb.w	r5, [r3, #313]	; 0x139
    P_pAESCBCctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 800210a:	7855      	ldrb	r5, [r2, #1]
 800210c:	f883 513a 	strb.w	r5, [r3, #314]	; 0x13a
    P_pAESCBCctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 8002110:	f812 5b04 	ldrb.w	r5, [r2], #4
 8002114:	f883 513b 	strb.w	r5, [r3, #315]	; 0x13b
  for (uint8_t i = 0; i < 4U; i++)
 8002118:	3304      	adds	r3, #4
 800211a:	4283      	cmp	r3, r0
 800211c:	d1ef      	bne.n	80020fe <CA_AES_CBC_Encrypt_Init+0x4e>
  }

  for (uint8_t i = 0; i < ((uint32_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 800211e:	088d      	lsrs	r5, r1, #2
 8002120:	f04f 0c00 	mov.w	ip, #0
 8002124:	fa5f f08c 	uxtb.w	r0, ip
 8002128:	4285      	cmp	r5, r0
 800212a:	f10c 0c01 	add.w	ip, ip, #1
 800212e:	d81c      	bhi.n	800216a <CA_AES_CBC_Encrypt_Init+0xba>
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
  }

  P_pAESCBCctx->CrypHandle.Init.Algorithm       = CRYP_AES_CBC;
 8002130:	2320      	movs	r3, #32
 8002132:	6423      	str	r3, [r4, #64]	; 0x40
  P_pAESCBCctx->CrypHandle.Init.pKey = (uint32_t *)(uint32_t)(P_pAESCBCctx->Key_endian);
 8002134:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8002138:	63a3      	str	r3, [r4, #56]	; 0x38
  P_pAESCBCctx->CrypHandle.Init.pInitVect = (uint32_t *)(uint32_t)(P_pAESCBCctx->Iv_endian);
 800213a:	f504 739c 	add.w	r3, r4, #312	; 0x138
 800213e:	63e3      	str	r3, [r4, #60]	; 0x3c

  P_pAESCBCctx->CrypHandle.Init.Header = NULL;
 8002140:	2300      	movs	r3, #0
  P_pAESCBCctx->CrypHandle.Init.HeaderSize = 0;
 8002142:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  P_pAESCBCctx->CrypHandle.Init.B0 = NULL;
 8002146:	64e3      	str	r3, [r4, #76]	; 0x4c
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8002148:	2301      	movs	r3, #1
 800214a:	6523      	str	r3, [r4, #80]	; 0x50
  P_pAESCBCctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 800214c:	65a3      	str	r3, [r4, #88]	; 0x58

  if (HAL_CRYP_Init(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 800214e:	4638      	mov	r0, r7
 8002150:	f7fe fed2 	bl	8000ef8 <HAL_CRYP_Init>
 8002154:	b108      	cbz	r0, 800215a <CA_AES_CBC_Encrypt_Init+0xaa>
  {
    /* Initialization Error */
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 8002156:	f640 401f 	movw	r0, #3103	; 0xc1f
  }
  return aes_ret_status;
}
 800215a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 800215e:	2920      	cmp	r1, #32
 8002160:	d1f9      	bne.n	8002156 <CA_AES_CBC_Encrypt_Init+0xa6>
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 8002162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002166:	6363      	str	r3, [r4, #52]	; 0x34
 8002168:	e7c5      	b.n	80020f6 <CA_AES_CBC_Encrypt_Init+0x46>
    P_pAESCBCctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 800216a:	0083      	lsls	r3, r0, #2
 800216c:	1cda      	adds	r2, r3, #3
 800216e:	18e1      	adds	r1, r4, r3
 8002170:	f816 e002 	ldrb.w	lr, [r6, r2]
 8002174:	f881 e148 	strb.w	lr, [r1, #328]	; 0x148
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 8002178:	1c99      	adds	r1, r3, #2
 800217a:	3301      	adds	r3, #1
 800217c:	eb04 0e03 	add.w	lr, r4, r3
 8002180:	f816 8001 	ldrb.w	r8, [r6, r1]
 8002184:	f88e 8148 	strb.w	r8, [lr, #328]	; 0x148
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 8002188:	4421      	add	r1, r4
 800218a:	5cf3      	ldrb	r3, [r6, r3]
 800218c:	f881 3148 	strb.w	r3, [r1, #328]	; 0x148
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 8002190:	4422      	add	r2, r4
 8002192:	f816 3020 	ldrb.w	r3, [r6, r0, lsl #2]
 8002196:	f882 3148 	strb.w	r3, [r2, #328]	; 0x148
  for (uint8_t i = 0; i < ((uint32_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 800219a:	e7c3      	b.n	8002124 <CA_AES_CBC_Encrypt_Init+0x74>
    return CA_AES_ERR_BAD_PARAMETER;
 800219c:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80021a0:	e7db      	b.n	800215a <CA_AES_CBC_Encrypt_Init+0xaa>
 80021a2:	bf00      	nop
 80021a4:	58001800 	.word	0x58001800

080021a8 <CA_AES_CBC_Encrypt_Append>:
int32_t CA_AES_CBC_Encrypt_Append(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t P_inputSize,
                                  uint8_t *P_pOutputBuffer,
                                  int32_t *P_pOutputSize)
{
 80021a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021aa:	9e06      	ldr	r6, [sp, #24]
 80021ac:	4614      	mov	r4, r2

  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL)
 80021ae:	b170      	cbz	r0, 80021ce <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 80021b0:	b169      	cbz	r1, 80021ce <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 80021b2:	b163      	cbz	r3, 80021ce <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 80021b4:	b15e      	cbz	r6, 80021ce <CA_AES_CBC_Encrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < (int32_t)CA_CRL_AES_BLOCK)
 80021b6:	2c0f      	cmp	r4, #15
 80021b8:	dd0c      	ble.n	80021d4 <CA_AES_CBC_Encrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Encrypt(&P_pAESCBCctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	302c      	adds	r0, #44	; 0x2c
 80021c0:	b2a2      	uxth	r2, r4
 80021c2:	f7ff f911 	bl	80013e8 <HAL_CRYP_Encrypt>
 80021c6:	b940      	cbnz	r0, 80021da <CA_AES_CBC_Encrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 80021c8:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 80021ca:	b002      	add	sp, #8
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80021ce:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80021d2:	e7fa      	b.n	80021ca <CA_AES_CBC_Encrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 80021d4:	f640 401d 	movw	r0, #3101	; 0xc1d
 80021d8:	e7f7      	b.n	80021ca <CA_AES_CBC_Encrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 80021da:	f640 401e 	movw	r0, #3102	; 0xc1e
 80021de:	e7f4      	b.n	80021ca <CA_AES_CBC_Encrypt_Append+0x22>

080021e0 <CA_AES_CBC_Encrypt_Finish>:
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  */
int32_t CA_AES_CBC_Encrypt_Finish(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80021e0:	b538      	push	{r3, r4, r5, lr}
  int32_t aes_ret_status = CA_AES_SUCCESS;

  (void)P_pOutputBuffer;
  (void)P_pOutputSize;

  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 80021e2:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7fe fea9 	bl	8000f3e <HAL_CRYP_DeInit>
 80021ec:	2800      	cmp	r0, #0
  {
    aes_ret_status = CA_AES_ERR_BAD_PARAMETER;
 80021ee:	bf0c      	ite	eq
 80021f0:	2500      	moveq	r5, #0
 80021f2:	f44f 6542 	movne.w	r5, #3104	; 0xc20
  }
  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff fdd8 	bl	8001dac <cleanup_handle>

  return aes_ret_status;
}
 80021fc:	4628      	mov	r0, r5
 80021fe:	bd38      	pop	{r3, r4, r5, pc}

08002200 <CA_AES_CBC_Decrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_CBC_Decrypt_Init(CA_AESCBCctx_stt *P_pAESCBCctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	460d      	mov	r5, r1
 8002204:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8002206:	4604      	mov	r4, r0
 8002208:	2800      	cmp	r0, #0
 800220a:	d069      	beq.n	80022e0 <CA_AES_CBC_Decrypt_Init+0xe0>
 800220c:	2900      	cmp	r1, #0
 800220e:	d067      	beq.n	80022e0 <CA_AES_CBC_Decrypt_Init+0xe0>
 8002210:	2a00      	cmp	r2, #0
 8002212:	d065      	beq.n	80022e0 <CA_AES_CBC_Decrypt_Init+0xe0>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESCBCctx->mKeySize == 0)
 8002214:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d047      	beq.n	80022aa <CA_AES_CBC_Decrypt_Init+0xaa>
      || (P_pAESCBCctx->mIvSize == 0))
 800221a:	6903      	ldr	r3, [r0, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d044      	beq.n	80022aa <CA_AES_CBC_Decrypt_Init+0xaa>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 8002220:	f100 072c 	add.w	r7, r0, #44	; 0x2c
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff fdc1 	bl	8001dac <cleanup_handle>
  P_pAESCBCctx->CrypHandle.Instance = CA_AES_INSTANCE;
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <CA_AES_CBC_Decrypt_Init+0xe8>)
 800222c:	62e3      	str	r3, [r4, #44]	; 0x2c

  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 800222e:	4638      	mov	r0, r7
 8002230:	f7fe fe85 	bl	8000f3e <HAL_CRYP_DeInit>
 8002234:	2800      	cmp	r0, #0
 8002236:	d138      	bne.n	80022aa <CA_AES_CBC_Decrypt_Init+0xaa>
    return CA_AES_ERR_BAD_CONTEXT;
  }

  /* Initialize the CRYP peripheral */
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002238:	6a61      	ldr	r1, [r4, #36]	; 0x24
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 800223a:	2304      	movs	r3, #4
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800223c:	2910      	cmp	r1, #16
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 800223e:	6323      	str	r3, [r4, #48]	; 0x30
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002240:	d136      	bne.n	80022b0 <CA_AES_CBC_Decrypt_Init+0xb0>
  {
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002242:	6360      	str	r0, [r4, #52]	; 0x34
 8002244:	4632      	mov	r2, r6
 8002246:	4623      	mov	r3, r4
 8002248:	f104 0010 	add.w	r0, r4, #16
  }

  /* Init IV and key here because of endianness */
  for (uint8_t i = 0; i < 4U; i++)
  {
    P_pAESCBCctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 800224c:	78d6      	ldrb	r6, [r2, #3]
 800224e:	f883 6138 	strb.w	r6, [r3, #312]	; 0x138
    P_pAESCBCctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 8002252:	7896      	ldrb	r6, [r2, #2]
 8002254:	f883 6139 	strb.w	r6, [r3, #313]	; 0x139
    P_pAESCBCctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 8002258:	7856      	ldrb	r6, [r2, #1]
 800225a:	f883 613a 	strb.w	r6, [r3, #314]	; 0x13a
    P_pAESCBCctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 800225e:	f812 6b04 	ldrb.w	r6, [r2], #4
 8002262:	f883 613b 	strb.w	r6, [r3, #315]	; 0x13b
  for (uint8_t i = 0; i < 4U; i++)
 8002266:	3304      	adds	r3, #4
 8002268:	4283      	cmp	r3, r0
 800226a:	d1ef      	bne.n	800224c <CA_AES_CBC_Decrypt_Init+0x4c>
 800226c:	f504 73a4 	add.w	r3, r4, #328	; 0x148
  }

  for (uint8_t i = 0; i < ((uint8_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 8002270:	f3c1 0285 	ubfx	r2, r1, #2, #6
 8002274:	2000      	movs	r0, #0
 8002276:	4629      	mov	r1, r5
 8002278:	461d      	mov	r5, r3
 800227a:	b2c6      	uxtb	r6, r0
 800227c:	42b2      	cmp	r2, r6
 800227e:	f101 0104 	add.w	r1, r1, #4
 8002282:	f103 0304 	add.w	r3, r3, #4
 8002286:	d819      	bhi.n	80022bc <CA_AES_CBC_Decrypt_Init+0xbc>
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
  }

  P_pAESCBCctx->CrypHandle.Init.Algorithm       = CRYP_AES_CBC;
 8002288:	2320      	movs	r3, #32
 800228a:	6423      	str	r3, [r4, #64]	; 0x40
  P_pAESCBCctx->CrypHandle.Init.pKey = (uint32_t *)(uint32_t)(P_pAESCBCctx->Key_endian);
  P_pAESCBCctx->CrypHandle.Init.pInitVect = (uint32_t *)(uint32_t)(P_pAESCBCctx->Iv_endian);
 800228c:	f504 739c 	add.w	r3, r4, #312	; 0x138
 8002290:	63e3      	str	r3, [r4, #60]	; 0x3c

  P_pAESCBCctx->CrypHandle.Init.Header = NULL;
 8002292:	2300      	movs	r3, #0
  P_pAESCBCctx->CrypHandle.Init.HeaderSize = 0;
 8002294:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  P_pAESCBCctx->CrypHandle.Init.B0 = NULL;
 8002298:	64e3      	str	r3, [r4, #76]	; 0x4c
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800229a:	2301      	movs	r3, #1
  P_pAESCBCctx->CrypHandle.Init.pKey = (uint32_t *)(uint32_t)(P_pAESCBCctx->Key_endian);
 800229c:	63a5      	str	r5, [r4, #56]	; 0x38
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800229e:	6523      	str	r3, [r4, #80]	; 0x50
  P_pAESCBCctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80022a0:	65a3      	str	r3, [r4, #88]	; 0x58

  if (HAL_CRYP_Init(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 80022a2:	4638      	mov	r0, r7
 80022a4:	f7fe fe28 	bl	8000ef8 <HAL_CRYP_Init>
 80022a8:	b108      	cbz	r0, 80022ae <CA_AES_CBC_Decrypt_Init+0xae>
  {
    /* Initialization Error */
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80022aa:	f640 401f 	movw	r0, #3103	; 0xc1f
  }
  return aes_ret_status;
}
 80022ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 80022b0:	2920      	cmp	r1, #32
 80022b2:	d1fa      	bne.n	80022aa <CA_AES_CBC_Decrypt_Init+0xaa>
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 80022b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022b8:	6363      	str	r3, [r4, #52]	; 0x34
 80022ba:	e7c3      	b.n	8002244 <CA_AES_CBC_Decrypt_Init+0x44>
    P_pAESCBCctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80022bc:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 80022c0:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80022c4:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80022c8:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 80022cc:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 80022d0:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80022d4:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 80022d8:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 80022dc:	3001      	adds	r0, #1
 80022de:	e7cc      	b.n	800227a <CA_AES_CBC_Decrypt_Init+0x7a>
    return CA_AES_ERR_BAD_PARAMETER;
 80022e0:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80022e4:	e7e3      	b.n	80022ae <CA_AES_CBC_Decrypt_Init+0xae>
 80022e6:	bf00      	nop
 80022e8:	58001800 	.word	0x58001800

080022ec <CA_AES_CBC_Decrypt_Append>:
int32_t CA_AES_CBC_Decrypt_Append(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80022ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022ee:	9e06      	ldr	r6, [sp, #24]
 80022f0:	4614      	mov	r4, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL)
 80022f2:	b170      	cbz	r0, 8002312 <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 80022f4:	b169      	cbz	r1, 8002312 <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 80022f6:	b163      	cbz	r3, 8002312 <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 80022f8:	b15e      	cbz	r6, 8002312 <CA_AES_CBC_Decrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < (int32_t)CA_CRL_AES_BLOCK)
 80022fa:	2c0f      	cmp	r4, #15
 80022fc:	dd0c      	ble.n	8002318 <CA_AES_CBC_Decrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }


  if (HAL_CRYP_Decrypt(&P_pAESCBCctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	9200      	str	r2, [sp, #0]
 8002302:	302c      	adds	r0, #44	; 0x2c
 8002304:	b2a2      	uxth	r2, r4
 8002306:	f7ff f8fd 	bl	8001504 <HAL_CRYP_Decrypt>
 800230a:	b940      	cbnz	r0, 800231e <CA_AES_CBC_Decrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 800230c:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 800230e:	b002      	add	sp, #8
 8002310:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 8002312:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002316:	e7fa      	b.n	800230e <CA_AES_CBC_Decrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 8002318:	f640 401d 	movw	r0, #3101	; 0xc1d
 800231c:	e7f7      	b.n	800230e <CA_AES_CBC_Decrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 800231e:	f640 401e 	movw	r0, #3102	; 0xc1e
 8002322:	e7f4      	b.n	800230e <CA_AES_CBC_Decrypt_Append+0x22>

08002324 <CA_AES_CBC_Decrypt_Finish>:
 8002324:	f7ff bf5c 	b.w	80021e0 <CA_AES_CBC_Encrypt_Finish>

08002328 <CA_AES_CMAC_Encrypt_Init>:
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     CA_AES_ERR_BAD_CONTEXT: Context not initialized with valid values
  */
int32_t CA_AES_CMAC_Encrypt_Init(CA_AESCMACctx_stt *P_pAESCMACctx)
{
  if (P_pAESCMACctx == NULL)
 8002328:	b170      	cbz	r0, 8002348 <CA_AES_CMAC_Encrypt_Init+0x20>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESCMACctx->pmKey == NULL)
 800232a:	6883      	ldr	r3, [r0, #8]
 800232c:	b17b      	cbz	r3, 800234e <CA_AES_CMAC_Encrypt_Init+0x26>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES128_KEY)
 800232e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002330:	2b10      	cmp	r3, #16
 8002332:	d001      	beq.n	8002338 <CA_AES_CMAC_Encrypt_Init+0x10>
      && (P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES256_KEY))
 8002334:	2b20      	cmp	r3, #32
 8002336:	d10a      	bne.n	800234e <CA_AES_CMAC_Encrypt_Init+0x26>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mTagSize <= 0) || (P_pAESCMACctx->mTagSize > (int32_t)CA_CRL_AES_BLOCK))
 8002338:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800233a:	3b01      	subs	r3, #1
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  return CA_AES_SUCCESS;
 800233c:	2b0f      	cmp	r3, #15
 800233e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8002342:	bf98      	it	ls
 8002344:	2000      	movls	r0, #0
 8002346:	4770      	bx	lr
    return CA_AES_ERR_BAD_PARAMETER;
 8002348:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800234c:	4770      	bx	lr
    return CA_AES_ERR_BAD_CONTEXT;
 800234e:	f640 401f 	movw	r0, #3103	; 0xc1f
}
 8002352:	4770      	bx	lr

08002354 <CA_AES_CMAC_Encrypt_Append>:
  * @retval     CA_AES_ERR_BAD_OPERATION: Append not allowed
  */
int32_t CA_AES_CMAC_Encrypt_Append(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   const uint8_t  *P_pInputBuffer,
                                   int32_t         P_inputSize)
{
 8002354:	b513      	push	{r0, r1, r4, lr}
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
  mac_error_t error;
  if ((P_pAESCMACctx == NULL) || (P_pInputBuffer == NULL) || (P_inputSize == 0))
 800235c:	b18c      	cbz	r4, 8002382 <CA_AES_CMAC_Encrypt_Append+0x2e>
 800235e:	b180      	cbz	r0, 8002382 <CA_AES_CMAC_Encrypt_Append+0x2e>
 8002360:	b17a      	cbz	r2, 8002382 <CA_AES_CMAC_Encrypt_Append+0x2e>
  error = CMAC_compute(P_pInputBuffer,
                       (uint32_t)P_inputSize,
                       P_pAESCMACctx->pmKey,
                       (uint32_t)(P_pAESCMACctx->mKeySize),
                       (uint32_t)(P_pAESCMACctx->mTagSize),
                       P_pAESCMACctx->mac);
 8002362:	f104 0334 	add.w	r3, r4, #52	; 0x34
  error = CMAC_compute(P_pInputBuffer,
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	68a2      	ldr	r2, [r4, #8]
 800236e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002370:	f7ff fda4 	bl	8001ebc <CMAC_compute>
  if (error == MAC_SUCCESS)
 8002374:	2800      	cmp	r0, #0
  {
    return CA_AES_SUCCESS;
  }
  else
  {
    return CA_AES_ERR_BAD_OPERATION;
 8002376:	f640 401e 	movw	r0, #3102	; 0xc1e
 800237a:	bf08      	it	eq
 800237c:	2000      	moveq	r0, #0
  }
}
 800237e:	b002      	add	sp, #8
 8002380:	bd10      	pop	{r4, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 8002382:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002386:	e7fa      	b.n	800237e <CA_AES_CMAC_Encrypt_Append+0x2a>

08002388 <CA_AES_CMAC_Encrypt_Finish>:
  *             see note
  */
int32_t CA_AES_CMAC_Encrypt_Finish(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   uint8_t        *P_pOutputBuffer,
                                   int32_t        *P_pOutputSize)
{
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4604      	mov	r4, r0
 800238c:	4615      	mov	r5, r2
 800238e:	4608      	mov	r0, r1
  if ((P_pAESCMACctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8002390:	b154      	cbz	r4, 80023a8 <CA_AES_CMAC_Encrypt_Finish+0x20>
 8002392:	b149      	cbz	r1, 80023a8 <CA_AES_CMAC_Encrypt_Finish+0x20>
 8002394:	b142      	cbz	r2, 80023a8 <CA_AES_CMAC_Encrypt_Finish+0x20>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  (void)memcpy(P_pOutputBuffer, P_pAESCMACctx->mac, (uint32_t)(P_pAESCMACctx->mTagSize));
 8002396:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002398:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800239c:	f004 fb88 	bl	8006ab0 <memcpy>
  *P_pOutputSize = P_pAESCMACctx->mTagSize;
 80023a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023a2:	602b      	str	r3, [r5, #0]
  return CA_AES_SUCCESS;
 80023a4:	2000      	movs	r0, #0
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80023a8:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80023ac:	e7fb      	b.n	80023a6 <CA_AES_CMAC_Encrypt_Finish+0x1e>

080023ae <CA_AES_CMAC_Decrypt_Init>:
  * @retval     CA_AES_ERR_BAD_CONTEXT: Context not initialized with valid values,
  *                                   see the note below
  */
int32_t CA_AES_CMAC_Decrypt_Init(CA_AESCMACctx_stt *P_pAESCMACctx)
{
  if (P_pAESCMACctx == NULL)
 80023ae:	b180      	cbz	r0, 80023d2 <CA_AES_CMAC_Decrypt_Init+0x24>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESCMACctx->pmKey == NULL)
 80023b0:	6883      	ldr	r3, [r0, #8]
 80023b2:	b18b      	cbz	r3, 80023d8 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES128_KEY)
 80023b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d001      	beq.n	80023be <CA_AES_CMAC_Decrypt_Init+0x10>
      && (P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES256_KEY))
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d10c      	bne.n	80023d8 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if (P_pAESCMACctx->pmTag == NULL)
 80023be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023c0:	b153      	cbz	r3, 80023d8 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mTagSize <= 0) || (P_pAESCMACctx->mTagSize > (int32_t)CA_CRL_AES_BLOCK))
 80023c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023c4:	3b01      	subs	r3, #1
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  return CA_AES_SUCCESS;
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f640 401f 	movw	r0, #3103	; 0xc1f
 80023cc:	bf98      	it	ls
 80023ce:	2000      	movls	r0, #0
 80023d0:	4770      	bx	lr
    return CA_AES_ERR_BAD_PARAMETER;
 80023d2:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80023d6:	4770      	bx	lr
    return CA_AES_ERR_BAD_CONTEXT;
 80023d8:	f640 401f 	movw	r0, #3103	; 0xc1f
}
 80023dc:	4770      	bx	lr

080023de <CA_AES_CMAC_Decrypt_Append>:
 80023de:	f7ff bfb9 	b.w	8002354 <CA_AES_CMAC_Encrypt_Append>

080023e2 <CA_AES_CMAC_Decrypt_Finish>:
  *             see note
  */
int32_t CA_AES_CMAC_Decrypt_Finish(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   uint8_t        *P_pOutputBuffer,
                                   int32_t        *P_pOutputSize)
{
 80023e2:	b508      	push	{r3, lr}
  (void)P_pOutputBuffer;
  if ((P_pAESCMACctx == NULL) || (P_pOutputSize == NULL))
 80023e4:	b178      	cbz	r0, 8002406 <CA_AES_CMAC_Decrypt_Finish+0x24>
 80023e6:	b172      	cbz	r2, 8002406 <CA_AES_CMAC_Decrypt_Finish+0x24>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  *P_pOutputSize = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	6013      	str	r3, [r2, #0]
  if (memcmp(P_pAESCMACctx->pmTag, P_pAESCMACctx->mac, (uint32_t)(P_pAESCMACctx->mTagSize)) != 0)
 80023ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023ee:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80023f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023f4:	f004 fb4e 	bl	8006a94 <memcmp>
 80023f8:	2800      	cmp	r0, #0
  {
    return CA_AUTHENTICATION_FAILED;
  }
  else
  {
    return CA_AUTHENTICATION_SUCCESSFUL;
 80023fa:	f240 30eb 	movw	r0, #1003	; 0x3eb
 80023fe:	bf18      	it	ne
 8002400:	f44f 707b 	movne.w	r0, #1004	; 0x3ec
  }
}
 8002404:	bd08      	pop	{r3, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 8002406:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800240a:	e7fb      	b.n	8002404 <CA_AES_CMAC_Decrypt_Finish+0x22>

0800240c <CA_AES_ECB_Encrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_ECB_Encrypt_Init(CA_AESECBctx_stt *P_pAESECBctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	460d      	mov	r5, r1
  int32_t aes_ret_status = CA_AES_SUCCESS;

  (void)P_pIv;

  if ((P_pAESECBctx == NULL) || (P_pKey == NULL))
 8002410:	4604      	mov	r4, r0
 8002412:	2800      	cmp	r0, #0
 8002414:	d04b      	beq.n	80024ae <CA_AES_ECB_Encrypt_Init+0xa2>
 8002416:	2900      	cmp	r1, #0
 8002418:	d049      	beq.n	80024ae <CA_AES_ECB_Encrypt_Init+0xa2>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if (P_pAESECBctx->mKeySize == 0)
 800241a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800241c:	b363      	cbz	r3, 8002478 <CA_AES_ECB_Encrypt_Init+0x6c>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  cleanup_handle(&(P_pAESECBctx->CrypHandle));
 800241e:	f100 062c 	add.w	r6, r0, #44	; 0x2c
 8002422:	4630      	mov	r0, r6
 8002424:	f7ff fcc2 	bl	8001dac <cleanup_handle>
  P_pAESECBctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <CA_AES_ECB_Encrypt_Init+0xa8>)
 800242a:	62e3      	str	r3, [r4, #44]	; 0x2c

  if (HAL_CRYP_DeInit(&P_pAESECBctx->CrypHandle) != HAL_OK)
 800242c:	4630      	mov	r0, r6
 800242e:	f7fe fd86 	bl	8000f3e <HAL_CRYP_DeInit>
 8002432:	bb08      	cbnz	r0, 8002478 <CA_AES_ECB_Encrypt_Init+0x6c>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  /* Initialize the CRYP peripheral */
  P_pAESECBctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002434:	2304      	movs	r3, #4
 8002436:	6323      	str	r3, [r4, #48]	; 0x30
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
  if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002438:	6a63      	ldr	r3, [r4, #36]	; 0x24
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 800243a:	6520      	str	r0, [r4, #80]	; 0x50
  if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800243c:	2b10      	cmp	r3, #16
 800243e:	d11e      	bne.n	800247e <CA_AES_ECB_Encrypt_Init+0x72>
  {
    P_pAESECBctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002440:	6360      	str	r0, [r4, #52]	; 0x34
    /* Not supported by HW accelerator*/
    return CA_AES_ERR_BAD_CONTEXT;
  }

  /* Init key here because of endianness */
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESECBctx->mKeySize) / 4U); i++)
 8002442:	f3c3 0285 	ubfx	r2, r3, #2, #6
 8002446:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 800244a:	4629      	mov	r1, r5
 800244c:	2000      	movs	r0, #0
 800244e:	461d      	mov	r5, r3
 8002450:	b2c7      	uxtb	r7, r0
 8002452:	42ba      	cmp	r2, r7
 8002454:	f101 0104 	add.w	r1, r1, #4
 8002458:	f103 0304 	add.w	r3, r3, #4
 800245c:	d815      	bhi.n	800248a <CA_AES_ECB_Encrypt_Init+0x7e>
    P_pAESECBctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
    P_pAESECBctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
    P_pAESECBctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
  }

  P_pAESECBctx->CrypHandle.Init.Algorithm       = CRYP_AES_ECB;
 800245e:	2300      	movs	r3, #0
  P_pAESECBctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESECBctx->Key_endian);

  P_pAESECBctx->CrypHandle.Init.Header = NULL;
  P_pAESECBctx->CrypHandle.Init.HeaderSize = 0;
 8002460:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  P_pAESECBctx->CrypHandle.Init.Algorithm       = CRYP_AES_ECB;
 8002464:	6423      	str	r3, [r4, #64]	; 0x40
  P_pAESECBctx->CrypHandle.Init.B0 = NULL;
 8002466:	64e3      	str	r3, [r4, #76]	; 0x4c
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8002468:	2301      	movs	r3, #1
  P_pAESECBctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESECBctx->Key_endian);
 800246a:	63a5      	str	r5, [r4, #56]	; 0x38
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800246c:	6523      	str	r3, [r4, #80]	; 0x50
  P_pAESECBctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 800246e:	65a3      	str	r3, [r4, #88]	; 0x58

  if (HAL_CRYP_Init(&P_pAESECBctx->CrypHandle) != HAL_OK)
 8002470:	4630      	mov	r0, r6
 8002472:	f7fe fd41 	bl	8000ef8 <HAL_CRYP_Init>
 8002476:	b108      	cbz	r0, 800247c <CA_AES_ECB_Encrypt_Init+0x70>
  {
    /* Initialization Error */
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 8002478:	f640 401f 	movw	r0, #3103	; 0xc1f
  }
  return aes_ret_status;
}
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 800247e:	2b20      	cmp	r3, #32
 8002480:	d1fa      	bne.n	8002478 <CA_AES_ECB_Encrypt_Init+0x6c>
    P_pAESECBctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 8002482:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002486:	6362      	str	r2, [r4, #52]	; 0x34
 8002488:	e7db      	b.n	8002442 <CA_AES_ECB_Encrypt_Init+0x36>
    P_pAESECBctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 800248a:	f811 7c01 	ldrb.w	r7, [r1, #-1]
 800248e:	f803 7c04 	strb.w	r7, [r3, #-4]
    P_pAESECBctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 8002492:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8002496:	f803 7c03 	strb.w	r7, [r3, #-3]
    P_pAESECBctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 800249a:	f811 7c03 	ldrb.w	r7, [r1, #-3]
 800249e:	f803 7c02 	strb.w	r7, [r3, #-2]
    P_pAESECBctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80024a2:	f811 7c04 	ldrb.w	r7, [r1, #-4]
 80024a6:	f803 7c01 	strb.w	r7, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESECBctx->mKeySize) / 4U); i++)
 80024aa:	3001      	adds	r0, #1
 80024ac:	e7d0      	b.n	8002450 <CA_AES_ECB_Encrypt_Init+0x44>
    return CA_AES_ERR_BAD_PARAMETER;
 80024ae:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80024b2:	e7e3      	b.n	800247c <CA_AES_ECB_Encrypt_Init+0x70>
 80024b4:	58001800 	.word	0x58001800

080024b8 <CA_AES_ECB_Encrypt_Append>:
int32_t CA_AES_ECB_Encrypt_Append(CA_AESECBctx_stt *P_pAESECBctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80024b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024ba:	9e06      	ldr	r6, [sp, #24]
 80024bc:	4614      	mov	r4, r2

  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESECBctx == NULL)
 80024be:	b170      	cbz	r0, 80024de <CA_AES_ECB_Encrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 80024c0:	b169      	cbz	r1, 80024de <CA_AES_ECB_Encrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 80024c2:	b163      	cbz	r3, 80024de <CA_AES_ECB_Encrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 80024c4:	b15e      	cbz	r6, 80024de <CA_AES_ECB_Encrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if ((P_inputSize % (int32_t)CA_CRL_AES_BLOCK) != 0)
 80024c6:	0722      	lsls	r2, r4, #28
 80024c8:	d10c      	bne.n	80024e4 <CA_AES_ECB_Encrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Encrypt(&P_pAESECBctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	9200      	str	r2, [sp, #0]
 80024ce:	302c      	adds	r0, #44	; 0x2c
 80024d0:	b2a2      	uxth	r2, r4
 80024d2:	f7fe ff89 	bl	80013e8 <HAL_CRYP_Encrypt>
 80024d6:	b940      	cbnz	r0, 80024ea <CA_AES_ECB_Encrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 80024d8:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 80024da:	b002      	add	sp, #8
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80024de:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80024e2:	e7fa      	b.n	80024da <CA_AES_ECB_Encrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 80024e4:	f640 401d 	movw	r0, #3101	; 0xc1d
 80024e8:	e7f7      	b.n	80024da <CA_AES_ECB_Encrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 80024ea:	f640 401e 	movw	r0, #3102	; 0xc1e
 80024ee:	e7f4      	b.n	80024da <CA_AES_ECB_Encrypt_Append+0x22>

080024f0 <CA_AES_ECB_Encrypt_Finish>:
  * @retval     CA_AES_SUCCESS: Operation Successful
  */
int32_t CA_AES_ECB_Encrypt_Finish(CA_AESECBctx_stt *P_pAESECBctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
  int32_t aes_ret_status = CA_AES_SUCCESS;

  (void)P_pOutputBuffer;
  (void)P_pOutputSize;

  if (HAL_CRYP_DeInit(&P_pAESECBctx->CrypHandle) != HAL_OK)
 80024f2:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7fe fd21 	bl	8000f3e <HAL_CRYP_DeInit>
 80024fc:	2800      	cmp	r0, #0
  {
    aes_ret_status = CA_AES_ERR_BAD_PARAMETER;
 80024fe:	bf0c      	ite	eq
 8002500:	2500      	moveq	r5, #0
 8002502:	f44f 6542 	movne.w	r5, #3104	; 0xc20
  }
  cleanup_handle(&(P_pAESECBctx->CrypHandle));
 8002506:	4620      	mov	r0, r4
 8002508:	f7ff fc50 	bl	8001dac <cleanup_handle>

  return aes_ret_status;
}
 800250c:	4628      	mov	r0, r5
 800250e:	bd38      	pop	{r3, r4, r5, pc}

08002510 <CA_AES_ECB_Decrypt_Init>:
 8002510:	f7ff bf7c 	b.w	800240c <CA_AES_ECB_Encrypt_Init>

08002514 <CA_AES_ECB_Decrypt_Append>:
int32_t CA_AES_ECB_Decrypt_Append(CA_AESECBctx_stt *P_pAESECBctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002514:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002516:	9e06      	ldr	r6, [sp, #24]
 8002518:	4614      	mov	r4, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESECBctx == NULL)
 800251a:	b170      	cbz	r0, 800253a <CA_AES_ECB_Decrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 800251c:	b169      	cbz	r1, 800253a <CA_AES_ECB_Decrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 800251e:	b163      	cbz	r3, 800253a <CA_AES_ECB_Decrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 8002520:	b15e      	cbz	r6, 800253a <CA_AES_ECB_Decrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if ((P_inputSize % (int32_t)CA_CRL_AES_BLOCK) != 0)
 8002522:	0722      	lsls	r2, r4, #28
 8002524:	d10c      	bne.n	8002540 <CA_AES_ECB_Decrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Decrypt(&P_pAESECBctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	302c      	adds	r0, #44	; 0x2c
 800252c:	b2a2      	uxth	r2, r4
 800252e:	f7fe ffe9 	bl	8001504 <HAL_CRYP_Decrypt>
 8002532:	b940      	cbnz	r0, 8002546 <CA_AES_ECB_Decrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 8002534:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 8002536:	b002      	add	sp, #8
 8002538:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 800253a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800253e:	e7fa      	b.n	8002536 <CA_AES_ECB_Decrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 8002540:	f640 401d 	movw	r0, #3101	; 0xc1d
 8002544:	e7f7      	b.n	8002536 <CA_AES_ECB_Decrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002546:	f640 401e 	movw	r0, #3102	; 0xc1e
 800254a:	e7f4      	b.n	8002536 <CA_AES_ECB_Decrypt_Append+0x22>

0800254c <CA_AES_ECB_Decrypt_Finish>:
 800254c:	f7ff bfd0 	b.w	80024f0 <CA_AES_ECB_Encrypt_Finish>

08002550 <CA_AES_GCM_Encrypt_Init>:
  *                                  see note
  */
int32_t CA_AES_GCM_Encrypt_Init(CA_AESGCMctx_stt *P_pAESGCMctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	460d      	mov	r5, r1
 8002554:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8002556:	4604      	mov	r4, r0
 8002558:	2800      	cmp	r0, #0
 800255a:	d06b      	beq.n	8002634 <CA_AES_GCM_Encrypt_Init+0xe4>
 800255c:	2900      	cmp	r1, #0
 800255e:	d069      	beq.n	8002634 <CA_AES_GCM_Encrypt_Init+0xe4>
 8002560:	2a00      	cmp	r2, #0
 8002562:	d067      	beq.n	8002634 <CA_AES_GCM_Encrypt_Init+0xe4>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 8002564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002566:	b913      	cbnz	r3, 800256e <CA_AES_GCM_Encrypt_Init+0x1e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 8002568:	f640 401f 	movw	r0, #3103	; 0xc1f
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;

  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
  return aes_ret_status;
}
 800256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 800256e:	6903      	ldr	r3, [r0, #16]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d1f9      	bne.n	8002568 <CA_AES_GCM_Encrypt_Init+0x18>
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 8002574:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8002578:	4638      	mov	r0, r7
 800257a:	f7ff fc17 	bl	8001dac <cleanup_handle>
  P_pAESGCMctx->CrypHandle.Instance = CA_AES_INSTANCE;
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <CA_AES_GCM_Encrypt_Init+0xec>)
 8002580:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002582:	4638      	mov	r0, r7
 8002584:	f7fe fcdb 	bl	8000f3e <HAL_CRYP_DeInit>
 8002588:	2800      	cmp	r0, #0
 800258a:	d1ed      	bne.n	8002568 <CA_AES_GCM_Encrypt_Init+0x18>
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800258c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 800258e:	2304      	movs	r3, #4
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002590:	2910      	cmp	r1, #16
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002592:	63a3      	str	r3, [r4, #56]	; 0x38
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002594:	d136      	bne.n	8002604 <CA_AES_GCM_Encrypt_Init+0xb4>
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002596:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002598:	4632      	mov	r2, r6
 800259a:	4623      	mov	r3, r4
 800259c:	f104 000c 	add.w	r0, r4, #12
    P_pAESGCMctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 80025a0:	78d6      	ldrb	r6, [r2, #3]
 80025a2:	f883 6140 	strb.w	r6, [r3, #320]	; 0x140
    P_pAESGCMctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 80025a6:	7896      	ldrb	r6, [r2, #2]
 80025a8:	f883 6141 	strb.w	r6, [r3, #321]	; 0x141
    P_pAESGCMctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 80025ac:	7856      	ldrb	r6, [r2, #1]
 80025ae:	f883 6142 	strb.w	r6, [r3, #322]	; 0x142
    P_pAESGCMctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 80025b2:	f812 6b04 	ldrb.w	r6, [r2], #4
 80025b6:	f883 6143 	strb.w	r6, [r3, #323]	; 0x143
  for (uint8_t i = 0; i < 3U; i++)
 80025ba:	3304      	adds	r3, #4
 80025bc:	4283      	cmp	r3, r0
 80025be:	d1ef      	bne.n	80025a0 <CA_AES_GCM_Encrypt_Init+0x50>
  P_pAESGCMctx->Iv_endian[12] = 2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 80025c6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80025ca:	f3c1 0285 	ubfx	r2, r1, #2, #6
 80025ce:	2000      	movs	r0, #0
 80025d0:	4629      	mov	r1, r5
 80025d2:	461d      	mov	r5, r3
 80025d4:	b2c6      	uxtb	r6, r0
 80025d6:	42b2      	cmp	r2, r6
 80025d8:	f101 0104 	add.w	r1, r1, #4
 80025dc:	f103 0304 	add.w	r3, r3, #4
 80025e0:	d816      	bhi.n	8002610 <CA_AES_GCM_Encrypt_Init+0xc0>
  P_pAESGCMctx->CrypHandle.Init.Algorithm       = CRYP_AES_GCM_GMAC;
 80025e2:	2360      	movs	r3, #96	; 0x60
 80025e4:	64a3      	str	r3, [r4, #72]	; 0x48
  P_pAESGCMctx->CrypHandle.Init.pInitVect       = (uint32_t *)(uint32_t)(P_pAESGCMctx->Iv_endian);
 80025e6:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 80025ea:	6463      	str	r3, [r4, #68]	; 0x44
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80025ec:	2301      	movs	r3, #1
  P_pAESGCMctx->CrypHandle.Init.Header = NULL;
 80025ee:	2000      	movs	r0, #0
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80025f0:	65a3      	str	r3, [r4, #88]	; 0x58
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80025f2:	6623      	str	r3, [r4, #96]	; 0x60
  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80025f4:	2309      	movs	r3, #9
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = 0;
 80025f6:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  P_pAESGCMctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESGCMctx->Key_endian);
 80025fa:	6425      	str	r5, [r4, #64]	; 0x40
  P_pAESGCMctx->CrypHandle.Init.B0 = NULL;
 80025fc:	6560      	str	r0, [r4, #84]	; 0x54
  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80025fe:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  return aes_ret_status;
 8002602:	e7b3      	b.n	800256c <CA_AES_GCM_Encrypt_Init+0x1c>
  else if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 8002604:	2920      	cmp	r1, #32
 8002606:	d1af      	bne.n	8002568 <CA_AES_GCM_Encrypt_Init+0x18>
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 8002608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800260c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800260e:	e7c3      	b.n	8002598 <CA_AES_GCM_Encrypt_Init+0x48>
    P_pAESGCMctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 8002610:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 8002614:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESGCMctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 8002618:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 800261c:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESGCMctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 8002620:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 8002624:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESGCMctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 8002628:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800262c:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 8002630:	3001      	adds	r0, #1
 8002632:	e7cf      	b.n	80025d4 <CA_AES_GCM_Encrypt_Init+0x84>
    return CA_AES_ERR_BAD_PARAMETER;
 8002634:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002638:	e798      	b.n	800256c <CA_AES_GCM_Encrypt_Init+0x1c>
 800263a:	bf00      	nop
 800263c:	58001800 	.word	0x58001800

08002640 <CA_AES_GCM_Encrypt_Append>:
int32_t CA_AES_GCM_Encrypt_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002644:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8002648:	460e      	mov	r6, r1
 800264a:	4615      	mov	r5, r2
 800264c:	461f      	mov	r7, r3
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL)
 800264e:	4604      	mov	r4, r0
 8002650:	b360      	cbz	r0, 80026ac <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pInputBuffer == NULL)
 8002652:	b359      	cbz	r1, 80026ac <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pOutputBuffer == NULL)
 8002654:	b353      	cbz	r3, 80026ac <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pOutputSize == NULL))
 8002656:	f1b8 0f00 	cmp.w	r8, #0
 800265a:	d027      	beq.n	80026ac <CA_AES_GCM_Encrypt_Append+0x6c>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 800265c:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8002660:	071b      	lsls	r3, r3, #28
 8002662:	f100 0934 	add.w	r9, r0, #52	; 0x34
 8002666:	d511      	bpl.n	800268c <CA_AES_GCM_Encrypt_Append+0x4c>
  {
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002668:	4648      	mov	r0, r9
 800266a:	f7fe fc45 	bl	8000ef8 <HAL_CRYP_Init>
 800266e:	b138      	cbz	r0, 8002680 <CA_AES_GCM_Encrypt_Append+0x40>
    {
      *P_pOutputSize = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c8 3000 	str.w	r3, [r8]
      return CA_AES_ERR_BAD_OPERATION;
 8002676:	f640 401e 	movw	r0, #3102	; 0xc1e
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }

  *P_pOutputSize = P_inputSize;
  return aes_ret_status;
}
 800267a:	b003      	add	sp, #12
 800267c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 8002680:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 8002684:	f023 0308 	bic.w	r3, r3, #8
 8002688:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  if (HAL_CRYP_Encrypt(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 800268c:	23ff      	movs	r3, #255	; 0xff
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	b2aa      	uxth	r2, r5
 8002692:	463b      	mov	r3, r7
 8002694:	4631      	mov	r1, r6
 8002696:	4648      	mov	r0, r9
 8002698:	f7fe fea6 	bl	80013e8 <HAL_CRYP_Encrypt>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 800269c:	2800      	cmp	r0, #0
  *P_pOutputSize = P_inputSize;
 800269e:	f8c8 5000 	str.w	r5, [r8]
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 80026a2:	f640 401e 	movw	r0, #3102	; 0xc1e
 80026a6:	bf08      	it	eq
 80026a8:	2000      	moveq	r0, #0
  return aes_ret_status;
 80026aa:	e7e6      	b.n	800267a <CA_AES_GCM_Encrypt_Append+0x3a>
    return CA_AES_ERR_BAD_PARAMETER;
 80026ac:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80026b0:	e7e3      	b.n	800267a <CA_AES_GCM_Encrypt_Append+0x3a>

080026b2 <CA_AES_GCM_Encrypt_Finish>:
  *                                  See note
  */
int32_t CA_AES_GCM_Encrypt_Finish(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80026b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b6:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;


  if ((P_pAESGCMctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80026b8:	4605      	mov	r5, r0
 80026ba:	b1f0      	cbz	r0, 80026fa <CA_AES_GCM_Encrypt_Finish+0x48>
 80026bc:	b1e9      	cbz	r1, 80026fa <CA_AES_GCM_Encrypt_Finish+0x48>
 80026be:	b1e2      	cbz	r2, 80026fa <CA_AES_GCM_Encrypt_Finish+0x48>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mTagSize < 0) || (P_pAESGCMctx->mTagSize > 16))
 80026c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d81c      	bhi.n	8002700 <CA_AES_GCM_Encrypt_Finish+0x4e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&P_pAESGCMctx->CrypHandle,
 80026c6:	f100 0734 	add.w	r7, r0, #52	; 0x34
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	4638      	mov	r0, r7
 80026ce:	f7fe ffe9 	bl	80016a4 <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
                                        (uint32_t *)(uint32_t)P_pOutputBuffer, TIMEOUT_VALUE) != HAL_OK)
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80026d2:	f640 481f 	movw	r8, #3103	; 0xc1f
 80026d6:	2800      	cmp	r0, #0
  }

  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80026d8:	4638      	mov	r0, r7
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80026da:	bf0c      	ite	eq
 80026dc:	2400      	moveq	r4, #0
 80026de:	4644      	movne	r4, r8
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80026e0:	f7fe fc2d 	bl	8000f3e <HAL_CRYP_DeInit>
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80026e4:	2800      	cmp	r0, #0
 80026e6:	bf18      	it	ne
 80026e8:	4644      	movne	r4, r8
  }
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 80026ea:	4638      	mov	r0, r7
 80026ec:	f7ff fb5e 	bl	8001dac <cleanup_handle>

  *P_pOutputSize = P_pAESGCMctx->mTagSize;
 80026f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80026f2:	6033      	str	r3, [r6, #0]

  return aes_ret_status;
}
 80026f4:	4620      	mov	r0, r4
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80026fa:	f44f 6442 	mov.w	r4, #3104	; 0xc20
 80026fe:	e7f9      	b.n	80026f4 <CA_AES_GCM_Encrypt_Finish+0x42>
    return CA_AES_ERR_BAD_CONTEXT;
 8002700:	f640 441f 	movw	r4, #3103	; 0xc1f
 8002704:	e7f6      	b.n	80026f4 <CA_AES_GCM_Encrypt_Finish+0x42>
	...

08002708 <CA_AES_GCM_Decrypt_Init>:
  *                                  see note
  */
int32_t CA_AES_GCM_Decrypt_Init(CA_AESGCMctx_stt *P_pAESGCMctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	460d      	mov	r5, r1
 800270c:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 800270e:	4604      	mov	r4, r0
 8002710:	2800      	cmp	r0, #0
 8002712:	d06b      	beq.n	80027ec <CA_AES_GCM_Decrypt_Init+0xe4>
 8002714:	2900      	cmp	r1, #0
 8002716:	d069      	beq.n	80027ec <CA_AES_GCM_Decrypt_Init+0xe4>
 8002718:	2a00      	cmp	r2, #0
 800271a:	d067      	beq.n	80027ec <CA_AES_GCM_Decrypt_Init+0xe4>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 800271c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800271e:	b913      	cbnz	r3, 8002726 <CA_AES_GCM_Decrypt_Init+0x1e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 8002720:	f640 401f 	movw	r0, #3103	; 0xc1f
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;

  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
  return aes_ret_status;
}
 8002724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 8002726:	6903      	ldr	r3, [r0, #16]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d1f9      	bne.n	8002720 <CA_AES_GCM_Decrypt_Init+0x18>
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 800272c:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8002730:	4638      	mov	r0, r7
 8002732:	f7ff fb3b 	bl	8001dac <cleanup_handle>
  P_pAESGCMctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <CA_AES_GCM_Decrypt_Init+0xec>)
 8002738:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 800273a:	4638      	mov	r0, r7
 800273c:	f7fe fbff 	bl	8000f3e <HAL_CRYP_DeInit>
 8002740:	2800      	cmp	r0, #0
 8002742:	d1ed      	bne.n	8002720 <CA_AES_GCM_Decrypt_Init+0x18>
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002744:	6a61      	ldr	r1, [r4, #36]	; 0x24
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002746:	2304      	movs	r3, #4
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002748:	2910      	cmp	r1, #16
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 800274a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800274c:	d136      	bne.n	80027bc <CA_AES_GCM_Decrypt_Init+0xb4>
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 800274e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002750:	4632      	mov	r2, r6
 8002752:	4623      	mov	r3, r4
 8002754:	f104 000c 	add.w	r0, r4, #12
    P_pAESGCMctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 8002758:	78d6      	ldrb	r6, [r2, #3]
 800275a:	f883 6140 	strb.w	r6, [r3, #320]	; 0x140
    P_pAESGCMctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 800275e:	7896      	ldrb	r6, [r2, #2]
 8002760:	f883 6141 	strb.w	r6, [r3, #321]	; 0x141
    P_pAESGCMctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 8002764:	7856      	ldrb	r6, [r2, #1]
 8002766:	f883 6142 	strb.w	r6, [r3, #322]	; 0x142
    P_pAESGCMctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 800276a:	f812 6b04 	ldrb.w	r6, [r2], #4
 800276e:	f883 6143 	strb.w	r6, [r3, #323]	; 0x143
  for (uint8_t i = 0; i < 3U; i++)
 8002772:	3304      	adds	r3, #4
 8002774:	4283      	cmp	r3, r0
 8002776:	d1ef      	bne.n	8002758 <CA_AES_GCM_Decrypt_Init+0x50>
  P_pAESGCMctx->Iv_endian[12] = 2;
 8002778:	2302      	movs	r3, #2
 800277a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 800277e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8002782:	f3c1 0285 	ubfx	r2, r1, #2, #6
 8002786:	2000      	movs	r0, #0
 8002788:	4629      	mov	r1, r5
 800278a:	461d      	mov	r5, r3
 800278c:	b2c6      	uxtb	r6, r0
 800278e:	42b2      	cmp	r2, r6
 8002790:	f101 0104 	add.w	r1, r1, #4
 8002794:	f103 0304 	add.w	r3, r3, #4
 8002798:	d816      	bhi.n	80027c8 <CA_AES_GCM_Decrypt_Init+0xc0>
  P_pAESGCMctx->CrypHandle.Init.Algorithm       = CRYP_AES_GCM_GMAC;
 800279a:	2360      	movs	r3, #96	; 0x60
 800279c:	64a3      	str	r3, [r4, #72]	; 0x48
  P_pAESGCMctx->CrypHandle.Init.pInitVect       = (uint32_t *)(uint32_t)(P_pAESGCMctx->Iv_endian);
 800279e:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 80027a2:	6463      	str	r3, [r4, #68]	; 0x44
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80027a4:	2301      	movs	r3, #1
  P_pAESGCMctx->CrypHandle.Init.Header = NULL;
 80027a6:	2000      	movs	r0, #0
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80027a8:	65a3      	str	r3, [r4, #88]	; 0x58
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80027aa:	6623      	str	r3, [r4, #96]	; 0x60
  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80027ac:	230a      	movs	r3, #10
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = 0;
 80027ae:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  P_pAESGCMctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESGCMctx->Key_endian);
 80027b2:	6425      	str	r5, [r4, #64]	; 0x40
  P_pAESGCMctx->CrypHandle.Init.B0 = NULL;
 80027b4:	6560      	str	r0, [r4, #84]	; 0x54
  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80027b6:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  return aes_ret_status;
 80027ba:	e7b3      	b.n	8002724 <CA_AES_GCM_Decrypt_Init+0x1c>
  else if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 80027bc:	2920      	cmp	r1, #32
 80027be:	d1af      	bne.n	8002720 <CA_AES_GCM_Decrypt_Init+0x18>
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 80027c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80027c6:	e7c3      	b.n	8002750 <CA_AES_GCM_Decrypt_Init+0x48>
    P_pAESGCMctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80027c8:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 80027cc:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESGCMctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80027d0:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80027d4:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESGCMctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 80027d8:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 80027dc:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESGCMctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80027e0:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 80027e4:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 80027e8:	3001      	adds	r0, #1
 80027ea:	e7cf      	b.n	800278c <CA_AES_GCM_Decrypt_Init+0x84>
    return CA_AES_ERR_BAD_PARAMETER;
 80027ec:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80027f0:	e798      	b.n	8002724 <CA_AES_GCM_Decrypt_Init+0x1c>
 80027f2:	bf00      	nop
 80027f4:	58001800 	.word	0x58001800

080027f8 <CA_AES_GCM_Decrypt_Append>:
int32_t CA_AES_GCM_Decrypt_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80027f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8002800:	460e      	mov	r6, r1
 8002802:	4615      	mov	r5, r2
 8002804:	461f      	mov	r7, r3
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL)
 8002806:	4604      	mov	r4, r0
 8002808:	b360      	cbz	r0, 8002864 <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pInputBuffer == NULL)
 800280a:	b359      	cbz	r1, 8002864 <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pOutputBuffer == NULL)
 800280c:	b353      	cbz	r3, 8002864 <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pOutputSize == NULL))
 800280e:	f1b8 0f00 	cmp.w	r8, #0
 8002812:	d027      	beq.n	8002864 <CA_AES_GCM_Decrypt_Append+0x6c>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 8002814:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	f100 0934 	add.w	r9, r0, #52	; 0x34
 800281e:	d511      	bpl.n	8002844 <CA_AES_GCM_Decrypt_Append+0x4c>
  {
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002820:	4648      	mov	r0, r9
 8002822:	f7fe fb69 	bl	8000ef8 <HAL_CRYP_Init>
 8002826:	b138      	cbz	r0, 8002838 <CA_AES_GCM_Decrypt_Append+0x40>
    {
      *P_pOutputSize = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c8 3000 	str.w	r3, [r8]
      return CA_AES_ERR_BAD_OPERATION;
 800282e:	f640 401e 	movw	r0, #3102	; 0xc1e
  }

  *P_pOutputSize = P_inputSize;

  return aes_ret_status;
}
 8002832:	b003      	add	sp, #12
 8002834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 8002838:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 800283c:	f023 0308 	bic.w	r3, r3, #8
 8002840:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  if (HAL_CRYP_Decrypt(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 8002844:	23ff      	movs	r3, #255	; 0xff
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	b2aa      	uxth	r2, r5
 800284a:	463b      	mov	r3, r7
 800284c:	4631      	mov	r1, r6
 800284e:	4648      	mov	r0, r9
 8002850:	f7fe fe58 	bl	8001504 <HAL_CRYP_Decrypt>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002854:	2800      	cmp	r0, #0
  *P_pOutputSize = P_inputSize;
 8002856:	f8c8 5000 	str.w	r5, [r8]
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 800285a:	f640 401e 	movw	r0, #3102	; 0xc1e
 800285e:	bf08      	it	eq
 8002860:	2000      	moveq	r0, #0
  return aes_ret_status;
 8002862:	e7e6      	b.n	8002832 <CA_AES_GCM_Decrypt_Append+0x3a>
    return CA_AES_ERR_BAD_PARAMETER;
 8002864:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002868:	e7e3      	b.n	8002832 <CA_AES_GCM_Decrypt_Append+0x3a>

0800286a <CA_AES_GCM_Decrypt_Finish>:
  *                                  See note
  */
int32_t CA_AES_GCM_Decrypt_Finish(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 800286a:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t aes_ret_status = CA_AUTHENTICATION_SUCCESSFUL;
  uint8_t tag[16] = {0};
 800286c:	2300      	movs	r3, #0
{
 800286e:	b085      	sub	sp, #20
  uint8_t tag[16] = {0};
 8002870:	e9cd 3300 	strd	r3, r3, [sp]
 8002874:	e9cd 3302 	strd	r3, r3, [sp, #8]

  (void)P_pOutputBuffer;

  if ((P_pAESGCMctx == NULL) || (P_pOutputSize == NULL))
 8002878:	4605      	mov	r5, r0
 800287a:	b330      	cbz	r0, 80028ca <CA_AES_GCM_Decrypt_Finish+0x60>
 800287c:	b32a      	cbz	r2, 80028ca <CA_AES_GCM_Decrypt_Finish+0x60>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mTagSize < 0) || (P_pAESGCMctx->mTagSize > 16))
 800287e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002880:	2b10      	cmp	r3, #16
 8002882:	d825      	bhi.n	80028d0 <CA_AES_GCM_Decrypt_Finish+0x66>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)&tag[0],
 8002884:	f100 0634 	add.w	r6, r0, #52	; 0x34
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	4669      	mov	r1, sp
 800288c:	4630      	mov	r0, r6
 800288e:	f7fe ff09 	bl	80016a4 <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
                                        TIMEOUT_VALUE) != HAL_OK)
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 8002892:	f640 471f 	movw	r7, #3103	; 0xc1f
 8002896:	f240 34eb 	movw	r4, #1003	; 0x3eb
 800289a:	2800      	cmp	r0, #0
 800289c:	bf18      	it	ne
 800289e:	463c      	movne	r4, r7
  }

  /* Check if tag is valid                                               */
  if (memcmp(tag, P_pAESGCMctx->pmTag, 16) != 0)
 80028a0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80028a2:	2210      	movs	r2, #16
 80028a4:	4668      	mov	r0, sp
 80028a6:	f004 f8f5 	bl	8006a94 <memcmp>
  {
    aes_ret_status =  CA_AUTHENTICATION_FAILED;
 80028aa:	2800      	cmp	r0, #0
  }

  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028ac:	4630      	mov	r0, r6
    aes_ret_status =  CA_AUTHENTICATION_FAILED;
 80028ae:	bf18      	it	ne
 80028b0:	f44f 747b 	movne.w	r4, #1004	; 0x3ec
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028b4:	f7fe fb43 	bl	8000f3e <HAL_CRYP_DeInit>
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80028b8:	2800      	cmp	r0, #0
 80028ba:	bf18      	it	ne
 80028bc:	463c      	movne	r4, r7
  }
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 80028be:	4630      	mov	r0, r6
 80028c0:	f7ff fa74 	bl	8001dac <cleanup_handle>

  return aes_ret_status;
}
 80028c4:	4620      	mov	r0, r4
 80028c6:	b005      	add	sp, #20
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80028ca:	f44f 6442 	mov.w	r4, #3104	; 0xc20
 80028ce:	e7f9      	b.n	80028c4 <CA_AES_GCM_Decrypt_Finish+0x5a>
    return CA_AES_ERR_BAD_CONTEXT;
 80028d0:	f640 441f 	movw	r4, #3103	; 0xc1f
 80028d4:	e7f6      	b.n	80028c4 <CA_AES_GCM_Decrypt_Finish+0x5a>

080028d6 <CA_AES_GCM_Header_Append>:
  * @retval     CA_AES_ERR_BAD_OPERATION Append not allowed
  */
int32_t CA_AES_GCM_Header_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                 const uint8_t *P_pInputBuffer,
                                 int32_t        P_inputSize)
{
 80028d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t aes_ret_status = CA_AES_SUCCESS;


  if ((P_pAESGCMctx == NULL) || (P_pInputBuffer == NULL))
 80028d8:	4604      	mov	r4, r0
 80028da:	b348      	cbz	r0, 8002930 <CA_AES_GCM_Header_Append+0x5a>
 80028dc:	b341      	cbz	r1, 8002930 <CA_AES_GCM_Header_Append+0x5a>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  P_pAESGCMctx->mAADsize = P_inputSize;
 80028de:	6302      	str	r2, [r0, #48]	; 0x30
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = (uint32_t)(P_inputSize) / 4U;
  P_pAESGCMctx->CrypHandle.Init.Header     = (uint32_t *)(uint32_t)P_pInputBuffer;

  if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028e0:	f100 0534 	add.w	r5, r0, #52	; 0x34
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = (uint32_t)(P_inputSize) / 4U;
 80028e4:	0892      	lsrs	r2, r2, #2
  P_pAESGCMctx->CrypHandle.Init.Header     = (uint32_t *)(uint32_t)P_pInputBuffer;
 80028e6:	e9c0 1213 	strd	r1, r2, [r0, #76]	; 0x4c
  if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028ea:	4628      	mov	r0, r5
 80028ec:	f7fe fb04 	bl	8000ef8 <HAL_CRYP_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b9a0      	cbnz	r0, 800291e <CA_AES_GCM_Header_Append+0x48>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 80028f4:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 80028f8:	f022 0108 	bic.w	r1, r2, #8
 80028fc:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    if ((P_pAESGCMctx->flags & GCM_ENCRYPTION_ONGOING) == GCM_ENCRYPTION_ONGOING)
 8002900:	f012 0201 	ands.w	r2, r2, #1
 8002904:	f04f 01ff 	mov.w	r1, #255	; 0xff
    {
      if (HAL_CRYP_Encrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 8002908:	9100      	str	r1, [sp, #0]
    if ((P_pAESGCMctx->flags & GCM_ENCRYPTION_ONGOING) == GCM_ENCRYPTION_ONGOING)
 800290a:	d00b      	beq.n	8002924 <CA_AES_GCM_Header_Append+0x4e>
      if (HAL_CRYP_Encrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 800290c:	4602      	mov	r2, r0
 800290e:	4601      	mov	r1, r0
 8002910:	4628      	mov	r0, r5
 8002912:	f7fe fd69 	bl	80013e8 <HAL_CRYP_Encrypt>
 8002916:	b910      	cbnz	r0, 800291e <CA_AES_GCM_Header_Append+0x48>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 8002918:	2000      	movs	r0, #0
        aes_ret_status = CA_AES_ERR_BAD_OPERATION;
      }
    }
  }
  return aes_ret_status;
}
 800291a:	b003      	add	sp, #12
 800291c:	bd30      	pop	{r4, r5, pc}
        aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 800291e:	f640 401e 	movw	r0, #3102	; 0xc1e
 8002922:	e7fa      	b.n	800291a <CA_AES_GCM_Header_Append+0x44>
      if (HAL_CRYP_Decrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 8002924:	4613      	mov	r3, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4628      	mov	r0, r5
 800292a:	f7fe fdeb 	bl	8001504 <HAL_CRYP_Decrypt>
 800292e:	e7f2      	b.n	8002916 <CA_AES_GCM_Header_Append+0x40>
    return CA_AES_ERR_BAD_PARAMETER;
 8002930:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002934:	e7f1      	b.n	800291a <CA_AES_GCM_Header_Append+0x44>

08002936 <CA_SHA256_Init>:
  *             *P_pSHA256ctx: The context that will be initialized. Not used
  * @retval     CA_HASH_SUCCESS: Operation Successful
  * @retval     CA_HASH_ERR_BAD_PARAMETER
  */
int32_t CA_SHA256_Init(CA_SHA256ctx_stt *P_pSHA256ctx)
{
 8002936:	b510      	push	{r4, lr}
  int32_t hash_ret_status;

  mbedtls_sha256_init(&(P_pSHA256ctx->hash_ctx));
 8002938:	f100 040c 	add.w	r4, r0, #12
 800293c:	4620      	mov	r0, r4
 800293e:	f003 fee9 	bl	8006714 <mbedtls_sha256_init>
  if (mbedtls_sha256_starts_ret(&(P_pSHA256ctx->hash_ctx), 0 /* is224 = 0 for SHA256 */) != 0)
 8002942:	2100      	movs	r1, #0
 8002944:	4620      	mov	r0, r4
 8002946:	f003 fee9 	bl	800671c <mbedtls_sha256_starts_ret>
  {
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 800294a:	f640 73a3 	movw	r3, #4003	; 0xfa3
  if (mbedtls_sha256_starts_ret(&(P_pSHA256ctx->hash_ctx), 0 /* is224 = 0 for SHA256 */) != 0)
 800294e:	2800      	cmp	r0, #0
}
 8002950:	bf18      	it	ne
 8002952:	4618      	movne	r0, r3
 8002954:	bd10      	pop	{r4, pc}

08002956 <CA_SHA256_Append>:
  * @retval     CA_HASH_ERR_BAD_OPERATION
  */
int32_t CA_SHA256_Append(CA_SHA256ctx_stt *P_pSHA256ctx,
                         const uint8_t *P_pInputBuffer,
                         int32_t P_inputSize)
{
 8002956:	b508      	push	{r3, lr}
  int32_t hash_ret_status;

  if (P_pInputBuffer == NULL)
 8002958:	b141      	cbz	r1, 800296c <CA_SHA256_Append+0x16>
  {
    return CA_HASH_ERR_BAD_PARAMETER;
  }

  if (mbedtls_sha256_update_ret(&(P_pSHA256ctx->hash_ctx), P_pInputBuffer, (size_t)P_inputSize) != 0)
 800295a:	300c      	adds	r0, #12
 800295c:	f003 ffda 	bl	8006914 <mbedtls_sha256_update_ret>
  {
    hash_ret_status = CA_HASH_ERR_BAD_OPERATION;
 8002960:	f640 73a1 	movw	r3, #4001	; 0xfa1
  if (mbedtls_sha256_update_ret(&(P_pSHA256ctx->hash_ctx), P_pInputBuffer, (size_t)P_inputSize) != 0)
 8002964:	2800      	cmp	r0, #0
    hash_ret_status = CA_HASH_ERR_BAD_OPERATION;
 8002966:	bf18      	it	ne
 8002968:	4618      	movne	r0, r3
  {
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 800296a:	bd08      	pop	{r3, pc}
    return CA_HASH_ERR_BAD_PARAMETER;
 800296c:	f640 70a3 	movw	r0, #4003	; 0xfa3
 8002970:	e7fb      	b.n	800296a <CA_SHA256_Append+0x14>

08002972 <CA_SHA256_Finish>:
  * @retval     CA_HASH_ERR_BAD_CONTEXT
  */
int32_t CA_SHA256_Finish(CA_SHA256ctx_stt *P_pSHA256ctx,
                         uint8_t *P_pOutputBuffer,
                         int32_t *P_pOutputSize)
{
 8002972:	b510      	push	{r4, lr}
 8002974:	4614      	mov	r4, r2
  int32_t hash_ret_status;

  if ((P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8002976:	b139      	cbz	r1, 8002988 <CA_SHA256_Finish+0x16>
 8002978:	b132      	cbz	r2, 8002988 <CA_SHA256_Finish+0x16>
  {
    return CA_HASH_ERR_BAD_PARAMETER;
  }

  if (mbedtls_sha256_finish_ret(&(P_pSHA256ctx->hash_ctx), P_pOutputBuffer) != 0)
 800297a:	300c      	adds	r0, #12
 800297c:	f004 f807 	bl	800698e <mbedtls_sha256_finish_ret>
 8002980:	b928      	cbnz	r0, 800298e <CA_SHA256_Finish+0x1c>
  {
    hash_ret_status = CA_HASH_ERR_BAD_CONTEXT;
  }
  else
  {
    *P_pOutputSize = (int32_t)CA_CRL_SHA256_SIZE;
 8002982:	2320      	movs	r3, #32
 8002984:	6023      	str	r3, [r4, #0]
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 8002986:	bd10      	pop	{r4, pc}
    return CA_HASH_ERR_BAD_PARAMETER;
 8002988:	f640 70a3 	movw	r0, #4003	; 0xfa3
 800298c:	e7fb      	b.n	8002986 <CA_SHA256_Finish+0x14>
    hash_ret_status = CA_HASH_ERR_BAD_CONTEXT;
 800298e:	f640 70a2 	movw	r0, #4002	; 0xfa2
 8002992:	e7f8      	b.n	8002986 <CA_SHA256_Finish+0x14>

08002994 <CA_ECCinitEC>:
  (void)P_pECctx;
  (void)P_pMemBuf;

  /* Nothing special to do, simply return success */
  return CA_ECC_SUCCESS;
}
 8002994:	2000      	movs	r0, #0
 8002996:	4770      	bx	lr

08002998 <CA_ECCfreeEC>:
 8002998:	2000      	movs	r0, #0
 800299a:	4770      	bx	lr

0800299c <CA_ECCinitPoint>:
  * @retval     CA_ECC_SUCCESS: Operation Successful
  * @retval     CA_ECC_ERR_BAD_PARAMETER: P_ppECPnt == NULL
  * @retval     CA_ERR_MEMORY_FAIL:: Not enough memory
  */
int32_t CA_ECCinitPoint(CA_ECpoint_stt **P_ppECPnt, const CA_EC_stt *P_pECctx, CA_membuf_stt *P_pMemBuf)
{
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	460d      	mov	r5, r1
  int32_t ecc_ret_status;

  /* Check parameters */
  if ((P_ppECPnt == NULL) || (P_pECctx == NULL) || (P_pMemBuf == NULL))
 80029a0:	4604      	mov	r4, r0
{
 80029a2:	4611      	mov	r1, r2
  if ((P_ppECPnt == NULL) || (P_pECctx == NULL) || (P_pMemBuf == NULL))
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d043      	beq.n	8002a30 <CA_ECCinitPoint+0x94>
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	d041      	beq.n	8002a30 <CA_ECCinitPoint+0x94>
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d03f      	beq.n	8002a30 <CA_ECCinitPoint+0x94>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  else
  {
    /* Allocate main structure */
    *P_ppECPnt = (CA_ECpoint_stt *)wrap_allocate_memory(sizeof(CA_ECpoint_stt), P_pMemBuf);
 80029b0:	2010      	movs	r0, #16
 80029b2:	f7ff fa00 	bl	8001db6 <wrap_allocate_memory>
 80029b6:	6020      	str	r0, [r4, #0]
    if (*P_ppECPnt  == NULL)
 80029b8:	b910      	cbnz	r0, 80029c0 <CA_ECCinitPoint+0x24>
    {
      ecc_ret_status = CA_ERR_MEMORY_FAIL;
 80029ba:	f240 30ed 	movw	r0, #1005	; 0x3ed
        }
      }
    }
  }
  return ecc_ret_status;
}
 80029be:	bd38      	pop	{r3, r4, r5, pc}
      (**P_ppECPnt).pmX = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 80029c0:	2008      	movs	r0, #8
 80029c2:	f7ff f9f8 	bl	8001db6 <wrap_allocate_memory>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	6018      	str	r0, [r3, #0]
      if ((**P_ppECPnt).pmX == NULL)
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d0f5      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
        (**P_ppECPnt).pmX->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 80029ce:	6868      	ldr	r0, [r5, #4]
 80029d0:	f7ff f9f1 	bl	8001db6 <wrap_allocate_memory>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	6010      	str	r0, [r2, #0]
        if ((**P_ppECPnt).pmX->pmDigit == NULL)
 80029da:	2800      	cmp	r0, #0
 80029dc:	d0ed      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
          (**P_ppECPnt).pmX->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 80029de:	686b      	ldr	r3, [r5, #4]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	7193      	strb	r3, [r2, #6]
          (**P_ppECPnt).pmY = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 80029e4:	2008      	movs	r0, #8
 80029e6:	f7ff f9e6 	bl	8001db6 <wrap_allocate_memory>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	6058      	str	r0, [r3, #4]
          if ((**P_ppECPnt).pmY == NULL)
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d0e3      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
            (**P_ppECPnt).pmY->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 80029f2:	6868      	ldr	r0, [r5, #4]
 80029f4:	f7ff f9df 	bl	8001db6 <wrap_allocate_memory>
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	6010      	str	r0, [r2, #0]
            if ((**P_ppECPnt).pmY->pmDigit == NULL)
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d0db      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
              (**P_ppECPnt).pmY->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002a02:	686b      	ldr	r3, [r5, #4]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	7193      	strb	r3, [r2, #6]
              (**P_ppECPnt).pmZ = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002a08:	2008      	movs	r0, #8
 8002a0a:	f7ff f9d4 	bl	8001db6 <wrap_allocate_memory>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	6098      	str	r0, [r3, #8]
              if ((**P_ppECPnt).pmZ == NULL)
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d0d1      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
                (**P_ppECPnt).pmZ->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 8002a16:	6868      	ldr	r0, [r5, #4]
 8002a18:	f7ff f9cd 	bl	8001db6 <wrap_allocate_memory>
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	6010      	str	r0, [r2, #0]
                if ((**P_ppECPnt).pmZ->pmDigit == NULL)
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d0c9      	beq.n	80029ba <CA_ECCinitPoint+0x1e>
                  (**P_ppECPnt).pmZ->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002a26:	686b      	ldr	r3, [r5, #4]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	7193      	strb	r3, [r2, #6]
                  ecc_ret_status =  CA_ECC_SUCCESS;
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e7c6      	b.n	80029be <CA_ECCinitPoint+0x22>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002a30:	f241 4054 	movw	r0, #5204	; 0x1454
  return ecc_ret_status;
 8002a34:	e7c3      	b.n	80029be <CA_ECCinitPoint+0x22>

08002a36 <CA_ECCfreePoint>:
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr

08002a3a <CA_ECCsetPointCoordinate>:
  */
int32_t CA_ECCsetPointCoordinate(CA_ECpoint_stt *P_pECPnt,
                                 CA_ECcoordinate_et P_Coordinate,
                                 const uint8_t *P_pCoordinateValue,
                                 int32_t P_coordinateSize)
{
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
  uint32_t wrap_ret_status;
  int32_t ecc_ret_status;

  /* Check parameters */
  if ((P_pECPnt == NULL) || (P_pCoordinateValue == NULL))
 8002a42:	b138      	cbz	r0, 8002a54 <CA_ECCsetPointCoordinate+0x1a>
 8002a44:	b131      	cbz	r1, 8002a54 <CA_ECCsetPointCoordinate+0x1a>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }

  /* Are we setting the X coordinate ?*/
  if (P_Coordinate == CA_E_ECC_POINT_COORDINATE_X)
 8002a46:	b944      	cbnz	r4, 8002a5a <CA_ECCsetPointCoordinate+0x20>
  {
    /* Set X */
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmX,
 8002a48:	6800      	ldr	r0, [r0, #0]
 8002a4a:	f7ff f9c4 	bl	8001dd6 <wrap_uint8_to_BigNum>
                                           P_pCoordinateValue,
                                           P_coordinateSize);
    if (wrap_ret_status == WRAP_SUCCESS)
 8002a4e:	b908      	cbnz	r0, 8002a54 <CA_ECCsetPointCoordinate+0x1a>
    {
      ecc_ret_status = CA_ECC_SUCCESS;
 8002a50:	2000      	movs	r0, #0
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }

  return ecc_ret_status;
}
 8002a52:	bd10      	pop	{r4, pc}
      ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002a54:	f241 4054 	movw	r0, #5204	; 0x1454
 8002a58:	e7fb      	b.n	8002a52 <CA_ECCsetPointCoordinate+0x18>
  else if (P_Coordinate == CA_E_ECC_POINT_COORDINATE_Y)
 8002a5a:	2c01      	cmp	r4, #1
 8002a5c:	d1fa      	bne.n	8002a54 <CA_ECCsetPointCoordinate+0x1a>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmY,
 8002a5e:	6840      	ldr	r0, [r0, #4]
 8002a60:	e7f3      	b.n	8002a4a <CA_ECCsetPointCoordinate+0x10>
	...

08002a64 <CA_ECDSAinitSign>:
  * @param[in]  *P_pMemBuf: NOT USED
  * @retval CA_ECC_SUCCESS: on Success
  * @retval CA_ECC_ERR_BAD_PARAMETER: P_ppSignature == NULL
  */
int32_t CA_ECDSAinitSign(CA_ECDSAsignature_stt **P_ppSignature, const CA_EC_stt *P_pECctx, CA_membuf_stt *P_pMemBuf)
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	4617      	mov	r7, r2
  int32_t ecc_ret_status;
  HAL_StatusTypeDef hal_ret_status;

  /* Check parameters */
  if (P_ppSignature == NULL)
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d03b      	beq.n	8002ae8 <CA_ECDSAinitSign+0x84>
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  else
  {
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.Instance = CA_PKA_INSTANCE;
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <CA_ECDSAinitSign+0x90>)
 8002a72:	630b      	str	r3, [r1, #48]	; 0x30
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.State = HAL_PKA_STATE_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.ErrorCode = HAL_PKA_ERROR_NONE;
    /* HAL initialisation */
    hal_ret_status = HAL_PKA_Init(&((CA_EC_stt *)(uint32_t)P_pECctx)->hpka);
 8002a7a:	f101 0030 	add.w	r0, r1, #48	; 0x30
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.ErrorCode = HAL_PKA_ERROR_NONE;
 8002a7e:	638b      	str	r3, [r1, #56]	; 0x38
    hal_ret_status = HAL_PKA_Init(&((CA_EC_stt *)(uint32_t)P_pECctx)->hpka);
 8002a80:	f7fe ff88 	bl	8001994 <HAL_PKA_Init>
    if (hal_ret_status == HAL_OK)
 8002a84:	4605      	mov	r5, r0
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d131      	bne.n	8002aee <CA_ECDSAinitSign+0x8a>
    {
      /* Allocate main structure */
      *P_ppSignature = (CA_ECDSAsignature_stt *)wrap_allocate_memory(sizeof(CA_ECDSAsignature_stt), P_pMemBuf);
 8002a8a:	4639      	mov	r1, r7
 8002a8c:	2008      	movs	r0, #8
 8002a8e:	f7ff f992 	bl	8001db6 <wrap_allocate_memory>
 8002a92:	6030      	str	r0, [r6, #0]
      if (*P_ppSignature  == NULL)
 8002a94:	b910      	cbnz	r0, 8002a9c <CA_ECDSAinitSign+0x38>
      {
        ecc_ret_status = CA_ERR_MEMORY_FAIL;
 8002a96:	f240 30ed 	movw	r0, #1005	; 0x3ed
    {
      ecc_ret_status = CA_ECC_ERR_BAD_CONTEXT;
    }
  }
  return ecc_ret_status;
}
 8002a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (**P_ppSignature).pmR = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002a9c:	2008      	movs	r0, #8
 8002a9e:	f7ff f98a 	bl	8001db6 <wrap_allocate_memory>
 8002aa2:	6833      	ldr	r3, [r6, #0]
 8002aa4:	6018      	str	r0, [r3, #0]
        if ((**P_ppSignature).pmR == NULL)
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d0f5      	beq.n	8002a96 <CA_ECDSAinitSign+0x32>
          (**P_ppSignature).pmR->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 8002aaa:	6860      	ldr	r0, [r4, #4]
 8002aac:	f7ff f983 	bl	8001db6 <wrap_allocate_memory>
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	6010      	str	r0, [r2, #0]
          if ((**P_ppSignature).pmR->pmDigit == NULL)
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0ed      	beq.n	8002a96 <CA_ECDSAinitSign+0x32>
            (**P_ppSignature).pmR->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	7193      	strb	r3, [r2, #6]
            (**P_ppSignature).pmS = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002ac0:	2008      	movs	r0, #8
 8002ac2:	f7ff f978 	bl	8001db6 <wrap_allocate_memory>
 8002ac6:	6833      	ldr	r3, [r6, #0]
 8002ac8:	6058      	str	r0, [r3, #4]
            if ((**P_ppSignature).pmS == NULL)
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d0e3      	beq.n	8002a96 <CA_ECDSAinitSign+0x32>
              (**P_ppSignature).pmS->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize),
 8002ace:	6860      	ldr	r0, [r4, #4]
 8002ad0:	f7ff f971 	bl	8001db6 <wrap_allocate_memory>
 8002ad4:	6833      	ldr	r3, [r6, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	6010      	str	r0, [r2, #0]
              if ((**P_ppSignature).pmS->pmDigit == NULL)
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d0db      	beq.n	8002a96 <CA_ECDSAinitSign+0x32>
                (**P_ppSignature).pmS->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	7193      	strb	r3, [r2, #6]
                ecc_ret_status =  CA_ECC_SUCCESS;
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	e7d8      	b.n	8002a9a <CA_ECDSAinitSign+0x36>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002ae8:	f241 4054 	movw	r0, #5204	; 0x1454
 8002aec:	e7d5      	b.n	8002a9a <CA_ECDSAinitSign+0x36>
      ecc_ret_status = CA_ECC_ERR_BAD_CONTEXT;
 8002aee:	f241 4053 	movw	r0, #5203	; 0x1453
  return ecc_ret_status;
 8002af2:	e7d2      	b.n	8002a9a <CA_ECDSAinitSign+0x36>
 8002af4:	58002000 	.word	0x58002000

08002af8 <CA_ECDSAfreeSign>:
 8002af8:	2000      	movs	r0, #0
 8002afa:	4770      	bx	lr

08002afc <CA_ECDSAsetSignature>:
  */
int32_t CA_ECDSAsetSignature(CA_ECDSAsignature_stt *P_pSignature,
                             CA_ECDSAsignValues_et P_RorS,
                             const uint8_t *P_pValue,
                             int32_t P_valueSize)
{
 8002afc:	b510      	push	{r4, lr}
 8002afe:	460c      	mov	r4, r1
 8002b00:	4611      	mov	r1, r2
 8002b02:	461a      	mov	r2, r3
  uint8_t wrap_ret_status = WRAP_SUCCESS;
  int32_t ecc_ret_status = CA_ECC_SUCCESS;

  /* Check parameters */
  if ((P_pValue == NULL) || (P_pSignature == NULL))
 8002b04:	b131      	cbz	r1, 8002b14 <CA_ECDSAsetSignature+0x18>
 8002b06:	b128      	cbz	r0, 8002b14 <CA_ECDSAsetSignature+0x18>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }
  /* Are we setting R ? */
  if (P_RorS == CA_E_ECDSA_SIGNATURE_R_VALUE)
 8002b08:	b93c      	cbnz	r4, 8002b1a <CA_ECDSAsetSignature+0x1e>
  {
    /* Set R */
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmR, P_pValue, P_valueSize);
 8002b0a:	6800      	ldr	r0, [r0, #0]
  }
  /* Or S ? */
  else if (P_RorS == CA_E_ECDSA_SIGNATURE_S_VALUE)
  {
    /* Set S */
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8002b0c:	f7ff f963 	bl	8001dd6 <wrap_uint8_to_BigNum>
  else
  {
    /* Did not find what to set, return error */
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  if (wrap_ret_status == WRAP_FAILURE)
 8002b10:	2801      	cmp	r0, #1
 8002b12:	d106      	bne.n	8002b22 <CA_ECDSAsetSignature+0x26>
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002b14:	f241 4054 	movw	r0, #5204	; 0x1454
  }
  return ecc_ret_status;
}
 8002b18:	bd10      	pop	{r4, pc}
  else if (P_RorS == CA_E_ECDSA_SIGNATURE_S_VALUE)
 8002b1a:	2c01      	cmp	r4, #1
 8002b1c:	d1fa      	bne.n	8002b14 <CA_ECDSAsetSignature+0x18>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8002b1e:	6840      	ldr	r0, [r0, #4]
 8002b20:	e7f4      	b.n	8002b0c <CA_ECDSAsetSignature+0x10>
 8002b22:	2000      	movs	r0, #0
 8002b24:	e7f8      	b.n	8002b18 <CA_ECDSAsetSignature+0x1c>

08002b26 <CA_ECDSAverify>:
int32_t CA_ECDSAverify(const uint8_t      *P_pDigest,
                       int32_t             P_digestSize,
                       const CA_ECDSAsignature_stt   *P_pSignature,
                       const CA_ECDSAverifyCtx_stt *P_pVerifyCtx,
                       CA_membuf_stt *P_pMemBuf)
{
 8002b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f2ad 7dd4 	subw	sp, sp, #2004	; 0x7d4
  int32_t ecdsa_ret_status = CA_SIGNATURE_INVALID;
  uint8_t wrap_ret_status;
  HAL_StatusTypeDef hal_ret_status;
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
  uint8_t wrap_R[384] = {0};
 8002b2e:	2400      	movs	r4, #0
{
 8002b30:	e9cd 2001 	strd	r2, r0, [sp, #4]
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
 8002b34:	2100      	movs	r1, #0
 8002b36:	2234      	movs	r2, #52	; 0x34
 8002b38:	a807      	add	r0, sp, #28
  uint8_t wrap_R[384] = {0};
 8002b3a:	af14      	add	r7, sp, #80	; 0x50
{
 8002b3c:	461d      	mov	r5, r3
  uint8_t wrap_S[384] = {0};
 8002b3e:	f50d 7be8 	add.w	fp, sp, #464	; 0x1d0
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
 8002b42:	f003 ffc3 	bl	8006acc <memset>
  uint8_t wrap_R[384] = {0};
 8002b46:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	a815      	add	r0, sp, #84	; 0x54
 8002b4e:	603c      	str	r4, [r7, #0]
  uint8_t wrap_X[384] = {0};
 8002b50:	f50d 7a54 	add.w	sl, sp, #848	; 0x350
  uint8_t wrap_R[384] = {0};
 8002b54:	f003 ffba 	bl	8006acc <memset>
  uint8_t wrap_S[384] = {0};
 8002b58:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	a875      	add	r0, sp, #468	; 0x1d4
 8002b60:	f8cb 4000 	str.w	r4, [fp]
  uint8_t wrap_Y[384] = {0};
 8002b64:	f50d 699a 	add.w	r9, sp, #1232	; 0x4d0
  uint8_t wrap_S[384] = {0};
 8002b68:	f003 ffb0 	bl	8006acc <memset>
  uint8_t wrap_X[384] = {0};
 8002b6c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b70:	4621      	mov	r1, r4
 8002b72:	a8d5      	add	r0, sp, #852	; 0x354
 8002b74:	f8ca 4000 	str.w	r4, [sl]
  uint8_t wrap_absA[384] = {0};
 8002b78:	f50d 68ca 	add.w	r8, sp, #1616	; 0x650
  uint8_t wrap_X[384] = {0};
 8002b7c:	f003 ffa6 	bl	8006acc <memset>
  uint8_t wrap_Y[384] = {0};
 8002b80:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b84:	4621      	mov	r1, r4
 8002b86:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 8002b8a:	f8c9 4000 	str.w	r4, [r9]
 8002b8e:	f003 ff9d 	bl	8006acc <memset>
  uint8_t wrap_absA[384] = {0};
 8002b92:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b96:	4621      	mov	r1, r4
 8002b98:	f20d 6054 	addw	r0, sp, #1620	; 0x654
 8002b9c:	f8c8 4000 	str.w	r4, [r8]
 8002ba0:	f003 ff94 	bl	8006acc <memset>

  (void)P_digestSize;
  (void)P_pMemBuf;

  /* Check parameters */
  if ((P_pDigest == NULL)
 8002ba4:	9b02      	ldr	r3, [sp, #8]
  __IO uint8_t sign_check_status = 0x00U;
 8002ba6:	f88d 401b 	strb.w	r4, [sp, #27]
  if ((P_pDigest == NULL)
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80d0 	beq.w	8002d50 <CA_ECDSAverify+0x22a>
      || (P_pSignature == NULL)
 8002bb0:	9b01      	ldr	r3, [sp, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80cc 	beq.w	8002d50 <CA_ECDSAverify+0x22a>
      || (P_pVerifyCtx == NULL))
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	f000 80c9 	beq.w	8002d50 <CA_ECDSAverify+0x22a>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }

  if (P_pVerifyCtx->pmPubKey == NULL)
 8002bbe:	682a      	ldr	r2, [r5, #0]
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	f000 80c5 	beq.w	8002d50 <CA_ECDSAverify+0x22a>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }
  if (((uint32_t)(P_pVerifyCtx->pmPubKey->pmX->mNumDigits) + (uint32_t)(P_pVerifyCtx->pmPubKey->pmY->mNumDigits))
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	6852      	ldr	r2, [r2, #4]
 8002bca:	889b      	ldrh	r3, [r3, #4]
 8002bcc:	8892      	ldrh	r2, [r2, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	2b61      	cmp	r3, #97	; 0x61
 8002bd2:	f200 80bd 	bhi.w	8002d50 <CA_ECDSAverify+0x22a>
    return CA_ECC_ERR_BAD_PARAMETER;
  }

  /* Compute |a| to transmit it to PKA */
  wrap_ret_status = wrap_AbsA(wrap_absA,
                              P_pVerifyCtx->pmEC->pmA,
 8002bd6:	686e      	ldr	r6, [r5, #4]
  wrap_ret_status = wrap_AbsA(wrap_absA,
 8002bd8:	6833      	ldr	r3, [r6, #0]
      || (P_pA == NULL)
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80bb 	beq.w	8002d56 <CA_ECDSAverify+0x230>
  wrap_ret_status = wrap_AbsA(wrap_absA,
 8002be0:	6931      	ldr	r1, [r6, #16]
      || (P_pB == NULL))
 8002be2:	2900      	cmp	r1, #0
 8002be4:	f000 80b7 	beq.w	8002d56 <CA_ECDSAverify+0x230>
  if (P_sizeA > P_sizeB)
 8002be8:	68f2      	ldr	r2, [r6, #12]
 8002bea:	6870      	ldr	r0, [r6, #4]
 8002bec:	4282      	cmp	r2, r0
 8002bee:	bf38      	it	cc
 8002bf0:	4602      	movcc	r2, r0
  if (wrap_maxsize > P_pSizeR)
 8002bf2:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 8002bf6:	f200 80ae 	bhi.w	8002d56 <CA_ECDSAverify+0x230>
  wrap_upper = memcmp(P_pA, P_pB, wrap_maxsize);
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002c00:	9303      	str	r3, [sp, #12]
 8002c02:	f003 ff47 	bl	8006a94 <memcmp>
  if (wrap_upper > 0)
 8002c06:	42a0      	cmp	r0, r4
 8002c08:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8002c0c:	9a05      	ldr	r2, [sp, #20]
 8002c0e:	dc72      	bgt.n	8002cf6 <CA_ECDSAverify+0x1d0>
  else if (wrap_upper < 0)
 8002c10:	f040 8086 	bne.w	8002d20 <CA_ECDSAverify+0x1fa>
    (void)memset(P_pR, 0, P_pSizeR);
 8002c14:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f003 ff56 	bl	8006acc <memset>
    *P_pSign = 0U; /* Positive */
 8002c20:	2200      	movs	r2, #0
 8002c22:	e010      	b.n	8002c46 <CA_ECDSAverify+0x120>
      if (P_pA[i - 1U] >= P_pB[i - 1U])
 8002c24:	3a01      	subs	r2, #1
 8002c26:	f813 e002 	ldrb.w	lr, [r3, r2]
 8002c2a:	f811 c002 	ldrb.w	ip, [r1, r2]
 8002c2e:	ebae 0404 	sub.w	r4, lr, r4
 8002c32:	eba4 040c 	sub.w	r4, r4, ip
 8002c36:	b2e4      	uxtb	r4, r4
 8002c38:	45e6      	cmp	lr, ip
        P_pR[i - 1U] = P_pA[i - 1U] - P_pB[i - 1U] - wrap_hold;
 8002c3a:	5484      	strb	r4, [r0, r2]
        wrap_hold = 0U;
 8002c3c:	bf2c      	ite	cs
 8002c3e:	2400      	movcs	r4, #0
        wrap_hold = 1U;
 8002c40:	2401      	movcc	r4, #1
    for (i = wrap_maxsize; i > 0U; i--)
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d1ee      	bne.n	8002c24 <CA_ECDSAverify+0xfe>
                              &wrap_sign);
  if (wrap_ret_status == WRAP_SUCCESS)
  {

    /* Fill PkaVerify structure */
    PkaVerify.primeOrderSize = (uint32_t)(P_pVerifyCtx->pmEC->mNsize);
 8002c46:	69f3      	ldr	r3, [r6, #28]
 8002c48:	9307      	str	r3, [sp, #28]
    PkaVerify.modulusSize = (uint32_t)(P_pVerifyCtx->pmEC->mPsize);
 8002c4a:	6973      	ldr	r3, [r6, #20]
    PkaVerify.coefSign =        wrap_sign;
    PkaVerify.coef =            wrap_absA;
 8002c4c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    PkaVerify.coefSign =        wrap_sign;
 8002c50:	e9cd 3208 	strd	r3, r2, [sp, #32]
    PkaVerify.modulus =         P_pVerifyCtx->pmEC->pmP;
 8002c54:	6933      	ldr	r3, [r6, #16]
 8002c56:	930b      	str	r3, [sp, #44]	; 0x2c
    PkaVerify.basePointX =      P_pVerifyCtx->pmEC->pmGx;
 8002c58:	6a33      	ldr	r3, [r6, #32]
 8002c5a:	930c      	str	r3, [sp, #48]	; 0x30
    PkaVerify.basePointY =      P_pVerifyCtx->pmEC->pmGy;
 8002c5c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002c5e:	930d      	str	r3, [sp, #52]	; 0x34
    PkaVerify.primeOrder =      P_pVerifyCtx->pmEC->pmN;
 8002c60:	69b3      	ldr	r3, [r6, #24]
 8002c62:	9313      	str	r3, [sp, #76]	; 0x4c
    PkaVerify.hash =            P_pDigest;
 8002c64:	9b02      	ldr	r3, [sp, #8]
 8002c66:	9312      	str	r3, [sp, #72]	; 0x48

    /* Convert R to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_R, P_pSignature->pmR, NULL);
 8002c68:	9b01      	ldr	r3, [sp, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	4638      	mov	r0, r7
 8002c70:	f7ff f8fd 	bl	8001e6e <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c74:	b900      	cbnz	r0, 8002c78 <CA_ECDSAverify+0x152>
    {
      PkaVerify.RSign = (const uint8_t *)wrap_R;
 8002c76:	9710      	str	r7, [sp, #64]	; 0x40
    }
    /* Convert S to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_S, P_pSignature->pmS, NULL);
 8002c78:	9b01      	ldr	r3, [sp, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	4658      	mov	r0, fp
 8002c80:	f7ff f8f5 	bl	8001e6e <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c84:	b908      	cbnz	r0, 8002c8a <CA_ECDSAverify+0x164>
    {
      PkaVerify.SSign = (const uint8_t *)wrap_S;
 8002c86:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    }
    /* Convert X to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_X, P_pVerifyCtx->pmPubKey->pmX, NULL);
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	4650      	mov	r0, sl
 8002c92:	f7ff f8ec 	bl	8001e6e <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c96:	b908      	cbnz	r0, 8002c9c <CA_ECDSAverify+0x176>
    {
      PkaVerify.pPubKeyCurvePtX = (const uint8_t *)wrap_X;
 8002c98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    }
    /* Convert Y to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_Y, P_pVerifyCtx->pmPubKey->pmY, NULL);
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	4648      	mov	r0, r9
 8002ca4:	f7ff f8e3 	bl	8001e6e <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002ca8:	b908      	cbnz	r0, 8002cae <CA_ECDSAverify+0x188>
    {
      PkaVerify.pPubKeyCurvePtY = (const uint8_t *)wrap_Y;
 8002caa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    }

    /* Launch the verification */
    hal_ret_status = HAL_PKA_ECDSAVerif(&P_pVerifyCtx->pmEC->hpka, &PkaVerify, 5000);
 8002cae:	6868      	ldr	r0, [r5, #4]
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	a907      	add	r1, sp, #28
 8002cb6:	3030      	adds	r0, #48	; 0x30
 8002cb8:	f7ff f800 	bl	8001cbc <HAL_PKA_ECDSAVerif>
    if (hal_ret_status == HAL_OK)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d141      	bne.n	8002d44 <CA_ECDSAverify+0x21e>
    {
      /* Check the signature */
      if (HAL_PKA_ECDSAVerif_IsValidSignature(&P_pVerifyCtx->pmEC->hpka) == 1UL)
 8002cc0:	6868      	ldr	r0, [r5, #4]
 8002cc2:	3030      	adds	r0, #48	; 0x30
 8002cc4:	f7fe fea2 	bl	8001a0c <HAL_PKA_ECDSAVerif_IsValidSignature>
 8002cc8:	2801      	cmp	r0, #1
 8002cca:	d109      	bne.n	8002ce0 <CA_ECDSAverify+0x1ba>
      {
        /* Double check ECDSA signature to avoid basic HW attack */
        p_sign_PKA = (uint8_t *) & (P_pVerifyCtx->pmEC->hpka).Instance->RAM[PKA_ECDSA_VERIF_OUT_SIGNATURE_R];
 8002ccc:	686b      	ldr	r3, [r5, #4]
 8002cce:	6b18      	ldr	r0, [r3, #48]	; 0x30

        /* Signature comparison LSB vs MSB */
        j = PkaVerify.primeOrderSize - 1U;
        for (i = 0U; i < PkaVerify.primeOrderSize; i++)
 8002cd0:	9b07      	ldr	r3, [sp, #28]
 8002cd2:	4403      	add	r3, r0
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d127      	bne.n	8002d28 <CA_ECDSAverify+0x202>
          sign_check_status |= wrap_R[i] ^ IMAGE_VALID ^ p_sign_PKA[j];
          j--;
        }

        /* Loop fully executed ==> no basic HW attack */
        if ((sign_check_status == IMAGE_VALID) && (i == PkaVerify.primeOrderSize))
 8002cd8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002cdc:	2b55      	cmp	r3, #85	; 0x55
 8002cde:	d034      	beq.n	8002d4a <CA_ECDSAverify+0x224>
        {
          ecdsa_ret_status = CA_SIGNATURE_VALID;
        }
        else
        {
          ecdsa_ret_status = CA_SIGNATURE_INVALID;
 8002ce0:	f44f 747b 	mov.w	r4, #1004	; 0x3ec
      /* PKA operation returns error */
      ecdsa_ret_status = CA_ECC_ERR_BAD_CONTEXT;
    }

    /* Deinitialize the CA_PKA_INSTANCE */
    hal_ret_status = HAL_PKA_DeInit(&P_pVerifyCtx->pmEC->hpka);
 8002ce4:	6868      	ldr	r0, [r5, #4]
 8002ce6:	3030      	adds	r0, #48	; 0x30
 8002ce8:	f7fe fe7c 	bl	80019e4 <HAL_PKA_DeInit>
  {
    ecdsa_ret_status =  CA_ECC_ERR_BAD_CONTEXT;
  }

  return ecdsa_ret_status;
}
 8002cec:	4620      	mov	r0, r4
 8002cee:	f20d 7dd4 	addw	sp, sp, #2004	; 0x7d4
 8002cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	e7a3      	b.n	8002c42 <CA_ECDSAverify+0x11c>
      if (P_pB[i - 1U] >= P_pA[i - 1U])
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	f811 e002 	ldrb.w	lr, [r1, r2]
 8002d00:	f813 c002 	ldrb.w	ip, [r3, r2]
 8002d04:	ebae 0000 	sub.w	r0, lr, r0
 8002d08:	eba0 000c 	sub.w	r0, r0, ip
 8002d0c:	b2c0      	uxtb	r0, r0
 8002d0e:	45e6      	cmp	lr, ip
        P_pR[i - 1U] = P_pB[i - 1U] - P_pA[i - 1U] - wrap_hold;
 8002d10:	54a0      	strb	r0, [r4, r2]
        wrap_hold = 0U;
 8002d12:	bf2c      	ite	cs
 8002d14:	2000      	movcs	r0, #0
        wrap_hold = 1U;
 8002d16:	2001      	movcc	r0, #1
    for (i = wrap_maxsize; i > 0U; i--)
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d1ee      	bne.n	8002cfa <CA_ECDSAverify+0x1d4>
    *P_pSign = 1U; /* Negative */
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	e792      	b.n	8002c46 <CA_ECDSAverify+0x120>
  uint8_t wrap_hold = 0U;
 8002d20:	2000      	movs	r0, #0
 8002d22:	f50d 64ca 	add.w	r4, sp, #1616	; 0x650
 8002d26:	e7f7      	b.n	8002d18 <CA_ECDSAverify+0x1f2>
          sign_check_status |= wrap_R[i] ^ IMAGE_VALID ^ p_sign_PKA[j];
 8002d28:	f893 455b 	ldrb.w	r4, [r3, #1371]	; 0x55b
 8002d2c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8002d30:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8002d34:	4062      	eors	r2, r4
 8002d36:	f082 0255 	eor.w	r2, r2, #85	; 0x55
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	f88d 201b 	strb.w	r2, [sp, #27]
        for (i = 0U; i < PkaVerify.primeOrderSize; i++)
 8002d40:	3b01      	subs	r3, #1
 8002d42:	e7c7      	b.n	8002cd4 <CA_ECDSAverify+0x1ae>
      ecdsa_ret_status = CA_ECC_ERR_BAD_CONTEXT;
 8002d44:	f241 4453 	movw	r4, #5203	; 0x1453
 8002d48:	e7cc      	b.n	8002ce4 <CA_ECDSAverify+0x1be>
          ecdsa_ret_status = CA_SIGNATURE_VALID;
 8002d4a:	f240 34eb 	movw	r4, #1003	; 0x3eb
 8002d4e:	e7c9      	b.n	8002ce4 <CA_ECDSAverify+0x1be>
    return CA_ECC_ERR_BAD_PARAMETER;
 8002d50:	f241 4454 	movw	r4, #5204	; 0x1454
 8002d54:	e7ca      	b.n	8002cec <CA_ECDSAverify+0x1c6>
    ecdsa_ret_status =  CA_ECC_ERR_BAD_CONTEXT;
 8002d56:	f241 4453 	movw	r4, #5203	; 0x1453
 8002d5a:	e7c7      	b.n	8002cec <CA_ECDSAverify+0x1c6>

08002d5c <CA_ECCvalidatePubKey>:
  (void)P_pECctx;
  (void)P_pMemBuf;

  /* Nothing special to do, simply return success */
  return CA_ECC_SUCCESS;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr

08002d60 <CA_Init>:
  {
    ecc_ret_status = CA_SUCCESS;
  }
#endif /* CA_MBED_CRYPTOLIB_SUPP && CA_USES_PSA_CRYPTO */
  return ecc_ret_status;
}
 8002d60:	2000      	movs	r0, #0
 8002d62:	4770      	bx	lr

08002d64 <CA_DeInit>:
 8002d64:	2000      	movs	r0, #0
 8002d66:	4770      	bx	lr

08002d68 <KMS_DerX962_OctetStringDataOffset>:
CK_RV KMS_DerX962_OctetStringDataOffset(uint8_t *pDER, uint32_t *pOff)
{
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  uint8_t *ptr = pDER;

  if (ptr[0] == KMS_DER_OCTET_STRING)
 8002d68:	7803      	ldrb	r3, [r0, #0]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d10b      	bne.n	8002d86 <KMS_DerX962_OctetStringDataOffset+0x1e>
     * more bytes length otherwise: first byte is 0x80 + number of bytes that will encode length
     * ex: Length = 0x23 => 1 byte length: 0x23
     *        Length = 0x89 => 2 bytes length: 0x81 0x89
     *        Length = 0x123 => 3 bytes length: 0x82 0x01 0x23
     */
    if ((ptr[0] & 0x80U) == 0x80U)
 8002d6e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8002d72:	7843      	ldrb	r3, [r0, #1]
 8002d74:	2a00      	cmp	r2, #0
    {
      *pOff = 2UL + ((uint32_t)(ptr[0]) & 0x7FUL);
 8002d76:	bfba      	itte	lt
 8002d78:	f003 037f 	andlt.w	r3, r3, #127	; 0x7f
 8002d7c:	3302      	addlt	r3, #2
    }
    else
    {
      *pOff = 2;
 8002d7e:	2302      	movge	r3, #2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	2000      	movs	r0, #0
 8002d84:	4770      	bx	lr
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002d86:	2006      	movs	r0, #6
    }
    e_ret_status = CKR_OK;
  }
  return e_ret_status;
}
 8002d88:	4770      	bx	lr

08002d8a <KMS_DerX962_ExtractPublicKeyCoord>:
  * @param  ksize Size of each coordinate of the public key
  * @retval CKR_OK
  *         CKR_FUNCTION_FAILED
  */
CK_RV KMS_DerX962_ExtractPublicKeyCoord(uint8_t *pDER, uint8_t *pX, uint8_t *pY, uint32_t ksize)
{
 8002d8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d8e:	4689      	mov	r9, r1
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  uint32_t offset_for_data;

  /* We expect an EC Point in DER format uncompressed */
  if (KMS_DerX962_OctetStringDataOffset(pDER, &offset_for_data) == CKR_OK)
 8002d90:	a901      	add	r1, sp, #4
{
 8002d92:	4606      	mov	r6, r0
 8002d94:	4690      	mov	r8, r2
 8002d96:	461f      	mov	r7, r3
  if (KMS_DerX962_OctetStringDataOffset(pDER, &offset_for_data) == CKR_OK)
 8002d98:	f7ff ffe6 	bl	8002d68 <KMS_DerX962_OctetStringDataOffset>
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	b998      	cbnz	r0, 8002dc8 <KMS_DerX962_ExtractPublicKeyCoord+0x3e>
  {
    if (KMS_IS_X962_UNCOMPRESSED_FORM(pDER[offset_for_data]))
 8002da0:	9c01      	ldr	r4, [sp, #4]
 8002da2:	5d33      	ldrb	r3, [r6, r4]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d10f      	bne.n	8002dc8 <KMS_DerX962_ExtractPublicKeyCoord+0x3e>
    {
      /* Copy the Pub_x */
      (void)memcpy(pX, &pDER[offset_for_data + 1UL], (size_t)ksize);
 8002da8:	3401      	adds	r4, #1
 8002daa:	463a      	mov	r2, r7
 8002dac:	1931      	adds	r1, r6, r4
 8002dae:	4648      	mov	r0, r9
 8002db0:	f003 fe7e 	bl	8006ab0 <memcpy>

      /* Copy the Pub_y */
      (void)memcpy(pY, &pDER[offset_for_data + 1UL + ksize], (size_t)ksize);
 8002db4:	19e1      	adds	r1, r4, r7
 8002db6:	463a      	mov	r2, r7
 8002db8:	4431      	add	r1, r6
 8002dba:	4640      	mov	r0, r8
 8002dbc:	f003 fe78 	bl	8006ab0 <memcpy>

      e_ret_status = CKR_OK;
    }
  }
  return e_ret_status;
}
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	b003      	add	sp, #12
 8002dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002dc8:	2506      	movs	r5, #6
  return e_ret_status;
 8002dca:	e7f9      	b.n	8002dc0 <KMS_DerX962_ExtractPublicKeyCoord+0x36>

08002dcc <KMS_DigestInit>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_MECHANISM_INVALID
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV     KMS_DigestInit(CK_SESSION_HANDLE hSession,  CK_MECHANISM_PTR pMechanism)
{
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;

  if (!KMS_IS_INITIALIZED())
 8002dd0:	4c1c      	ldr	r4, [pc, #112]	; (8002e44 <KMS_DigestInit+0x78>)
 8002dd2:	7823      	ldrb	r3, [r4, #0]
{
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	460f      	mov	r7, r1
  if (!KMS_IS_INITIALIZED())
 8002dd8:	b34b      	cbz	r3, 8002e2e <KMS_DigestInit+0x62>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002dda:	f001 fc07 	bl	80045ec <KMS_CheckSessionHdle>
 8002dde:	bb48      	cbnz	r0, 8002e34 <KMS_DigestInit+0x68>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8002de0:	f108 35ff 	add.w	r5, r8, #4294967295
 8002de4:	2324      	movs	r3, #36	; 0x24
 8002de6:	fb03 4505 	mla	r5, r3, r5, r4
 8002dea:	68ec      	ldr	r4, [r5, #12]
 8002dec:	bb14      	cbnz	r4, 8002e34 <KMS_DigestInit+0x68>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check parameter */
  else if (pMechanism == NULL_PTR)
 8002dee:	b31f      	cbz	r7, 8002e38 <KMS_DigestInit+0x6c>
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  else
  {
    switch (pMechanism->mechanism)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8002df6:	d121      	bne.n	8002e3c <KMS_DigestInit+0x70>
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        /* Allocate context for SHA256 */
        phash_ctx = KMS_Alloc(hSession, sizeof(kms_sha256_ctx_t));
 8002df8:	2178      	movs	r1, #120	; 0x78
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	f001 fd7c 	bl	80048f8 <KMS_Alloc>
        if (phash_ctx != NULL_PTR)
 8002e00:	4606      	mov	r6, r0
 8002e02:	b1e8      	cbz	r0, 8002e40 <KMS_DigestInit+0x74>
        {
          KMS_GETSESSION(hSession).pCtx = phash_ctx;
          KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	622b      	str	r3, [r5, #32]

          phash_ctx->ca_ctx.mFlags = CA_E_HASH_DEFAULT;
          phash_ctx->ca_ctx.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 8002e08:	2320      	movs	r3, #32
          KMS_GETSESSION(hSession).pCtx = phash_ctx;
 8002e0a:	62a8      	str	r0, [r5, #40]	; 0x28
          phash_ctx->ca_ctx.mFlags = CA_E_HASH_DEFAULT;
 8002e0c:	7104      	strb	r4, [r0, #4]
          phash_ctx->ca_ctx.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 8002e0e:	6083      	str	r3, [r0, #8]

          /* Initialize SHA256 processing */
          if (CA_SHA256_Init(&(phash_ctx->ca_ctx)) == CA_HASH_SUCCESS)
 8002e10:	f7ff fd91 	bl	8002936 <CA_SHA256_Init>
 8002e14:	b920      	cbnz	r0, 8002e20 <KMS_DigestInit+0x54>
    }
  }

  if (e_ret_status == CKR_OK)
  {
    KMS_GETSESSION(hSession).state = KMS_SESSION_DIGEST;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60eb      	str	r3, [r5, #12]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            KMS_Free(hSession, phash_ctx);
 8002e20:	4631      	mov	r1, r6
 8002e22:	4640      	mov	r0, r8
 8002e24:	f001 fd8c 	bl	8004940 <KMS_Free>
            KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8002e28:	62ac      	str	r4, [r5, #40]	; 0x28
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002e2a:	2406      	movs	r4, #6
 8002e2c:	e7f5      	b.n	8002e1a <KMS_DigestInit+0x4e>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8002e2e:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8002e32:	e7f2      	b.n	8002e1a <KMS_DigestInit+0x4e>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8002e34:	24b3      	movs	r4, #179	; 0xb3
 8002e36:	e7f0      	b.n	8002e1a <KMS_DigestInit+0x4e>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8002e38:	2407      	movs	r4, #7
 8002e3a:	e7ee      	b.n	8002e1a <KMS_DigestInit+0x4e>
        e_ret_status = CKR_MECHANISM_INVALID;
 8002e3c:	2470      	movs	r4, #112	; 0x70
 8002e3e:	e7ec      	b.n	8002e1a <KMS_DigestInit+0x4e>
          e_ret_status = CKR_DEVICE_MEMORY;
 8002e40:	2431      	movs	r4, #49	; 0x31
  return e_ret_status;
 8002e42:	e7ea      	b.n	8002e1a <KMS_DigestInit+0x4e>
 8002e44:	20000c48 	.word	0x20000c48

08002e48 <KMS_Digest>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_Digest(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                   CK_ULONG ulDataLen, CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)
{
 8002e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	461f      	mov	r7, r3
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error etatus */

  if (!KMS_IS_INITIALIZED())
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <KMS_Digest+0xac>)
{
 8002e50:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002e54:	4692      	mov	sl, r2
  if (!KMS_IS_INITIALIZED())
 8002e56:	781a      	ldrb	r2, [r3, #0]
{
 8002e58:	4605      	mov	r5, r0
 8002e5a:	4689      	mov	r9, r1
 8002e5c:	1e46      	subs	r6, r0, #1
 8002e5e:	469b      	mov	fp, r3
  if (!KMS_IS_INITIALIZED())
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d03e      	beq.n	8002ee2 <KMS_Digest+0x9a>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002e64:	f001 fbc2 	bl	80045ec <KMS_CheckSessionHdle>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d13c      	bne.n	8002ee8 <KMS_Digest+0xa0>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	fb02 b206 	mla	r2, r2, r6, fp
 8002e74:	68d3      	ldr	r3, [r2, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d138      	bne.n	8002eec <KMS_Digest+0xa4>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 8002e7a:	6a13      	ldr	r3, [r2, #32]
 8002e7c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8002e80:	d136      	bne.n	8002ef0 <KMS_Digest+0xa8>
#if defined(KMS_SHA256) && (KMS_SHA256 & KMS_FCT_DIGEST)
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 8002e82:	b937      	cbnz	r7, 8002e92 <KMS_Digest+0x4a>
 8002e84:	2320      	movs	r3, #32
 8002e86:	f8c8 3000 	str.w	r3, [r8]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	b003      	add	sp, #12
 8002e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 8002e92:	f8d8 3000 	ldr.w	r3, [r8]
 8002e96:	2b1f      	cmp	r3, #31
 8002e98:	d805      	bhi.n	8002ea6 <KMS_Digest+0x5e>
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	f8c8 3000 	str.w	r3, [r8]
 8002ea0:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8002ea4:	e7f1      	b.n	8002e8a <KMS_Digest+0x42>
        cryptolib_status = CA_SHA256_Append(&(phash_ctx->ca_ctx), pData, (int32_t)ulDataLen);
 8002ea6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4652      	mov	r2, sl
 8002eae:	4649      	mov	r1, r9
 8002eb0:	f7ff fd51 	bl	8002956 <CA_SHA256_Append>
        if (cryptolib_status == CA_HASH_SUCCESS)
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	b928      	cbnz	r0, 8002ec4 <KMS_Digest+0x7c>
          cryptolib_status = CA_SHA256_Finish(&(phash_ctx->ca_ctx), pDigest, (int32_t *)(uint32_t)pulDigestLen);
 8002eb8:	4642      	mov	r2, r8
 8002eba:	4639      	mov	r1, r7
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd58 	bl	8002972 <CA_SHA256_Finish>
          if (cryptolib_status == CA_HASH_SUCCESS)
 8002ec2:	b100      	cbz	r0, 8002ec6 <KMS_Digest+0x7e>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002ec4:	2406      	movs	r4, #6
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8002ec6:	2324      	movs	r3, #36	; 0x24
 8002ec8:	fb03 b606 	mla	r6, r3, r6, fp
 8002ecc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002ece:	b121      	cbz	r1, 8002eda <KMS_Digest+0x92>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f001 fd35 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62b3      	str	r3, [r6, #40]	; 0x28
  KMS_SetStateIdle(hSession);
 8002eda:	4628      	mov	r0, r5
 8002edc:	f001 fbbc 	bl	8004658 <KMS_SetStateIdle>
  return e_ret_status;
 8002ee0:	e7d3      	b.n	8002e8a <KMS_Digest+0x42>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8002ee2:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8002ee6:	e7ee      	b.n	8002ec6 <KMS_Digest+0x7e>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8002ee8:	24b3      	movs	r4, #179	; 0xb3
 8002eea:	e7ec      	b.n	8002ec6 <KMS_Digest+0x7e>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8002eec:	2491      	movs	r4, #145	; 0x91
 8002eee:	e7ea      	b.n	8002ec6 <KMS_Digest+0x7e>
        e_ret_status = CKR_MECHANISM_INVALID;
 8002ef0:	2470      	movs	r4, #112	; 0x70
 8002ef2:	e7e8      	b.n	8002ec6 <KMS_Digest+0x7e>
 8002ef4:	20000c48 	.word	0x20000c48

08002ef8 <KMS_DigestUpdate>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_DigestUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart, CK_ULONG ulPartLen)
{
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error status */

  if (!KMS_IS_INITIALIZED())
 8002efc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002f54 <KMS_DigestUpdate+0x5c>
 8002f00:	f898 3000 	ldrb.w	r3, [r8]
{
 8002f04:	4605      	mov	r5, r0
 8002f06:	460e      	mov	r6, r1
 8002f08:	4617      	mov	r7, r2
  if (!KMS_IS_INITIALIZED())
 8002f0a:	b1cb      	cbz	r3, 8002f40 <KMS_DigestUpdate+0x48>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002f0c:	f001 fb6e 	bl	80045ec <KMS_CheckSessionHdle>
 8002f10:	4604      	mov	r4, r0
 8002f12:	b9c0      	cbnz	r0, 8002f46 <KMS_DigestUpdate+0x4e>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8002f14:	2324      	movs	r3, #36	; 0x24
 8002f16:	1e68      	subs	r0, r5, #1
 8002f18:	fb03 8000 	mla	r0, r3, r0, r8
 8002f1c:	68c3      	ldr	r3, [r0, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d113      	bne.n	8002f4a <KMS_DigestUpdate+0x52>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 8002f22:	6a03      	ldr	r3, [r0, #32]
 8002f24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8002f28:	d111      	bne.n	8002f4e <KMS_DigestUpdate+0x56>
        kms_sha256_ctx_t *phash_ctx;

        /* Retrieve allocated context */
        phash_ctx = KMS_GETSESSION(hSession).pCtx;
        /* Add data to be hashed */
        cryptolib_status = CA_SHA256_Append(&(phash_ctx->ca_ctx), pPart, (int32_t)ulPartLen);
 8002f2a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002f2c:	463a      	mov	r2, r7
 8002f2e:	4631      	mov	r1, r6
 8002f30:	f7ff fd11 	bl	8002956 <CA_SHA256_Append>
        if (cryptolib_status == CA_HASH_SUCCESS)
 8002f34:	2800      	cmp	r0, #0
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002f36:	bf18      	it	ne
 8002f38:	2406      	movne	r4, #6

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8002f40:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8002f44:	e7f9      	b.n	8002f3a <KMS_DigestUpdate+0x42>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8002f46:	24b3      	movs	r4, #179	; 0xb3
 8002f48:	e7f7      	b.n	8002f3a <KMS_DigestUpdate+0x42>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8002f4a:	2491      	movs	r4, #145	; 0x91
 8002f4c:	e7f5      	b.n	8002f3a <KMS_DigestUpdate+0x42>
        e_ret_status = CKR_MECHANISM_INVALID;
 8002f4e:	2470      	movs	r4, #112	; 0x70
 8002f50:	e7f3      	b.n	8002f3a <KMS_DigestUpdate+0x42>
 8002f52:	bf00      	nop
 8002f54:	20000c48 	.word	0x20000c48

08002f58 <KMS_DigestFinal>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_DigestFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pDigest,
                        CK_ULONG_PTR pulDigestLen)
{
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error status */

  if (!KMS_IS_INITIALIZED())
 8002f5c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002fec <KMS_DigestFinal+0x94>
 8002f60:	f89a 3000 	ldrb.w	r3, [sl]
{
 8002f64:	4606      	mov	r6, r0
 8002f66:	4688      	mov	r8, r1
 8002f68:	4615      	mov	r5, r2
 8002f6a:	1e47      	subs	r7, r0, #1
 8002f6c:	46d1      	mov	r9, sl
  if (!KMS_IS_INITIALIZED())
 8002f6e:	b39b      	cbz	r3, 8002fd8 <KMS_DigestFinal+0x80>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002f70:	f001 fb3c 	bl	80045ec <KMS_CheckSessionHdle>
 8002f74:	4604      	mov	r4, r0
 8002f76:	bb90      	cbnz	r0, 8002fde <KMS_DigestFinal+0x86>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8002f78:	2324      	movs	r3, #36	; 0x24
 8002f7a:	fb03 a307 	mla	r3, r3, r7, sl
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	2a01      	cmp	r2, #1
 8002f82:	d12e      	bne.n	8002fe2 <KMS_DigestFinal+0x8a>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	f5b2 7f14 	cmp.w	r2, #592	; 0x250
 8002f8a:	d12c      	bne.n	8002fe6 <KMS_DigestFinal+0x8e>
#if defined(KMS_SHA256) && (KMS_SHA256 & KMS_FCT_DIGEST)
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 8002f8c:	f1b8 0f00 	cmp.w	r8, #0
 8002f90:	d104      	bne.n	8002f9c <KMS_DigestFinal+0x44>
 8002f92:	2320      	movs	r3, #32
 8002f94:	602b      	str	r3, [r5, #0]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 8002f96:	4620      	mov	r0, r4
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 8002f9c:	682a      	ldr	r2, [r5, #0]
 8002f9e:	2a1f      	cmp	r2, #31
 8002fa0:	d804      	bhi.n	8002fac <KMS_DigestFinal+0x54>
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8002faa:	e7f4      	b.n	8002f96 <KMS_DigestFinal+0x3e>
        cryptolib_status = CA_SHA256_Finish(&(phash_ctx->ca_ctx), pDigest, (int32_t *)(uint32_t)pulDigestLen);
 8002fac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fae:	462a      	mov	r2, r5
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	f7ff fcde 	bl	8002972 <CA_SHA256_Finish>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	bf18      	it	ne
 8002fba:	2406      	movne	r4, #6
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8002fbc:	2324      	movs	r3, #36	; 0x24
 8002fbe:	fb03 9707 	mla	r7, r3, r7, r9
 8002fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc4:	b121      	cbz	r1, 8002fd0 <KMS_DigestFinal+0x78>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	f001 fcba 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
  KMS_SetStateIdle(hSession);
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f001 fb41 	bl	8004658 <KMS_SetStateIdle>
  return e_ret_status;
 8002fd6:	e7de      	b.n	8002f96 <KMS_DigestFinal+0x3e>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8002fd8:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8002fdc:	e7ee      	b.n	8002fbc <KMS_DigestFinal+0x64>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8002fde:	24b3      	movs	r4, #179	; 0xb3
 8002fe0:	e7ec      	b.n	8002fbc <KMS_DigestFinal+0x64>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8002fe2:	2491      	movs	r4, #145	; 0x91
 8002fe4:	e7ea      	b.n	8002fbc <KMS_DigestFinal+0x64>
        e_ret_status = CKR_MECHANISM_INVALID;
 8002fe6:	2470      	movs	r4, #112	; 0x70
 8002fe8:	e7e8      	b.n	8002fbc <KMS_DigestFinal+0x64>
 8002fea:	bf00      	nop
 8002fec:	20000c48 	.word	0x20000c48

08002ff0 <KMS_CreateObject>:
  */
CK_RV  KMS_CreateObject(CK_SESSION_HANDLE hSession,
                        CK_ATTRIBUTE_PTR pTemplate,
                        CK_ULONG ulCount,
                        CK_OBJECT_HANDLE_PTR phObject)
{
 8002ff0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#if defined(KMS_OBJECTS)
  CK_ATTRIBUTE_PTR  p_attribut_value = NULL_PTR;
  CK_RV e_ret_status;

  if (!KMS_IS_INITIALIZED())
 8002ff4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003084 <KMS_CreateObject+0x94>
{
 8002ff8:	461f      	mov	r7, r3
  CK_ATTRIBUTE_PTR  p_attribut_value = NULL_PTR;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9303      	str	r3, [sp, #12]
  if (!KMS_IS_INITIALIZED())
 8002ffe:	f898 3000 	ldrb.w	r3, [r8]
{
 8003002:	4606      	mov	r6, r0
 8003004:	460c      	mov	r4, r1
 8003006:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8003008:	2b00      	cmp	r3, #0
 800300a:	d036      	beq.n	800307a <KMS_CreateObject+0x8a>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800300c:	f001 faee 	bl	80045ec <KMS_CheckSessionHdle>
 8003010:	2800      	cmp	r0, #0
 8003012:	d135      	bne.n	8003080 <KMS_CreateObject+0x90>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8003014:	1e72      	subs	r2, r6, #1
 8003016:	2324      	movs	r3, #36	; 0x24
 8003018:	fb03 8202 	mla	r2, r3, r2, r8
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	bb7a      	cbnz	r2, 8003080 <KMS_CreateObject+0x90>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Control CLASS ATTRIBUTE */
  if (CKR_OK != KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_CLASS, &p_attribut_value))
 8003020:	ab03      	add	r3, sp, #12
 8003022:	4629      	mov	r1, r5
 8003024:	4620      	mov	r0, r4
 8003026:	f002 fa17 	bl	8005458 <KMS_FindAttributeInTemplate>
 800302a:	b118      	cbz	r0, 8003034 <KMS_CreateObject+0x44>
  {
    /* Class attribute not found, object not valid */
    return CKR_TEMPLATE_INCOMPLETE;
 800302c:	20d0      	movs	r0, #208	; 0xd0

  return e_ret_status;
#else /* KMS_OBJECTS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_OBJECTS */
}
 800302e:	b004      	add	sp, #16
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_CERTIFICATE_TYPE, &p_attribut_value) != CKR_OK)
 8003034:	ab03      	add	r3, sp, #12
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	4629      	mov	r1, r5
 800303a:	4620      	mov	r0, r4
 800303c:	f002 fa0c 	bl	8005458 <KMS_FindAttributeInTemplate>
 8003040:	b940      	cbnz	r0, 8003054 <KMS_CreateObject+0x64>
  e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession, pTemplate, ulCount, NULL_PTR, 0, phObject);
 8003042:	2300      	movs	r3, #0
 8003044:	9701      	str	r7, [sp, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	462a      	mov	r2, r5
 800304a:	4621      	mov	r1, r4
 800304c:	4630      	mov	r0, r6
 800304e:	f002 fd47 	bl	8005ae0 <KMS_Objects_CreateNStoreBlobFromTemplates>
  return e_ret_status;
 8003052:	e7ec      	b.n	800302e <KMS_CreateObject+0x3e>
    if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_HW_FEATURE_TYPE, &p_attribut_value) != CKR_OK)
 8003054:	ab03      	add	r3, sp, #12
 8003056:	f44f 7240 	mov.w	r2, #768	; 0x300
 800305a:	4629      	mov	r1, r5
 800305c:	4620      	mov	r0, r4
 800305e:	f002 f9fb 	bl	8005458 <KMS_FindAttributeInTemplate>
 8003062:	2800      	cmp	r0, #0
 8003064:	d0ed      	beq.n	8003042 <KMS_CreateObject+0x52>
      if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_KEY_TYPE, &p_attribut_value) != CKR_OK)
 8003066:	ab03      	add	r3, sp, #12
 8003068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306c:	4629      	mov	r1, r5
 800306e:	4620      	mov	r0, r4
 8003070:	f002 f9f2 	bl	8005458 <KMS_FindAttributeInTemplate>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0e4      	beq.n	8003042 <KMS_CreateObject+0x52>
 8003078:	e7d8      	b.n	800302c <KMS_CreateObject+0x3c>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800307a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800307e:	e7d6      	b.n	800302e <KMS_CreateObject+0x3e>
    return CKR_SESSION_HANDLE_INVALID;
 8003080:	20b3      	movs	r0, #179	; 0xb3
 8003082:	e7d4      	b.n	800302e <KMS_CreateObject+0x3e>
 8003084:	20000c48 	.word	0x20000c48

08003088 <KMS_DestroyObject>:
  *         @ref KMS_PlatfObjects_NvmRemoveObject returned values
  *         @ref KMS_PlatfObjects_VmRemoveObject returned values
  */
CK_RV  KMS_DestroyObject(CK_SESSION_HANDLE hSession,
                         CK_OBJECT_HANDLE hObject)
{
 8003088:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  kms_obj_keyhead_t *pkms_object;
  kms_attr_t  *pAttribute;
  kms_obj_range_t  ObjectRange;

  if (!KMS_IS_INITIALIZED())
 800308a:	4e17      	ldr	r6, [pc, #92]	; (80030e8 <KMS_DestroyObject+0x60>)
 800308c:	7833      	ldrb	r3, [r6, #0]
{
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
  if (!KMS_IS_INITIALIZED())
 8003092:	b313      	cbz	r3, 80030da <KMS_DestroyObject+0x52>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003094:	f001 faaa 	bl	80045ec <KMS_CheckSessionHdle>
 8003098:	bb10      	cbnz	r0, 80030e0 <KMS_DestroyObject+0x58>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 800309a:	3c01      	subs	r4, #1
 800309c:	2024      	movs	r0, #36	; 0x24
 800309e:	fb00 6404 	mla	r4, r0, r4, r6
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	b9e3      	cbnz	r3, 80030e0 <KMS_DestroyObject+0x58>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Verify that the object is removable, embedded objects are not */
  ObjectRange = KMS_Objects_GetRange(hObject);
 80030a6:	4628      	mov	r0, r5
 80030a8:	f002 f904 	bl	80052b4 <KMS_Objects_GetRange>
  if (ObjectRange == KMS_OBJECT_RANGE_EMBEDDED)
 80030ac:	b910      	cbnz	r0, 80030b4 <KMS_DestroyObject+0x2c>
  {
    return (CKR_ACTION_PROHIBITED);
 80030ae:	201b      	movs	r0, #27

  return e_ret_status;
#else /* KMS_OBJECTS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_OBJECTS */
}
 80030b0:	b002      	add	sp, #8
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
  pkms_object = KMS_Objects_GetPointer(hObject);
 80030b4:	4628      	mov	r0, r5
 80030b6:	f002 f95d 	bl	8005374 <KMS_Objects_GetPointer>
  if (pkms_object != NULL_PTR)
 80030ba:	4601      	mov	r1, r0
 80030bc:	b190      	cbz	r0, 80030e4 <KMS_DestroyObject+0x5c>
    e_ret_status = KMS_Objects_SearchAttributes(CKA_DESTROYABLE, pkms_object, &pAttribute);
 80030be:	aa01      	add	r2, sp, #4
 80030c0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80030c4:	f002 f9de 	bl	8005484 <KMS_Objects_SearchAttributes>
    if (e_ret_status == CKR_OK)
 80030c8:	b918      	cbnz	r0, 80030d2 <KMS_DestroyObject+0x4a>
      if (*pAttribute->data != CK_TRUE)
 80030ca:	9b01      	ldr	r3, [sp, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d1ed      	bne.n	80030ae <KMS_DestroyObject+0x26>
    e_ret_status = KMS_PlatfObjects_NvmRemoveObject(hObject);
 80030d2:	4628      	mov	r0, r5
 80030d4:	f002 fead 	bl	8005e32 <KMS_PlatfObjects_NvmRemoveObject>
 80030d8:	e7ea      	b.n	80030b0 <KMS_DestroyObject+0x28>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80030da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80030de:	e7e7      	b.n	80030b0 <KMS_DestroyObject+0x28>
    return CKR_SESSION_HANDLE_INVALID;
 80030e0:	20b3      	movs	r0, #179	; 0xb3
 80030e2:	e7e5      	b.n	80030b0 <KMS_DestroyObject+0x28>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 80030e4:	2082      	movs	r0, #130	; 0x82
 80030e6:	e7e3      	b.n	80030b0 <KMS_DestroyObject+0x28>
 80030e8:	20000c48 	.word	0x20000c48

080030ec <KMS_GetAttributeValue>:
  *         CKR_SESSION_HANDLE_INVALID
  *         @ref KMS_Objects_SearchAttributes returned values
  */
CK_RV KMS_GetAttributeValue(CK_SESSION_HANDLE hSession,  CK_OBJECT_HANDLE  hObject,
                            CK_ATTRIBUTE_PTR  pTemplate, CK_ULONG          ulCount)
{
 80030ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_ATTRIBUTES)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 80030f0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8003204 <KMS_GetAttributeValue+0x118>
{
 80030f4:	461e      	mov	r6, r3
  if (!KMS_IS_INITIALIZED())
 80030f6:	f898 3000 	ldrb.w	r3, [r8]
{
 80030fa:	4605      	mov	r5, r0
 80030fc:	460f      	mov	r7, r1
 80030fe:	4614      	mov	r4, r2
  if (!KMS_IS_INITIALIZED())
 8003100:	2b00      	cmp	r3, #0
 8003102:	d077      	beq.n	80031f4 <KMS_GetAttributeValue+0x108>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003104:	f001 fa72 	bl	80045ec <KMS_CheckSessionHdle>
 8003108:	2800      	cmp	r0, #0
 800310a:	d176      	bne.n	80031fa <KMS_GetAttributeValue+0x10e>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 800310c:	3d01      	subs	r5, #1
 800310e:	2024      	movs	r0, #36	; 0x24
 8003110:	fb00 8505 	mla	r5, r0, r5, r8
 8003114:	68eb      	ldr	r3, [r5, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d16f      	bne.n	80031fa <KMS_GetAttributeValue+0x10e>
  /* GetAttribute() is only authorised for objects with attribute EXTRACTABLE = TRUE or without EXTRACTABLE attribute */
  /* Verify that the object is extractable, reading the attributes */

  /* Read the key value from the Key Handle                 */
  /* Key Handle is the index to one of static or nvm        */
  pkms_object = KMS_Objects_GetPointer(hObject);
 800311a:	4638      	mov	r0, r7
 800311c:	f002 f92a 	bl	8005374 <KMS_Objects_GetPointer>

  /* Check that hObject is valid */
  if (pkms_object != NULL_PTR)
 8003120:	4607      	mov	r7, r0
 8003122:	2800      	cmp	r0, #0
 8003124:	d06b      	beq.n	80031fe <KMS_GetAttributeValue+0x112>
  {
    kms_attr_t  *pAttribute;

    /* Check the CKA_EXTRACTABLE attribute = CK_TRUE      */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_EXTRACTABLE, pkms_object, &pAttribute);
 8003126:	4601      	mov	r1, r0
 8003128:	466a      	mov	r2, sp
 800312a:	f44f 70b1 	mov.w	r0, #354	; 0x162
 800312e:	f002 f9a9 	bl	8005484 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not extractable */
    if ((e_ret_status == CKR_OK) && (*pAttribute->data != CK_TRUE))
 8003132:	b978      	cbnz	r0, 8003154 <KMS_GetAttributeValue+0x68>
 8003134:	9b00      	ldr	r3, [sp, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00b      	beq.n	8003154 <KMS_GetAttributeValue+0x68>
 800313c:	230c      	movs	r3, #12
 800313e:	fb03 4306 	mla	r3, r3, r6, r4
    {
      for (uint32_t i = 0; i < ulCount; i++)
      {
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8003142:	f04f 32ff 	mov.w	r2, #4294967295
      for (uint32_t i = 0; i < ulCount; i++)
 8003146:	42a3      	cmp	r3, r4
 8003148:	d101      	bne.n	800314e <KMS_GetAttributeValue+0x62>
      }
      /* Object cannot be extracted  */
      return (CKR_ATTRIBUTE_SENSITIVE);
 800314a:	2511      	movs	r5, #17
 800314c:	e013      	b.n	8003176 <KMS_GetAttributeValue+0x8a>
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 800314e:	60a2      	str	r2, [r4, #8]
      for (uint32_t i = 0; i < ulCount; i++)
 8003150:	340c      	adds	r4, #12
 8003152:	e7f8      	b.n	8003146 <KMS_GetAttributeValue+0x5a>
    }

    /* Double check to avoid fault attack: Check the CKA_EXTRACTABLE attribute = CK_TRUE */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_EXTRACTABLE, pkms_object, &pAttribute);
 8003154:	466a      	mov	r2, sp
 8003156:	4639      	mov	r1, r7
 8003158:	f44f 70b1 	mov.w	r0, #354	; 0x162
 800315c:	f002 f992 	bl	8005484 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not extractable */
    if ((e_ret_status == CKR_OK) && (*pAttribute->data != CK_TRUE))
 8003160:	4605      	mov	r5, r0
 8003162:	b160      	cbz	r0, 800317e <KMS_GetAttributeValue+0x92>
 8003164:	230c      	movs	r3, #12
 8003166:	fb03 4606 	mla	r6, r3, r6, r4
          }
        }
        else
        {
          /* case 2 */
          ptemp->ulValueLen = CK_UNAVAILABLE_INFORMATION;
 800316a:	f04f 38ff 	mov.w	r8, #4294967295
            ptemp->ulValueLen = CKR_BUFFER_TOO_SMALL;
 800316e:	f44f 79a8 	mov.w	r9, #336	; 0x150
      for (index = 0; index < ulCount; index++)
 8003172:	42b4      	cmp	r4, r6
 8003174:	d111      	bne.n	800319a <KMS_GetAttributeValue+0xae>

  return e_ret_status;
#else /* KMS_ATTRIBUTES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ATTRIBUTES */
}
 8003176:	4628      	mov	r0, r5
 8003178:	b003      	add	sp, #12
 800317a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((e_ret_status == CKR_OK) && (*pAttribute->data != CK_TRUE))
 800317e:	9b00      	ldr	r3, [sp, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d0ee      	beq.n	8003164 <KMS_GetAttributeValue+0x78>
 8003186:	230c      	movs	r3, #12
 8003188:	fb03 4306 	mla	r3, r3, r6, r4
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
      for (uint32_t i = 0; i < ulCount; i++)
 8003190:	429c      	cmp	r4, r3
 8003192:	d0da      	beq.n	800314a <KMS_GetAttributeValue+0x5e>
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8003194:	60a2      	str	r2, [r4, #8]
      for (uint32_t i = 0; i < ulCount; i++)
 8003196:	340c      	adds	r4, #12
 8003198:	e7fa      	b.n	8003190 <KMS_GetAttributeValue+0xa4>
        e_ret_status = KMS_Objects_SearchAttributes(ptemp->type, pkms_object, &pfound_attribute);
 800319a:	6820      	ldr	r0, [r4, #0]
 800319c:	aa01      	add	r2, sp, #4
 800319e:	4639      	mov	r1, r7
 80031a0:	f002 f970 	bl	8005484 <KMS_Objects_SearchAttributes>
        if (e_ret_status == CKR_OK)
 80031a4:	4605      	mov	r5, r0
 80031a6:	bb10      	cbnz	r0, 80031ee <KMS_GetAttributeValue+0x102>
          if (ptemp->pValue == NULL_PTR)
 80031a8:	9b01      	ldr	r3, [sp, #4]
 80031aa:	6860      	ldr	r0, [r4, #4]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	b910      	cbnz	r0, 80031b6 <KMS_GetAttributeValue+0xca>
            ptemp->ulValueLen = pfound_attribute->size;
 80031b0:	60a1      	str	r1, [r4, #8]
      for (index = 0; index < ulCount; index++)
 80031b2:	340c      	adds	r4, #12
 80031b4:	e7dd      	b.n	8003172 <KMS_GetAttributeValue+0x86>
          else if (ptemp->ulValueLen >= pfound_attribute->size)
 80031b6:	68a2      	ldr	r2, [r4, #8]
 80031b8:	428a      	cmp	r2, r1
 80031ba:	d315      	bcc.n	80031e8 <KMS_GetAttributeValue+0xfc>
            if ((ptemp->type == CKA_VALUE) || (ptemp->type == CKA_EC_POINT))
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	2a11      	cmp	r2, #17
 80031c0:	f103 0308 	add.w	r3, r3, #8
 80031c4:	d003      	beq.n	80031ce <KMS_GetAttributeValue+0xe2>
 80031c6:	f240 1c81 	movw	ip, #385	; 0x181
 80031ca:	4562      	cmp	r2, ip
 80031cc:	d107      	bne.n	80031de <KMS_GetAttributeValue+0xf2>
              KMS_Objects_BlobU32_2_u8ptr(&(pfound_attribute->data[0]),
 80031ce:	4602      	mov	r2, r0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fa12 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
            ptemp->ulValueLen = pfound_attribute->size;
 80031d6:	9b01      	ldr	r3, [sp, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60a3      	str	r3, [r4, #8]
 80031dc:	e7e9      	b.n	80031b2 <KMS_GetAttributeValue+0xc6>
              (void)memcpy((uint8_t *)ptemp->pValue, (uint8_t *)(pfound_attribute->data), pfound_attribute->size);
 80031de:	460a      	mov	r2, r1
 80031e0:	4619      	mov	r1, r3
 80031e2:	f003 fc65 	bl	8006ab0 <memcpy>
 80031e6:	e7f6      	b.n	80031d6 <KMS_GetAttributeValue+0xea>
            ptemp->ulValueLen = CKR_BUFFER_TOO_SMALL;
 80031e8:	f8c4 9008 	str.w	r9, [r4, #8]
 80031ec:	e7e1      	b.n	80031b2 <KMS_GetAttributeValue+0xc6>
          ptemp->ulValueLen = CK_UNAVAILABLE_INFORMATION;
 80031ee:	f8c4 8008 	str.w	r8, [r4, #8]
 80031f2:	e7de      	b.n	80031b2 <KMS_GetAttributeValue+0xc6>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80031f4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80031f8:	e7bd      	b.n	8003176 <KMS_GetAttributeValue+0x8a>
    return CKR_SESSION_HANDLE_INVALID;
 80031fa:	25b3      	movs	r5, #179	; 0xb3
 80031fc:	e7bb      	b.n	8003176 <KMS_GetAttributeValue+0x8a>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 80031fe:	2582      	movs	r5, #130	; 0x82
 8003200:	e7b9      	b.n	8003176 <KMS_GetAttributeValue+0x8a>
 8003202:	bf00      	nop
 8003204:	20000c48 	.word	0x20000c48

08003208 <KMS_FindObjectsInit>:
  *         CKR_SESSION_HANDLE_INVALID
  *         @ref KMS_FindObjectsFromTemplate returned values
  */
CK_RV KMS_FindObjectsInit(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,
                          CK_ULONG ulCount)
{
 8003208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CK_RV e_ret_status;
  kms_find_ctx_t *p_ctx;

  /* ========== Check active operation status ========== */

  if (!KMS_IS_INITIALIZED())
 800320c:	4d25      	ldr	r5, [pc, #148]	; (80032a4 <KMS_FindObjectsInit+0x9c>)
 800320e:	782b      	ldrb	r3, [r5, #0]
{
 8003210:	b085      	sub	sp, #20
 8003212:	4606      	mov	r6, r0
 8003214:	4688      	mov	r8, r1
 8003216:	4614      	mov	r4, r2
 8003218:	46a9      	mov	r9, r5
  if (!KMS_IS_INITIALIZED())
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03a      	beq.n	8003294 <KMS_FindObjectsInit+0x8c>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800321e:	f001 f9e5 	bl	80045ec <KMS_CheckSessionHdle>
 8003222:	2800      	cmp	r0, #0
 8003224:	d139      	bne.n	800329a <KMS_FindObjectsInit+0x92>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8003226:	1e77      	subs	r7, r6, #1
 8003228:	2324      	movs	r3, #36	; 0x24
 800322a:	fb03 5307 	mla	r3, r3, r7, r5
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	bb9b      	cbnz	r3, 800329a <KMS_FindObjectsInit+0x92>
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Check input parameters */
  /* Note: pTemplate = NULL_PTR is ok only if ulCount = 0 */
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || ((pTemplate != NULL_PTR) && (ulCount == 0U)))
 8003232:	f1b8 0f00 	cmp.w	r8, #0
 8003236:	d102      	bne.n	800323e <KMS_FindObjectsInit+0x36>
 8003238:	b11c      	cbz	r4, 8003242 <KMS_FindObjectsInit+0x3a>
  {
    return CKR_ARGUMENTS_BAD;
 800323a:	2407      	movs	r4, #7
 800323c:	e021      	b.n	8003282 <KMS_FindObjectsInit+0x7a>
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || ((pTemplate != NULL_PTR) && (ulCount == 0U)))
 800323e:	2c00      	cmp	r4, #0
 8003240:	d0fb      	beq.n	800323a <KMS_FindObjectsInit+0x32>
  }

  p_ctx = KMS_Alloc(hSession, sizeof(kms_find_ctx_t));
 8003242:	21f4      	movs	r1, #244	; 0xf4
 8003244:	4630      	mov	r0, r6
 8003246:	f001 fb57 	bl	80048f8 <KMS_Alloc>
  if (p_ctx == NULL_PTR)
 800324a:	4605      	mov	r5, r0
 800324c:	b338      	cbz	r0, 800329e <KMS_FindObjectsInit+0x96>
 800324e:	1f03      	subs	r3, r0, #4
 8003250:	f100 02ec 	add.w	r2, r0, #236	; 0xec
  }

  /* ========== Look for the objects  ========== */
  for (uint32_t i = 0; i < (sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE)); i++)
  {
    p_ctx->searchHandles[i] = KMS_HANDLE_KEY_NOT_KNOWN;
 8003254:	2100      	movs	r1, #0
 8003256:	f843 1f04 	str.w	r1, [r3, #4]!
  for (uint32_t i = 0; i < (sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE)); i++)
 800325a:	4293      	cmp	r3, r2
 800325c:	d1fb      	bne.n	8003256 <KMS_FindObjectsInit+0x4e>
  }

  /* Note: if ulCount was 0, searchHandles will be filled with a list of all objects handles */
  e_ret_status = KMS_FindObjectsFromTemplate(hSession,
 800325e:	e9cd 8400 	strd	r8, r4, [sp]
 8003262:	ab03      	add	r3, sp, #12
 8003264:	223c      	movs	r2, #60	; 0x3c
 8003266:	4629      	mov	r1, r5
 8003268:	4630      	mov	r0, r6
 800326a:	f002 f925 	bl	80054b8 <KMS_FindObjectsFromTemplate>
                                             sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE),
                                             &tmp,
                                             pTemplate,
                                             ulCount);

  if (e_ret_status == CKR_OK)
 800326e:	4604      	mov	r4, r0
 8003270:	b958      	cbnz	r0, 800328a <KMS_FindObjectsInit+0x82>
  {
    p_ctx->searchIndex = 0;
    KMS_GETSESSION(hSession).state = KMS_SESSION_SEARCH;
 8003272:	2324      	movs	r3, #36	; 0x24
 8003274:	fb03 9707 	mla	r7, r3, r7, r9
 8003278:	2306      	movs	r3, #6
    p_ctx->searchIndex = 0;
 800327a:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
    KMS_GETSESSION(hSession).state = KMS_SESSION_SEARCH;
 800327e:	60fb      	str	r3, [r7, #12]
    KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003280:	62bd      	str	r5, [r7, #40]	; 0x28

  return e_ret_status;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 8003282:	4620      	mov	r0, r4
 8003284:	b005      	add	sp, #20
 8003286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    KMS_Free(hSession, p_ctx);
 800328a:	4629      	mov	r1, r5
 800328c:	4630      	mov	r0, r6
 800328e:	f001 fb57 	bl	8004940 <KMS_Free>
 8003292:	e7f6      	b.n	8003282 <KMS_FindObjectsInit+0x7a>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003294:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8003298:	e7f3      	b.n	8003282 <KMS_FindObjectsInit+0x7a>
    return CKR_SESSION_HANDLE_INVALID;
 800329a:	24b3      	movs	r4, #179	; 0xb3
 800329c:	e7f1      	b.n	8003282 <KMS_FindObjectsInit+0x7a>
    return CKR_DEVICE_MEMORY;
 800329e:	2431      	movs	r4, #49	; 0x31
 80032a0:	e7ef      	b.n	8003282 <KMS_FindObjectsInit+0x7a>
 80032a2:	bf00      	nop
 80032a4:	20000c48 	.word	0x20000c48

080032a8 <KMS_FindObjects>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV KMS_FindObjects(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE_PTR phObject,
                      CK_ULONG ulMaxObjectCount,  CK_ULONG_PTR pulObjectCount)
{
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_SEARCH)
  kms_find_ctx_t *p_ctx;
  uint32_t i;

  if (!KMS_IS_INITIALIZED())
 80032ac:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003314 <KMS_FindObjects+0x6c>
{
 80032b0:	461d      	mov	r5, r3
  if (!KMS_IS_INITIALIZED())
 80032b2:	f898 3000 	ldrb.w	r3, [r8]
{
 80032b6:	4604      	mov	r4, r0
 80032b8:	460f      	mov	r7, r1
 80032ba:	4616      	mov	r6, r2
  if (!KMS_IS_INITIALIZED())
 80032bc:	b91b      	cbnz	r3, 80032c6 <KMS_FindObjects+0x1e>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80032be:	f44f 70c8 	mov.w	r0, #400	; 0x190

  return CKR_OK;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 80032c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80032c6:	f001 f991 	bl	80045ec <KMS_CheckSessionHdle>
 80032ca:	b9f8      	cbnz	r0, 800330c <KMS_FindObjects+0x64>
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SEARCH)
 80032cc:	2324      	movs	r3, #36	; 0x24
 80032ce:	3c01      	subs	r4, #1
 80032d0:	fb03 8404 	mla	r4, r3, r4, r8
 80032d4:	68e3      	ldr	r3, [r4, #12]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d1f1      	bne.n	80032be <KMS_FindObjects+0x16>
  if ((phObject == NULL_PTR) || (pulObjectCount == NULL_PTR) || (ulMaxObjectCount <= 0UL))
 80032da:	b1cf      	cbz	r7, 8003310 <KMS_FindObjects+0x68>
 80032dc:	b1c5      	cbz	r5, 8003310 <KMS_FindObjects+0x68>
 80032de:	b1be      	cbz	r6, 8003310 <KMS_FindObjects+0x68>
  p_ctx = KMS_GETSESSION(hSession).pCtx;
 80032e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  *pulObjectCount = 0;
 80032e2:	6028      	str	r0, [r5, #0]
  for (i = p_ctx->searchIndex; (i < (sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE)))
 80032e4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 80032e8:	2b3b      	cmp	r3, #59	; 0x3b
 80032ea:	d902      	bls.n	80032f2 <KMS_FindObjects+0x4a>
  p_ctx->searchIndex = i;
 80032ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  return CKR_OK;
 80032f0:	e7e7      	b.n	80032c2 <KMS_FindObjects+0x1a>
       && (*pulObjectCount < ulMaxObjectCount); i++)
 80032f2:	6829      	ldr	r1, [r5, #0]
 80032f4:	42b1      	cmp	r1, r6
 80032f6:	d2f9      	bcs.n	80032ec <KMS_FindObjects+0x44>
    if (p_ctx->searchHandles[i] != KMS_HANDLE_KEY_NOT_KNOWN)
 80032f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80032fc:	b124      	cbz	r4, 8003308 <KMS_FindObjects+0x60>
      phObject[*pulObjectCount] = p_ctx->searchHandles[i];
 80032fe:	f847 4021 	str.w	r4, [r7, r1, lsl #2]
      *pulObjectCount += 1UL;
 8003302:	6829      	ldr	r1, [r5, #0]
 8003304:	3101      	adds	r1, #1
 8003306:	6029      	str	r1, [r5, #0]
       && (*pulObjectCount < ulMaxObjectCount); i++)
 8003308:	3301      	adds	r3, #1
 800330a:	e7ed      	b.n	80032e8 <KMS_FindObjects+0x40>
    return CKR_SESSION_HANDLE_INVALID;
 800330c:	20b3      	movs	r0, #179	; 0xb3
 800330e:	e7d8      	b.n	80032c2 <KMS_FindObjects+0x1a>
    return CKR_ARGUMENTS_BAD;
 8003310:	2007      	movs	r0, #7
 8003312:	e7d6      	b.n	80032c2 <KMS_FindObjects+0x1a>
 8003314:	20000c48 	.word	0x20000c48

08003318 <KMS_FindObjectsFinal>:
  *         CKR_CRYPTOKI_NOT_INITIALIZED
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV KMS_FindObjectsFinal(CK_SESSION_HANDLE hSession)
{
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(KMS_SEARCH)
  /* ========== Check active operation status ========== */

  if (!KMS_IS_INITIALIZED())
 800331a:	4f0f      	ldr	r7, [pc, #60]	; (8003358 <KMS_FindObjectsFinal+0x40>)
 800331c:	783b      	ldrb	r3, [r7, #0]
{
 800331e:	4606      	mov	r6, r0
  if (!KMS_IS_INITIALIZED())
 8003320:	b91b      	cbnz	r3, 800332a <KMS_FindObjectsFinal+0x12>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003322:	f44f 74c8 	mov.w	r4, #400	; 0x190

  return CKR_OK;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 8003326:	4620      	mov	r0, r4
 8003328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800332a:	f001 f95f 	bl	80045ec <KMS_CheckSessionHdle>
 800332e:	4604      	mov	r4, r0
 8003330:	b980      	cbnz	r0, 8003354 <KMS_FindObjectsFinal+0x3c>
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SEARCH)
 8003332:	2324      	movs	r3, #36	; 0x24
 8003334:	1e75      	subs	r5, r6, #1
 8003336:	fb03 7505 	mla	r5, r3, r5, r7
 800333a:	68eb      	ldr	r3, [r5, #12]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d1f0      	bne.n	8003322 <KMS_FindObjectsFinal+0xa>
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003340:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003342:	b119      	cbz	r1, 800334c <KMS_FindObjectsFinal+0x34>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003344:	4630      	mov	r0, r6
 8003346:	f001 fafb 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800334a:	62ac      	str	r4, [r5, #40]	; 0x28
  KMS_SetStateIdle(hSession);
 800334c:	4630      	mov	r0, r6
 800334e:	f001 f983 	bl	8004658 <KMS_SetStateIdle>
  return CKR_OK;
 8003352:	e7e8      	b.n	8003326 <KMS_FindObjectsFinal+0xe>
    return CKR_SESSION_HANDLE_INVALID;
 8003354:	24b3      	movs	r4, #179	; 0xb3
 8003356:	e7e6      	b.n	8003326 <KMS_FindObjectsFinal+0xe>
 8003358:	20000c48 	.word	0x20000c48

0800335c <KMS_ECC_LoadCurve>:
  * @param  p_EC_st Elliptic curve
  * @retval CKR_OK if found
  *         CKR_GENERAL_ERROR otherwise
  */
CK_RV KMS_ECC_LoadCurve(kms_attr_t *p_EC_Param, CA_EC_stt *p_EC_st)
{
 800335c:	b530      	push	{r4, r5, lr}
 800335e:	460c      	mov	r4, r1
 8003360:	b089      	sub	sp, #36	; 0x24
#if defined(KMS_EC_SECP384)
  /* SECP384R1 curve OID */
  static const uint8_t ref_secp384r1[] = {0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22};
#endif /* KMS_EC_SECP384 */

  if ((p_EC_Param != NULL) && (p_EC_Param->size > 0UL) && (p_EC_st != NULL))
 8003362:	4605      	mov	r5, r0
 8003364:	b308      	cbz	r0, 80033aa <KMS_ECC_LoadCurve+0x4e>
 8003366:	6841      	ldr	r1, [r0, #4]
 8003368:	b1f9      	cbz	r1, 80033aa <KMS_ECC_LoadCurve+0x4e>
 800336a:	b1f4      	cbz	r4, 80033aa <KMS_ECC_LoadCurve+0x4e>
  {
    uint8_t   u8ParamAttrib[32];

    /* Read value from the structure. Need to be translated from
    (uint32_t*) to (uint8_t *) */
    KMS_Objects_BlobU32_2_u8ptr(&(p_EC_Param->data[0]), p_EC_Param->size, u8ParamAttrib);
 800336c:	466a      	mov	r2, sp
 800336e:	3008      	adds	r0, #8
 8003370:	f002 f943 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
      e_ret_status = CKR_OK;
    }
#endif /* KMS_EC_SECP192 */
#if defined(KMS_EC_SECP256)
    /* secp256r1 */
    if (memcmp(u8ParamAttrib, ref_secp256r1, p_EC_Param->size) == 0)
 8003374:	686a      	ldr	r2, [r5, #4]
 8003376:	490e      	ldr	r1, [pc, #56]	; (80033b0 <KMS_ECC_LoadCurve+0x54>)
 8003378:	4668      	mov	r0, sp
 800337a:	f003 fb8b 	bl	8006a94 <memcmp>
 800337e:	b9a0      	cbnz	r0, 80033aa <KMS_ECC_LoadCurve+0x4e>
    {
      p_EC_st->pmA = P_256_a;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <KMS_ECC_LoadCurve+0x58>)
 8003382:	6023      	str	r3, [r4, #0]
      p_EC_st->pmB = P_256_b;
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <KMS_ECC_LoadCurve+0x5c>)
 8003386:	60a3      	str	r3, [r4, #8]
      p_EC_st->pmP = P_256_p;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <KMS_ECC_LoadCurve+0x60>)
 800338a:	6123      	str	r3, [r4, #16]
      p_EC_st->pmN = P_256_n;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <KMS_ECC_LoadCurve+0x64>)
 800338e:	61a3      	str	r3, [r4, #24]
      p_EC_st->pmGx = P_256_Gx;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <KMS_ECC_LoadCurve+0x68>)
 8003392:	6223      	str	r3, [r4, #32]
      p_EC_st->pmGy = P_256_Gy;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <KMS_ECC_LoadCurve+0x6c>)
 8003396:	62a3      	str	r3, [r4, #40]	; 0x28
      p_EC_st->mAsize = (int32_t)sizeof(P_256_a);
 8003398:	2320      	movs	r3, #32
 800339a:	6063      	str	r3, [r4, #4]
      p_EC_st->mBsize = (int32_t)sizeof(P_256_b);
 800339c:	60e3      	str	r3, [r4, #12]
      p_EC_st->mNsize = (int32_t)sizeof(P_256_n);
 800339e:	61e3      	str	r3, [r4, #28]
      p_EC_st->mPsize = (int32_t)sizeof(P_256_p);
 80033a0:	6163      	str	r3, [r4, #20]
      p_EC_st->mGxsize = (int32_t)sizeof(P_256_Gx);
 80033a2:	6263      	str	r3, [r4, #36]	; 0x24
      p_EC_st->mGysize = (int32_t)sizeof(P_256_Gy);
 80033a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      e_ret_status = CKR_OK;
    }
#endif /* KMS_EC_SECP384 */
  }
  return e_ret_status;
}
 80033a6:	b009      	add	sp, #36	; 0x24
 80033a8:	bd30      	pop	{r4, r5, pc}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
 80033aa:	2005      	movs	r0, #5
  return e_ret_status;
 80033ac:	e7fb      	b.n	80033a6 <KMS_ECC_LoadCurve+0x4a>
 80033ae:	bf00      	nop
 80033b0:	08006bf8 	.word	0x08006bf8
 80033b4:	08006b78 	.word	0x08006b78
 80033b8:	08006b98 	.word	0x08006b98
 80033bc:	08006bd8 	.word	0x08006bd8
 80033c0:	08006bb8 	.word	0x08006bb8
 80033c4:	08006b38 	.word	0x08006b38
 80033c8:	08006b58 	.word	0x08006b58

080033cc <encrypt_decrypt_init.part.0>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OBJECT_HANDLE_INVALID
  *         CKR_SESSION_HANDLE_INVALID
  *         KMS_Objects_SearchAttributes
  */
static CK_RV encrypt_decrypt_init(CK_SESSION_HANDLE hSession,
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	4693      	mov	fp, r2
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 80033d2:	4ab8      	ldr	r2, [pc, #736]	; (80036b4 <encrypt_decrypt_init.part.0+0x2e8>)
static CK_RV encrypt_decrypt_init(CK_SESSION_HANDLE hSession,
 80033d4:	469a      	mov	sl, r3
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 80033d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80033da:	2324      	movs	r3, #36	; 0x24
 80033dc:	fb03 2308 	mla	r3, r3, r8, r2
static CK_RV encrypt_decrypt_init(CK_SESSION_HANDLE hSession,
 80033e0:	b085      	sub	sp, #20
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 80033e2:	68dc      	ldr	r4, [r3, #12]
static CK_RV encrypt_decrypt_init(CK_SESSION_HANDLE hSession,
 80033e4:	4607      	mov	r7, r0
 80033e6:	460e      	mov	r6, r1
 80033e8:	4691      	mov	r9, r2
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 80033ea:	2c00      	cmp	r4, #0
 80033ec:	f040 816b 	bne.w	80036c6 <encrypt_decrypt_init.part.0+0x2fa>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check parameter */
  if (pMechanism == NULL_PTR)
 80033f0:	b329      	cbz	r1, 800343e <encrypt_decrypt_init.part.0+0x72>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 80033f2:	680b      	ldr	r3, [r1, #0]
 80033f4:	f241 0282 	movw	r2, #4226	; 0x1082
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00d      	beq.n	8003418 <encrypt_decrypt_init.part.0+0x4c>
 80033fc:	f241 0287 	movw	r2, #4231	; 0x1087
 8003400:	4293      	cmp	r3, r2
 8003402:	f000 80cf 	beq.w	80035a4 <encrypt_decrypt_init.part.0+0x1d8>
 8003406:	f241 0281 	movw	r2, #4225	; 0x1081
 800340a:	4293      	cmp	r3, r2
 800340c:	d06f      	beq.n	80034ee <encrypt_decrypt_init.part.0+0x122>
 800340e:	2470      	movs	r4, #112	; 0x70
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
    }
  }

  return e_ret_status;
}
 8003410:	4620      	mov	r0, r4
 8003412:	b005      	add	sp, #20
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pkms_object = KMS_Objects_GetPointer(hKey);
 8003418:	4658      	mov	r0, fp
 800341a:	f001 ffab 	bl	8005374 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 800341e:	4601      	mov	r1, r0
 8003420:	b908      	cbnz	r0, 8003426 <encrypt_decrypt_init.part.0+0x5a>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8003422:	2482      	movs	r4, #130	; 0x82
 8003424:	e7f4      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
      if ((pkms_object != NULL_PTR) &&
 8003426:	6802      	ldr	r2, [r0, #0]
 8003428:	4ba3      	ldr	r3, [pc, #652]	; (80036b8 <encrypt_decrypt_init.part.0+0x2ec>)
 800342a:	429a      	cmp	r2, r3
 800342c:	d1f9      	bne.n	8003422 <encrypt_decrypt_init.part.0+0x56>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 800342e:	6842      	ldr	r2, [r0, #4]
 8003430:	f46f 7c0f 	mvn.w	ip, #572	; 0x23c
 8003434:	4463      	add	r3, ip
 8003436:	429a      	cmp	r2, r3
 8003438:	d1f3      	bne.n	8003422 <encrypt_decrypt_init.part.0+0x56>
        if ((pMechanism->pParameter != NULL_PTR) &&
 800343a:	6873      	ldr	r3, [r6, #4]
 800343c:	b90b      	cbnz	r3, 8003442 <encrypt_decrypt_init.part.0+0x76>
    return CKR_ARGUMENTS_BAD;
 800343e:	2407      	movs	r4, #7
 8003440:	e7e6      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
        if ((pMechanism->pParameter != NULL_PTR) &&
 8003442:	68b3      	ldr	r3, [r6, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0fa      	beq.n	800343e <encrypt_decrypt_init.part.0+0x72>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8003448:	aa03      	add	r2, sp, #12
 800344a:	2011      	movs	r0, #17
 800344c:	f002 f81a 	bl	8005484 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 8003450:	2800      	cmp	r0, #0
 8003452:	f040 812c 	bne.w	80036ae <encrypt_decrypt_init.part.0+0x2e2>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8003456:	9b03      	ldr	r3, [sp, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 0208 	bic.w	r2, r3, #8
 800345e:	2a10      	cmp	r2, #16
 8003460:	d001      	beq.n	8003466 <encrypt_decrypt_init.part.0+0x9a>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8003462:	2b20      	cmp	r3, #32
 8003464:	d1eb      	bne.n	800343e <encrypt_decrypt_init.part.0+0x72>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_cbc_ec_ctx_t));
 8003466:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800346a:	4638      	mov	r0, r7
 800346c:	f001 fa44 	bl	80048f8 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003470:	4603      	mov	r3, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	f000 8119 	beq.w	80036aa <encrypt_decrypt_init.part.0+0x2de>
              KMS_GETSESSION(hSession).hKey = hKey;
 8003478:	2524      	movs	r5, #36	; 0x24
 800347a:	fb05 9508 	mla	r5, r5, r8, r9
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 800347e:	6832      	ldr	r2, [r6, #0]
              KMS_GETSESSION(hSession).hKey = hKey;
 8003480:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8003484:	f04f 0b00 	mov.w	fp, #0
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8003488:	622a      	str	r2, [r5, #32]
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 800348a:	62a8      	str	r0, [r5, #40]	; 0x28
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800348c:	f880 b024 	strb.w	fp, [r0, #36]	; 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003490:	9803      	ldr	r0, [sp, #12]
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003492:	9301      	str	r3, [sp, #4]
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003494:	6841      	ldr	r1, [r0, #4]
 8003496:	6459      	str	r1, [r3, #68]	; 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003498:	461a      	mov	r2, r3
              p_ctx->ca_ctx.pmKey = p_ctx->key;
 800349a:	629b      	str	r3, [r3, #40]	; 0x28
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 800349c:	3008      	adds	r0, #8
 800349e:	f002 f8ac 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
              p_ctx->ca_ctx.mIvSize = (int32_t)pMechanism->ulParameterLen;
 80034a2:	9b01      	ldr	r3, [sp, #4]
 80034a4:	68b2      	ldr	r2, [r6, #8]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 80034a8:	f103 0020 	add.w	r0, r3, #32
                if (CA_AES_CBC_Encrypt_Init(&(p_ctx->ca_ctx),
 80034ac:	6872      	ldr	r2, [r6, #4]
 80034ae:	4619      	mov	r1, r3
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 80034b0:	f1ba 0f00 	cmp.w	sl, #0
 80034b4:	d10c      	bne.n	80034d0 <encrypt_decrypt_init.part.0+0x104>
                if (CA_AES_CBC_Encrypt_Init(&(p_ctx->ca_ctx),
 80034b6:	f7fe fdfb 	bl	80020b0 <CA_AES_CBC_Encrypt_Init>
                if (CA_AES_ECB_Encrypt_Init(&(p_ctx->ca_ctx),
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	2800      	cmp	r0, #0
 80034be:	f000 80ed 	beq.w	800369c <encrypt_decrypt_init.part.0+0x2d0>
                  KMS_Free(hSession, p_ctx);
 80034c2:	4619      	mov	r1, r3
 80034c4:	4638      	mov	r0, r7
 80034c6:	f001 fa3b 	bl	8004940 <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80034ca:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
  if (e_ret_status == CKR_OK)
 80034ce:	e00c      	b.n	80034ea <encrypt_decrypt_init.part.0+0x11e>
                if (CA_AES_CBC_Decrypt_Init(&(p_ctx->ca_ctx),
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	f7fe fe95 	bl	8002200 <CA_AES_CBC_Decrypt_Init>
 80034d6:	9b01      	ldr	r3, [sp, #4]
 80034d8:	2800      	cmp	r0, #0
 80034da:	f000 80ef 	beq.w	80036bc <encrypt_decrypt_init.part.0+0x2f0>
                  KMS_Free(hSession, p_ctx);
 80034de:	4619      	mov	r1, r3
 80034e0:	4638      	mov	r0, r7
 80034e2:	f001 fa2d 	bl	8004940 <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80034e6:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
                  e_ret_status = CKR_FUNCTION_FAILED;
 80034ea:	2406      	movs	r4, #6
 80034ec:	e790      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
      pkms_object = KMS_Objects_GetPointer(hKey);
 80034ee:	4658      	mov	r0, fp
 80034f0:	f001 ff40 	bl	8005374 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 80034f4:	4601      	mov	r1, r0
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d093      	beq.n	8003422 <encrypt_decrypt_init.part.0+0x56>
 80034fa:	6802      	ldr	r2, [r0, #0]
 80034fc:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <encrypt_decrypt_init.part.0+0x2ec>)
 80034fe:	429a      	cmp	r2, r3
 8003500:	d18f      	bne.n	8003422 <encrypt_decrypt_init.part.0+0x56>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8003502:	6842      	ldr	r2, [r0, #4]
 8003504:	f46f 750f 	mvn.w	r5, #572	; 0x23c
 8003508:	442b      	add	r3, r5
 800350a:	429a      	cmp	r2, r3
 800350c:	d189      	bne.n	8003422 <encrypt_decrypt_init.part.0+0x56>
        if ((pMechanism->pParameter == NULL_PTR) &&
 800350e:	6873      	ldr	r3, [r6, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d194      	bne.n	800343e <encrypt_decrypt_init.part.0+0x72>
 8003514:	68b3      	ldr	r3, [r6, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d191      	bne.n	800343e <encrypt_decrypt_init.part.0+0x72>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 800351a:	aa03      	add	r2, sp, #12
 800351c:	2011      	movs	r0, #17
 800351e:	f001 ffb1 	bl	8005484 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 8003522:	2800      	cmp	r0, #0
 8003524:	f040 80c3 	bne.w	80036ae <encrypt_decrypt_init.part.0+0x2e2>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 0208 	bic.w	r2, r3, #8
 8003530:	2a10      	cmp	r2, #16
 8003532:	d001      	beq.n	8003538 <encrypt_decrypt_init.part.0+0x16c>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8003534:	2b20      	cmp	r3, #32
 8003536:	d182      	bne.n	800343e <encrypt_decrypt_init.part.0+0x72>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_ecb_ec_ctx_t));
 8003538:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800353c:	4638      	mov	r0, r7
 800353e:	f001 f9db 	bl	80048f8 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003542:	4603      	mov	r3, r0
 8003544:	2800      	cmp	r0, #0
 8003546:	f000 80b0 	beq.w	80036aa <encrypt_decrypt_init.part.0+0x2de>
              KMS_GETSESSION(hSession).hKey = hKey;
 800354a:	2524      	movs	r5, #36	; 0x24
 800354c:	fb05 9508 	mla	r5, r5, r8, r9
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8003550:	6832      	ldr	r2, [r6, #0]
 8003552:	622a      	str	r2, [r5, #32]
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8003554:	2600      	movs	r6, #0
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003556:	62a8      	str	r0, [r5, #40]	; 0x28
              KMS_GETSESSION(hSession).hKey = hKey;
 8003558:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800355c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003560:	9803      	ldr	r0, [sp, #12]
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003562:	9301      	str	r3, [sp, #4]
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003564:	6841      	ldr	r1, [r0, #4]
 8003566:	6459      	str	r1, [r3, #68]	; 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003568:	461a      	mov	r2, r3
 800356a:	3008      	adds	r0, #8
 800356c:	f002 f845 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	f103 0020 	add.w	r0, r3, #32
 8003576:	f1ba 0f00 	cmp.w	sl, #0
 800357a:	d104      	bne.n	8003586 <encrypt_decrypt_init.part.0+0x1ba>
                if (CA_AES_ECB_Encrypt_Init(&(p_ctx->ca_ctx),
 800357c:	4652      	mov	r2, sl
 800357e:	4619      	mov	r1, r3
 8003580:	f7fe ff44 	bl	800240c <CA_AES_ECB_Encrypt_Init>
 8003584:	e799      	b.n	80034ba <encrypt_decrypt_init.part.0+0xee>
                if (CA_AES_ECB_Decrypt_Init(&(p_ctx->ca_ctx),
 8003586:	4619      	mov	r1, r3
 8003588:	4632      	mov	r2, r6
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	f7fe ffc0 	bl	8002510 <CA_AES_ECB_Decrypt_Init>
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	2800      	cmp	r0, #0
 8003594:	f000 8092 	beq.w	80036bc <encrypt_decrypt_init.part.0+0x2f0>
                  KMS_Free(hSession, p_ctx);
 8003598:	4619      	mov	r1, r3
 800359a:	4638      	mov	r0, r7
 800359c:	f001 f9d0 	bl	8004940 <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80035a0:	62ae      	str	r6, [r5, #40]	; 0x28
  if (e_ret_status == CKR_OK)
 80035a2:	e7a2      	b.n	80034ea <encrypt_decrypt_init.part.0+0x11e>
      pkms_object = KMS_Objects_GetPointer(hKey);
 80035a4:	4658      	mov	r0, fp
 80035a6:	f001 fee5 	bl	8005374 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 80035aa:	4601      	mov	r1, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f43f af38 	beq.w	8003422 <encrypt_decrypt_init.part.0+0x56>
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <encrypt_decrypt_init.part.0+0x2ec>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	f47f af33 	bne.w	8003422 <encrypt_decrypt_init.part.0+0x56>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80035bc:	6842      	ldr	r2, [r0, #4]
 80035be:	f46f 700f 	mvn.w	r0, #572	; 0x23c
 80035c2:	4403      	add	r3, r0
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f47f af2c 	bne.w	8003422 <encrypt_decrypt_init.part.0+0x56>
        if ((pMechanism->pParameter != NULL_PTR) &&
 80035ca:	6873      	ldr	r3, [r6, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f43f af36 	beq.w	800343e <encrypt_decrypt_init.part.0+0x72>
 80035d2:	68b3      	ldr	r3, [r6, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f43f af32 	beq.w	800343e <encrypt_decrypt_init.part.0+0x72>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 80035da:	aa03      	add	r2, sp, #12
 80035dc:	2011      	movs	r0, #17
 80035de:	f001 ff51 	bl	8005484 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d163      	bne.n	80036ae <encrypt_decrypt_init.part.0+0x2e2>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 0208 	bic.w	r2, r3, #8
 80035ee:	2a10      	cmp	r2, #16
 80035f0:	d002      	beq.n	80035f8 <encrypt_decrypt_init.part.0+0x22c>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f47f af23 	bne.w	800343e <encrypt_decrypt_init.part.0+0x72>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_gcm_ec_ctx_t));
 80035f8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80035fc:	4638      	mov	r0, r7
 80035fe:	f001 f97b 	bl	80048f8 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003602:	4605      	mov	r5, r0
 8003604:	2800      	cmp	r0, #0
 8003606:	d050      	beq.n	80036aa <encrypt_decrypt_init.part.0+0x2de>
              KMS_GETSESSION(hSession).hKey = hKey;
 8003608:	2324      	movs	r3, #36	; 0x24
 800360a:	fb03 9308 	mla	r3, r3, r8, r9
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 800360e:	6832      	ldr	r2, [r6, #0]
              KMS_GETSESSION(hSession).hKey = hKey;
 8003610:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8003614:	621a      	str	r2, [r3, #32]
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003616:	6298      	str	r0, [r3, #40]	; 0x28
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8003618:	2300      	movs	r3, #0
              pGCMParams = (CK_GCM_PARAMS *)pMechanism->pParameter;
 800361a:	6876      	ldr	r6, [r6, #4]
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800361c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003620:	9803      	ldr	r0, [sp, #12]
 8003622:	6841      	ldr	r1, [r0, #4]
 8003624:	6469      	str	r1, [r5, #68]	; 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003626:	462a      	mov	r2, r5
 8003628:	3008      	adds	r0, #8
 800362a:	f001 ffe6 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
              p_ctx->ca_ctx.mIvSize = (int32_t)pGCMParams->ulIvLen;
 800362e:	6873      	ldr	r3, [r6, #4]
 8003630:	632b      	str	r3, [r5, #48]	; 0x30
              p_ctx->ca_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 8003632:	6933      	ldr	r3, [r6, #16]
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003634:	6832      	ldr	r2, [r6, #0]
              p_ctx->ca_ctx.pmKey = p_ctx->key;
 8003636:	62ad      	str	r5, [r5, #40]	; 0x28
              p_ctx->ca_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 8003638:	2b00      	cmp	r3, #0
 800363a:	bfb8      	it	lt
 800363c:	3307      	addlt	r3, #7
 800363e:	10db      	asrs	r3, r3, #3
 8003640:	f105 0b20 	add.w	fp, r5, #32
 8003644:	64eb      	str	r3, [r5, #76]	; 0x4c
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003646:	4629      	mov	r1, r5
 8003648:	4658      	mov	r0, fp
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 800364a:	f1ba 0f00 	cmp.w	sl, #0
 800364e:	d10c      	bne.n	800366a <encrypt_decrypt_init.part.0+0x29e>
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003650:	f7fe ff7e 	bl	8002550 <CA_AES_GCM_Encrypt_Init>
 8003654:	b1b8      	cbz	r0, 8003686 <encrypt_decrypt_init.part.0+0x2ba>
                  KMS_Free(hSession, p_ctx);
 8003656:	4629      	mov	r1, r5
 8003658:	4638      	mov	r0, r7
 800365a:	f001 f971 	bl	8004940 <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800365e:	2324      	movs	r3, #36	; 0x24
 8003660:	fb03 9808 	mla	r8, r3, r8, r9
 8003664:	f8c8 a028 	str.w	sl, [r8, #40]	; 0x28
  if (e_ret_status == CKR_OK)
 8003668:	e73f      	b.n	80034ea <encrypt_decrypt_init.part.0+0x11e>
                if (CA_AES_GCM_Decrypt_Init(&(p_ctx->ca_ctx),
 800366a:	f7ff f84d 	bl	8002708 <CA_AES_GCM_Decrypt_Init>
 800366e:	b150      	cbz	r0, 8003686 <encrypt_decrypt_init.part.0+0x2ba>
                  KMS_Free(hSession, p_ctx);
 8003670:	4629      	mov	r1, r5
 8003672:	4638      	mov	r0, r7
 8003674:	f001 f964 	bl	8004940 <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003678:	2324      	movs	r3, #36	; 0x24
 800367a:	fb03 9808 	mla	r8, r3, r8, r9
 800367e:	2300      	movs	r3, #0
 8003680:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (e_ret_status == CKR_OK)
 8003684:	e731      	b.n	80034ea <encrypt_decrypt_init.part.0+0x11e>
              if ((e_ret_status == CKR_OK) && (pGCMParams->ulAADLen != 0UL))
 8003686:	68f2      	ldr	r2, [r6, #12]
 8003688:	b12a      	cbz	r2, 8003696 <encrypt_decrypt_init.part.0+0x2ca>
                if (CA_AES_GCM_Header_Append(&(p_ctx->ca_ctx),
 800368a:	68b1      	ldr	r1, [r6, #8]
 800368c:	4658      	mov	r0, fp
 800368e:	f7ff f922 	bl	80028d6 <CA_AES_GCM_Header_Append>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1ec      	bne.n	8003670 <encrypt_decrypt_init.part.0+0x2a4>
    if (encdec_flag == KMS_FLAG_ENCRYPT)
 8003696:	f1ba 0f00 	cmp.w	sl, #0
 800369a:	d10f      	bne.n	80036bc <encrypt_decrypt_init.part.0+0x2f0>
      KMS_GETSESSION(hSession).state = KMS_SESSION_ENCRYPT;
 800369c:	2324      	movs	r3, #36	; 0x24
 800369e:	fb03 9808 	mla	r8, r3, r8, r9
 80036a2:	2302      	movs	r3, #2
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
 80036a4:	f8c8 300c 	str.w	r3, [r8, #12]
 80036a8:	e6b2      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
                e_ret_status = CKR_DEVICE_MEMORY;
 80036aa:	2431      	movs	r4, #49	; 0x31
 80036ac:	e6b0      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
 80036ae:	4604      	mov	r4, r0
 80036b0:	e6ae      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
 80036b2:	bf00      	nop
 80036b4:	20000c48 	.word	0x20000c48
 80036b8:	b10b0240 	.word	0xb10b0240
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
 80036bc:	2324      	movs	r3, #36	; 0x24
 80036be:	fb03 9808 	mla	r8, r3, r8, r9
 80036c2:	2303      	movs	r3, #3
 80036c4:	e7ee      	b.n	80036a4 <encrypt_decrypt_init.part.0+0x2d8>
    return CKR_SESSION_HANDLE_INVALID;
 80036c6:	24b3      	movs	r4, #179	; 0xb3
 80036c8:	e6a2      	b.n	8003410 <encrypt_decrypt_init.part.0+0x44>
 80036ca:	bf00      	nop

080036cc <KMS_EncryptInit>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         @ref encrypt_decrypt_init returned values
  */
CK_RV          KMS_EncryptInit(CK_SESSION_HANDLE hSession,
                               CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey)
{
 80036cc:	b570      	push	{r4, r5, r6, lr}
  if (!KMS_IS_INITIALIZED())
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <KMS_EncryptInit+0x30>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
{
 80036d2:	4604      	mov	r4, r0
 80036d4:	460d      	mov	r5, r1
 80036d6:	4616      	mov	r6, r2
  if (!KMS_IS_INITIALIZED())
 80036d8:	b153      	cbz	r3, 80036f0 <KMS_EncryptInit+0x24>
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80036da:	f000 ff87 	bl	80045ec <KMS_CheckSessionHdle>
 80036de:	4603      	mov	r3, r0
 80036e0:	b948      	cbnz	r0, 80036f6 <KMS_EncryptInit+0x2a>
 80036e2:	4632      	mov	r2, r6
 80036e4:	4629      	mov	r1, r5
 80036e6:	4620      	mov	r0, r4

  return (e_ret_status) ;
#else /* KMS_ENCRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ENCRYPT */
}
 80036e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036ec:	f7ff be6e 	b.w	80033cc <encrypt_decrypt_init.part.0>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80036f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
}
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_SESSION_HANDLE_INVALID;
 80036f6:	20b3      	movs	r0, #179	; 0xb3
  return (e_ret_status) ;
 80036f8:	e7fc      	b.n	80036f4 <KMS_EncryptInit+0x28>
 80036fa:	bf00      	nop
 80036fc:	20000c48 	.word	0x20000c48

08003700 <KMS_EncryptUpdate>:
  */
CK_RV          KMS_EncryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pPart, CK_ULONG ulPartLen,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG_PTR pulEncryptedPartLen)
{
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_ENCRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lEncryptPartLen = 0;

  if (!KMS_IS_INITIALIZED())
 8003704:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80037f4 <KMS_EncryptUpdate+0xf4>
{
 8003708:	b087      	sub	sp, #28
 800370a:	4615      	mov	r5, r2
  int32_t lEncryptPartLen = 0;
 800370c:	2200      	movs	r2, #0
 800370e:	9205      	str	r2, [sp, #20]
  if (!KMS_IS_INITIALIZED())
 8003710:	f89b 2000 	ldrb.w	r2, [fp]
{
 8003714:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	4607      	mov	r7, r0
 800371c:	4689      	mov	r9, r1
 800371e:	46da      	mov	sl, fp
  if (!KMS_IS_INITIALIZED())
 8003720:	2a00      	cmp	r2, #0
 8003722:	d05f      	beq.n	80037e4 <KMS_EncryptUpdate+0xe4>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003724:	f000 ff62 	bl	80045ec <KMS_CheckSessionHdle>
 8003728:	4604      	mov	r4, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d15d      	bne.n	80037ea <KMS_EncryptUpdate+0xea>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_ENCRYPT)
 800372e:	1e7e      	subs	r6, r7, #1
 8003730:	2224      	movs	r2, #36	; 0x24
 8003732:	fb02 b206 	mla	r2, r2, r6, fp
 8003736:	68d1      	ldr	r1, [r2, #12]
 8003738:	2902      	cmp	r1, #2
 800373a:	d158      	bne.n	80037ee <KMS_EncryptUpdate+0xee>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  KMS_CHECK_BUFFER_SECTION5_2(pEncryptedPart, pulEncryptedPartLen, ulPartLen);
 800373c:	9b03      	ldr	r3, [sp, #12]
 800373e:	b92b      	cbnz	r3, 800374c <KMS_EncryptUpdate+0x4c>
 8003740:	f8c8 5000 	str.w	r5, [r8]

  return e_ret_status;
#else /* KMS_ENCRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ENCRYPT */
}
 8003744:	4620      	mov	r0, r4
 8003746:	b007      	add	sp, #28
 8003748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  KMS_CHECK_BUFFER_SECTION5_2(pEncryptedPart, pulEncryptedPartLen, ulPartLen);
 800374c:	f8d8 1000 	ldr.w	r1, [r8]
 8003750:	42a9      	cmp	r1, r5
 8003752:	d204      	bcs.n	800375e <KMS_EncryptUpdate+0x5e>
 8003754:	f8c8 5000 	str.w	r5, [r8]
 8003758:	f44f 74a8 	mov.w	r4, #336	; 0x150
 800375c:	e7f2      	b.n	8003744 <KMS_EncryptUpdate+0x44>
  switch (KMS_GETSESSION(hSession).Mechanism)
 800375e:	6a11      	ldr	r1, [r2, #32]
 8003760:	f241 0082 	movw	r0, #4226	; 0x1082
 8003764:	4281      	cmp	r1, r0
 8003766:	d01c      	beq.n	80037a2 <KMS_EncryptUpdate+0xa2>
 8003768:	f241 0087 	movw	r0, #4231	; 0x1087
 800376c:	4281      	cmp	r1, r0
 800376e:	d030      	beq.n	80037d2 <KMS_EncryptUpdate+0xd2>
 8003770:	f241 0081 	movw	r0, #4225	; 0x1081
 8003774:	4281      	cmp	r1, r0
 8003776:	d023      	beq.n	80037c0 <KMS_EncryptUpdate+0xc0>
 8003778:	2470      	movs	r4, #112	; 0x70
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800377a:	2524      	movs	r5, #36	; 0x24
 800377c:	fb05 a506 	mla	r5, r5, r6, sl
    *pulEncryptedPartLen = 0UL;
 8003780:	f04f 0900 	mov.w	r9, #0
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003784:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    *pulEncryptedPartLen = 0UL;
 8003786:	f8c8 9000 	str.w	r9, [r8]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800378a:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800378e:	b121      	cbz	r1, 800379a <KMS_EncryptUpdate+0x9a>
      KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003790:	4638      	mov	r0, r7
 8003792:	f001 f8d5 	bl	8004940 <KMS_Free>
      KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003796:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    KMS_SetStateIdle(hSession);
 800379a:	4638      	mov	r0, r7
 800379c:	f000 ff5c 	bl	8004658 <KMS_SetStateIdle>
 80037a0:	e7d0      	b.n	8003744 <KMS_EncryptUpdate+0x44>
      if (CA_AES_CBC_Encrypt_Append(&(p_ctx->ca_ctx),
 80037a2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037a4:	aa05      	add	r2, sp, #20
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	4649      	mov	r1, r9
 80037aa:	462a      	mov	r2, r5
 80037ac:	3020      	adds	r0, #32
 80037ae:	f7fe fcfb 	bl	80021a8 <CA_AES_CBC_Encrypt_Append>
 80037b2:	b108      	cbz	r0, 80037b8 <KMS_EncryptUpdate+0xb8>
        e_ret_status = CKR_FUNCTION_FAILED;
 80037b4:	2406      	movs	r4, #6
 80037b6:	e7e0      	b.n	800377a <KMS_EncryptUpdate+0x7a>
    *pulEncryptedPartLen = (uint32_t)lEncryptPartLen;
 80037b8:	9b05      	ldr	r3, [sp, #20]
 80037ba:	f8c8 3000 	str.w	r3, [r8]
 80037be:	e7c1      	b.n	8003744 <KMS_EncryptUpdate+0x44>
      if (CA_AES_ECB_Encrypt_Append(&(p_ctx->ca_ctx),
 80037c0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037c2:	aa05      	add	r2, sp, #20
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	4649      	mov	r1, r9
 80037c8:	462a      	mov	r2, r5
 80037ca:	3020      	adds	r0, #32
 80037cc:	f7fe fe74 	bl	80024b8 <CA_AES_ECB_Encrypt_Append>
 80037d0:	e7ef      	b.n	80037b2 <KMS_EncryptUpdate+0xb2>
      if (CA_AES_GCM_Encrypt_Append(&(p_ctx->ca_ctx),
 80037d2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037d4:	aa05      	add	r2, sp, #20
 80037d6:	9200      	str	r2, [sp, #0]
 80037d8:	4649      	mov	r1, r9
 80037da:	462a      	mov	r2, r5
 80037dc:	3020      	adds	r0, #32
 80037de:	f7fe ff2f 	bl	8002640 <CA_AES_GCM_Encrypt_Append>
 80037e2:	e7e6      	b.n	80037b2 <KMS_EncryptUpdate+0xb2>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80037e4:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80037e8:	e7ac      	b.n	8003744 <KMS_EncryptUpdate+0x44>
    return CKR_SESSION_HANDLE_INVALID;
 80037ea:	24b3      	movs	r4, #179	; 0xb3
 80037ec:	e7aa      	b.n	8003744 <KMS_EncryptUpdate+0x44>
    return CKR_OPERATION_NOT_INITIALIZED;
 80037ee:	2491      	movs	r4, #145	; 0x91
 80037f0:	e7a8      	b.n	8003744 <KMS_EncryptUpdate+0x44>
 80037f2:	bf00      	nop
 80037f4:	20000c48 	.word	0x20000c48

080037f8 <KMS_Encrypt>:
{
 80037f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 80037fa:	9d08      	ldr	r5, [sp, #32]
 80037fc:	9500      	str	r5, [sp, #0]
{
 80037fe:	4604      	mov	r4, r0
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 8003800:	f7ff ff7e 	bl	8003700 <KMS_EncryptUpdate>
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <KMS_Encrypt+0x34>)
 8003806:	1e65      	subs	r5, r4, #1
 8003808:	2224      	movs	r2, #36	; 0x24
 800380a:	fb02 3505 	mla	r5, r2, r5, r3
 800380e:	2700      	movs	r7, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003810:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003812:	626f      	str	r7, [r5, #36]	; 0x24
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 8003814:	4606      	mov	r6, r0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003816:	b119      	cbz	r1, 8003820 <KMS_Encrypt+0x28>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003818:	4620      	mov	r0, r4
 800381a:	f001 f891 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800381e:	62af      	str	r7, [r5, #40]	; 0x28
  KMS_SetStateIdle(hSession);
 8003820:	4620      	mov	r0, r4
 8003822:	f000 ff19 	bl	8004658 <KMS_SetStateIdle>
}
 8003826:	4630      	mov	r0, r6
 8003828:	b003      	add	sp, #12
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	20000c48 	.word	0x20000c48

08003830 <KMS_EncryptFinal>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV          KMS_EncryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastEncryptedPart,
                                CK_ULONG_PTR pulLastEncryptedPartLen)
{
 8003830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_ENCRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lEncryptPartLen = 0;

  if (!KMS_IS_INITIALIZED())
 8003834:	4d32      	ldr	r5, [pc, #200]	; (8003900 <KMS_EncryptFinal+0xd0>)
  int32_t lEncryptPartLen = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	9301      	str	r3, [sp, #4]
  if (!KMS_IS_INITIALIZED())
 800383a:	782b      	ldrb	r3, [r5, #0]
{
 800383c:	4680      	mov	r8, r0
 800383e:	460f      	mov	r7, r1
 8003840:	4616      	mov	r6, r2
 8003842:	46a9      	mov	r9, r5
  if (!KMS_IS_INITIALIZED())
 8003844:	2b00      	cmp	r3, #0
 8003846:	d053      	beq.n	80038f0 <KMS_EncryptFinal+0xc0>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003848:	f000 fed0 	bl	80045ec <KMS_CheckSessionHdle>
 800384c:	4604      	mov	r4, r0
 800384e:	2800      	cmp	r0, #0
 8003850:	d151      	bne.n	80038f6 <KMS_EncryptFinal+0xc6>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_ENCRYPT)
 8003852:	f108 35ff 	add.w	r5, r8, #4294967295
 8003856:	2324      	movs	r3, #36	; 0x24
 8003858:	fb03 9305 	mla	r3, r3, r5, r9
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	2a02      	cmp	r2, #2
 8003860:	d14b      	bne.n	80038fa <KMS_EncryptFinal+0xca>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003862:	6a1a      	ldr	r2, [r3, #32]
 8003864:	f241 0182 	movw	r1, #4226	; 0x1082
 8003868:	428a      	cmp	r2, r1
 800386a:	d017      	beq.n	800389c <KMS_EncryptFinal+0x6c>
 800386c:	f241 0187 	movw	r1, #4231	; 0x1087
 8003870:	428a      	cmp	r2, r1
 8003872:	d024      	beq.n	80038be <KMS_EncryptFinal+0x8e>
 8003874:	f241 0181 	movw	r1, #4225	; 0x1081
 8003878:	428a      	cmp	r2, r1
 800387a:	d019      	beq.n	80038b0 <KMS_EncryptFinal+0x80>
 800387c:	2470      	movs	r4, #112	; 0x70

  /* Upon completion:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800387e:	2324      	movs	r3, #36	; 0x24
 8003880:	fb03 9505 	mla	r5, r3, r5, r9
 8003884:	2600      	movs	r6, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003886:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003888:	626e      	str	r6, [r5, #36]	; 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800388a:	b119      	cbz	r1, 8003894 <KMS_EncryptFinal+0x64>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 800388c:	4640      	mov	r0, r8
 800388e:	f001 f857 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003892:	62ae      	str	r6, [r5, #40]	; 0x28
  }

  KMS_SetStateIdle(hSession);
 8003894:	4640      	mov	r0, r8
 8003896:	f000 fedf 	bl	8004658 <KMS_SetStateIdle>

  return e_ret_status;
 800389a:	e014      	b.n	80038c6 <KMS_EncryptFinal+0x96>
      if (CA_AES_CBC_Encrypt_Finish(&(p_ctx->ca_ctx),
 800389c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800389e:	aa01      	add	r2, sp, #4
 80038a0:	4639      	mov	r1, r7
 80038a2:	3020      	adds	r0, #32
 80038a4:	f7fe fc9c 	bl	80021e0 <CA_AES_CBC_Encrypt_Finish>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0e8      	beq.n	800387e <KMS_EncryptFinal+0x4e>
        e_ret_status = CKR_FUNCTION_FAILED;
 80038ac:	2406      	movs	r4, #6
 80038ae:	e7e6      	b.n	800387e <KMS_EncryptFinal+0x4e>
      if (CA_AES_ECB_Encrypt_Finish(&(p_ctx->ca_ctx),
 80038b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80038b2:	aa01      	add	r2, sp, #4
 80038b4:	4639      	mov	r1, r7
 80038b6:	3020      	adds	r0, #32
 80038b8:	f7fe fe1a 	bl	80024f0 <CA_AES_ECB_Encrypt_Finish>
 80038bc:	e7f4      	b.n	80038a8 <KMS_EncryptFinal+0x78>
      kms_aes_gcm_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80038be:	6a98      	ldr	r0, [r3, #40]	; 0x28
      KMS_CHECK_BUFFER_SECTION5_2(pLastEncryptedPart, pulLastEncryptedPartLen, (uint32_t)(p_ctx->ca_ctx.mTagSize));
 80038c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038c2:	b927      	cbnz	r7, 80038ce <KMS_EncryptFinal+0x9e>
 80038c4:	6033      	str	r3, [r6, #0]
#else /* KMS_ENCRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ENCRYPT */
}
 80038c6:	4620      	mov	r0, r4
 80038c8:	b003      	add	sp, #12
 80038ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      KMS_CHECK_BUFFER_SECTION5_2(pLastEncryptedPart, pulLastEncryptedPartLen, (uint32_t)(p_ctx->ca_ctx.mTagSize));
 80038ce:	6832      	ldr	r2, [r6, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d203      	bcs.n	80038dc <KMS_EncryptFinal+0xac>
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f44f 74a8 	mov.w	r4, #336	; 0x150
 80038da:	e7f4      	b.n	80038c6 <KMS_EncryptFinal+0x96>
      if (CA_AES_GCM_Encrypt_Finish(&(p_ctx->ca_ctx),
 80038dc:	aa01      	add	r2, sp, #4
 80038de:	4639      	mov	r1, r7
 80038e0:	3020      	adds	r0, #32
 80038e2:	f7fe fee6 	bl	80026b2 <CA_AES_GCM_Encrypt_Finish>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d1e0      	bne.n	80038ac <KMS_EncryptFinal+0x7c>
        *pulLastEncryptedPartLen = (uint32_t)lEncryptPartLen;
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	6033      	str	r3, [r6, #0]
        e_ret_status = CKR_OK;
 80038ee:	e7c6      	b.n	800387e <KMS_EncryptFinal+0x4e>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80038f0:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80038f4:	e7e7      	b.n	80038c6 <KMS_EncryptFinal+0x96>
    return CKR_SESSION_HANDLE_INVALID;
 80038f6:	24b3      	movs	r4, #179	; 0xb3
 80038f8:	e7e5      	b.n	80038c6 <KMS_EncryptFinal+0x96>
    return CKR_OPERATION_NOT_INITIALIZED;
 80038fa:	2491      	movs	r4, #145	; 0x91
 80038fc:	e7e3      	b.n	80038c6 <KMS_EncryptFinal+0x96>
 80038fe:	bf00      	nop
 8003900:	20000c48 	.word	0x20000c48

08003904 <KMS_DecryptInit>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         @ref encrypt_decrypt_init returned values
  */
CK_RV          KMS_DecryptInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                               CK_OBJECT_HANDLE hKey)
{
 8003904:	b570      	push	{r4, r5, r6, lr}
  if (!KMS_IS_INITIALIZED())
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <KMS_DecryptInit+0x30>)
 8003908:	781b      	ldrb	r3, [r3, #0]
{
 800390a:	4604      	mov	r4, r0
 800390c:	460d      	mov	r5, r1
 800390e:	4616      	mov	r6, r2
  if (!KMS_IS_INITIALIZED())
 8003910:	b153      	cbz	r3, 8003928 <KMS_DecryptInit+0x24>
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003912:	f000 fe6b 	bl	80045ec <KMS_CheckSessionHdle>
 8003916:	b950      	cbnz	r0, 800392e <KMS_DecryptInit+0x2a>
 8003918:	4632      	mov	r2, r6
 800391a:	4629      	mov	r1, r5
 800391c:	4620      	mov	r0, r4
 800391e:	2301      	movs	r3, #1
  /* We reuse similar code between Encrypt & Decrypt Init */
  return    encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_DECRYPT);
#else /* KMS_DECRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DECRYPT */
}
 8003920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003924:	f7ff bd52 	b.w	80033cc <encrypt_decrypt_init.part.0>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003928:	f44f 70c8 	mov.w	r0, #400	; 0x190
}
 800392c:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_SESSION_HANDLE_INVALID;
 800392e:	20b3      	movs	r0, #179	; 0xb3
  return    encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_DECRYPT);
 8003930:	e7fc      	b.n	800392c <KMS_DecryptInit+0x28>
 8003932:	bf00      	nop
 8003934:	20000c48 	.word	0x20000c48

08003938 <KMS_DecryptUpdate>:
  */
CK_RV          KMS_DecryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG ulEncryptedPartLen,
                                 CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)
{
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	b085      	sub	sp, #20
 800393e:	461e      	mov	r6, r3
#if defined(KMS_DECRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lPartLen = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	9303      	str	r3, [sp, #12]

  if (!KMS_IS_INITIALIZED())
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <KMS_DecryptUpdate+0xfc>)
{
 8003946:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003948:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 800394a:	781a      	ldrb	r2, [r3, #0]
{
 800394c:	4681      	mov	r9, r0
 800394e:	468b      	mov	fp, r1
 8003950:	469a      	mov	sl, r3
  if (!KMS_IS_INITIALIZED())
 8003952:	2a00      	cmp	r2, #0
 8003954:	d067      	beq.n	8003a26 <KMS_DecryptUpdate+0xee>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003956:	f000 fe49 	bl	80045ec <KMS_CheckSessionHdle>
 800395a:	4604      	mov	r4, r0
 800395c:	2800      	cmp	r0, #0
 800395e:	d165      	bne.n	8003a2c <KMS_DecryptUpdate+0xf4>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_DECRYPT)
 8003960:	f109 38ff 	add.w	r8, r9, #4294967295
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	fb02 a208 	mla	r2, r2, r8, sl
 800396a:	68d3      	ldr	r3, [r2, #12]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d15f      	bne.n	8003a30 <KMS_DecryptUpdate+0xf8>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003970:	6a13      	ldr	r3, [r2, #32]
 8003972:	f241 0182 	movw	r1, #4226	; 0x1082
 8003976:	428b      	cmp	r3, r1
 8003978:	d01b      	beq.n	80039b2 <KMS_DecryptUpdate+0x7a>
 800397a:	f241 0187 	movw	r1, #4231	; 0x1087
 800397e:	428b      	cmp	r3, r1
 8003980:	d042      	beq.n	8003a08 <KMS_DecryptUpdate+0xd0>
 8003982:	f241 0181 	movw	r1, #4225	; 0x1081
 8003986:	428b      	cmp	r3, r1
 8003988:	d02f      	beq.n	80039ea <KMS_DecryptUpdate+0xb2>
 800398a:	2470      	movs	r4, #112	; 0x70
    *pulPartLen = 0UL;
    /* In case of error:
     * - free the allocated context
     * - release the session
     */
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800398c:	2324      	movs	r3, #36	; 0x24
 800398e:	fb03 a808 	mla	r8, r3, r8, sl
    *pulPartLen = 0UL;
 8003992:	2500      	movs	r5, #0
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003994:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    *pulPartLen = 0UL;
 8003998:	603d      	str	r5, [r7, #0]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800399a:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800399e:	b121      	cbz	r1, 80039aa <KMS_DecryptUpdate+0x72>
    {
      KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 80039a0:	4648      	mov	r0, r9
 80039a2:	f000 ffcd 	bl	8004940 <KMS_Free>
      KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80039a6:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
    }
    KMS_SetStateIdle(hSession);
 80039aa:	4648      	mov	r0, r9
 80039ac:	f000 fe54 	bl	8004658 <KMS_SetStateIdle>
 80039b0:	e001      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 80039b2:	b926      	cbnz	r6, 80039be <KMS_DecryptUpdate+0x86>
 80039b4:	603d      	str	r5, [r7, #0]

  return e_ret_status;
#else /* KMS_DECRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DECRYPT */
}
 80039b6:	4620      	mov	r0, r4
 80039b8:	b005      	add	sp, #20
 80039ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	d203      	bcs.n	80039cc <KMS_DecryptUpdate+0x94>
 80039c4:	603d      	str	r5, [r7, #0]
 80039c6:	f44f 74a8 	mov.w	r4, #336	; 0x150
 80039ca:	e7f4      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
      if (CA_AES_CBC_Decrypt_Append(&(p_ctx->ca_ctx),
 80039cc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80039ce:	ab03      	add	r3, sp, #12
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	462a      	mov	r2, r5
 80039d4:	4633      	mov	r3, r6
 80039d6:	4659      	mov	r1, fp
 80039d8:	3020      	adds	r0, #32
 80039da:	f7fe fc87 	bl	80022ec <CA_AES_CBC_Decrypt_Append>
 80039de:	b108      	cbz	r0, 80039e4 <KMS_DecryptUpdate+0xac>
        e_ret_status = CKR_FUNCTION_FAILED;
 80039e0:	2406      	movs	r4, #6
 80039e2:	e7d3      	b.n	800398c <KMS_DecryptUpdate+0x54>
    *pulPartLen = (uint32_t)lPartLen;
 80039e4:	9b03      	ldr	r3, [sp, #12]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	e7e5      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d0e2      	beq.n	80039b4 <KMS_DecryptUpdate+0x7c>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	42ab      	cmp	r3, r5
 80039f2:	d3e7      	bcc.n	80039c4 <KMS_DecryptUpdate+0x8c>
      if (CA_AES_ECB_Decrypt_Append(&(p_ctx->ca_ctx),
 80039f4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80039f6:	ab03      	add	r3, sp, #12
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	462a      	mov	r2, r5
 80039fc:	4633      	mov	r3, r6
 80039fe:	4659      	mov	r1, fp
 8003a00:	3020      	adds	r0, #32
 8003a02:	f7fe fd87 	bl	8002514 <CA_AES_ECB_Decrypt_Append>
 8003a06:	e7ea      	b.n	80039de <KMS_DecryptUpdate+0xa6>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	d0d3      	beq.n	80039b4 <KMS_DecryptUpdate+0x7c>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	42ab      	cmp	r3, r5
 8003a10:	d3d8      	bcc.n	80039c4 <KMS_DecryptUpdate+0x8c>
      if (CA_AES_GCM_Decrypt_Append(&(p_ctx->ca_ctx),
 8003a12:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003a14:	ab03      	add	r3, sp, #12
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4633      	mov	r3, r6
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	3020      	adds	r0, #32
 8003a20:	f7fe feea 	bl	80027f8 <CA_AES_GCM_Decrypt_Append>
 8003a24:	e7db      	b.n	80039de <KMS_DecryptUpdate+0xa6>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003a26:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8003a2a:	e7c4      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
    return CKR_SESSION_HANDLE_INVALID;
 8003a2c:	24b3      	movs	r4, #179	; 0xb3
 8003a2e:	e7c2      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
    return CKR_OPERATION_NOT_INITIALIZED;
 8003a30:	2491      	movs	r4, #145	; 0x91
 8003a32:	e7c0      	b.n	80039b6 <KMS_DecryptUpdate+0x7e>
 8003a34:	20000c48 	.word	0x20000c48

08003a38 <KMS_Decrypt>:
{
 8003a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003a3a:	9d08      	ldr	r5, [sp, #32]
 8003a3c:	9500      	str	r5, [sp, #0]
{
 8003a3e:	4604      	mov	r4, r0
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003a40:	f7ff ff7a 	bl	8003938 <KMS_DecryptUpdate>
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <KMS_Decrypt+0x34>)
 8003a46:	1e65      	subs	r5, r4, #1
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	fb02 3505 	mla	r5, r2, r5, r3
 8003a4e:	2700      	movs	r7, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003a50:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003a52:	626f      	str	r7, [r5, #36]	; 0x24
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003a54:	4606      	mov	r6, r0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003a56:	b119      	cbz	r1, 8003a60 <KMS_Decrypt+0x28>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 ff71 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003a5e:	62af      	str	r7, [r5, #40]	; 0x28
  KMS_SetStateIdle(hSession);
 8003a60:	4620      	mov	r0, r4
 8003a62:	f000 fdf9 	bl	8004658 <KMS_SetStateIdle>
}
 8003a66:	4630      	mov	r0, r6
 8003a68:	b003      	add	sp, #12
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6c:	20000c48 	.word	0x20000c48

08003a70 <KMS_DecryptFinal>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV          KMS_DecryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastPart, CK_ULONG_PTR pulLastPartLen)
{
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_DECRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;

  if (!KMS_IS_INITIALIZED())
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <KMS_DecryptFinal+0xcc>)
{
 8003a76:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8003a78:	781a      	ldrb	r2, [r3, #0]
{
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	460e      	mov	r6, r1
 8003a7e:	4699      	mov	r9, r3
  if (!KMS_IS_INITIALIZED())
 8003a80:	2a00      	cmp	r2, #0
 8003a82:	d053      	beq.n	8003b2c <KMS_DecryptFinal+0xbc>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003a84:	f000 fdb2 	bl	80045ec <KMS_CheckSessionHdle>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d151      	bne.n	8003b32 <KMS_DecryptFinal+0xc2>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_DECRYPT)
 8003a8e:	f108 37ff 	add.w	r7, r8, #4294967295
 8003a92:	2324      	movs	r3, #36	; 0x24
 8003a94:	fb03 9307 	mla	r3, r3, r7, r9
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	2a03      	cmp	r2, #3
 8003a9c:	d14b      	bne.n	8003b36 <KMS_DecryptFinal+0xc6>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	f241 0182 	movw	r1, #4226	; 0x1082
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	d017      	beq.n	8003ad8 <KMS_DecryptFinal+0x68>
 8003aa8:	f241 0187 	movw	r1, #4231	; 0x1087
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d024      	beq.n	8003afa <KMS_DecryptFinal+0x8a>
 8003ab0:	f241 0181 	movw	r1, #4225	; 0x1081
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	d019      	beq.n	8003aec <KMS_DecryptFinal+0x7c>
 8003ab8:	2470      	movs	r4, #112	; 0x70

  /* Upon completion:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003aba:	2524      	movs	r5, #36	; 0x24
 8003abc:	fb05 9507 	mla	r5, r5, r7, r9
 8003ac0:	2600      	movs	r6, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003ac2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003ac4:	626e      	str	r6, [r5, #36]	; 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003ac6:	b119      	cbz	r1, 8003ad0 <KMS_DecryptFinal+0x60>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003ac8:	4640      	mov	r0, r8
 8003aca:	f000 ff39 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003ace:	62ae      	str	r6, [r5, #40]	; 0x28
  }

  KMS_SetStateIdle(hSession);
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	f000 fdc1 	bl	8004658 <KMS_SetStateIdle>

  return e_ret_status;
 8003ad6:	e014      	b.n	8003b02 <KMS_DecryptFinal+0x92>
      if (CA_AES_CBC_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003ad8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ada:	462a      	mov	r2, r5
 8003adc:	4631      	mov	r1, r6
 8003ade:	3020      	adds	r0, #32
 8003ae0:	f7fe fc20 	bl	8002324 <CA_AES_CBC_Decrypt_Finish>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d0e8      	beq.n	8003aba <KMS_DecryptFinal+0x4a>
        e_ret_status = CKR_FUNCTION_FAILED;
 8003ae8:	2406      	movs	r4, #6
 8003aea:	e7e6      	b.n	8003aba <KMS_DecryptFinal+0x4a>
      if (CA_AES_ECB_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003aec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003aee:	462a      	mov	r2, r5
 8003af0:	4631      	mov	r1, r6
 8003af2:	3020      	adds	r0, #32
 8003af4:	f7fe fd2a 	bl	800254c <CA_AES_ECB_Decrypt_Finish>
 8003af8:	e7f4      	b.n	8003ae4 <KMS_DecryptFinal+0x74>
      kms_aes_gcm_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8003afa:	6a98      	ldr	r0, [r3, #40]	; 0x28
      KMS_CHECK_BUFFER_SECTION5_2(pLastPart, pulLastPartLen, (uint32_t)p_ctx->ca_ctx.mTagSize);
 8003afc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003afe:	b91e      	cbnz	r6, 8003b08 <KMS_DecryptFinal+0x98>
 8003b00:	602a      	str	r2, [r5, #0]
#else /* KMS_DECRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DECRYPT */
}
 8003b02:	4620      	mov	r0, r4
 8003b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      KMS_CHECK_BUFFER_SECTION5_2(pLastPart, pulLastPartLen, (uint32_t)p_ctx->ca_ctx.mTagSize);
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d203      	bcs.n	8003b16 <KMS_DecryptFinal+0xa6>
 8003b0e:	602a      	str	r2, [r5, #0]
 8003b10:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8003b14:	e7f5      	b.n	8003b02 <KMS_DecryptFinal+0x92>
      p_ctx->ca_ctx.pmTag = pLastPart;
 8003b16:	6486      	str	r6, [r0, #72]	; 0x48
      if (CA_AES_GCM_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	3020      	adds	r0, #32
 8003b1e:	f7fe fea4 	bl	800286a <CA_AES_GCM_Decrypt_Finish>
 8003b22:	f240 33eb 	movw	r3, #1003	; 0x3eb
 8003b26:	4298      	cmp	r0, r3
 8003b28:	d1de      	bne.n	8003ae8 <KMS_DecryptFinal+0x78>
 8003b2a:	e7c6      	b.n	8003aba <KMS_DecryptFinal+0x4a>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003b2c:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8003b30:	e7e7      	b.n	8003b02 <KMS_DecryptFinal+0x92>
    return CKR_SESSION_HANDLE_INVALID;
 8003b32:	24b3      	movs	r4, #179	; 0xb3
 8003b34:	e7e5      	b.n	8003b02 <KMS_DecryptFinal+0x92>
    return CKR_OPERATION_NOT_INITIALIZED;
 8003b36:	2491      	movs	r4, #145	; 0x91
 8003b38:	e7e3      	b.n	8003b02 <KMS_DecryptFinal+0x92>
 8003b3a:	bf00      	nop
 8003b3c:	20000c48 	.word	0x20000c48

08003b40 <KMS_Entry_CheckMechanismContent>:
  * @retval CKR_OK
  *         CKR_MECHANISM_INVALID
  */
#ifdef KMS_SE_CHECK_PARAMS
static CK_RV KMS_Entry_CheckMechanismContent(CK_MECHANISM_PTR  pMechanism)
{
 8003b40:	b510      	push	{r4, lr}
  CK_RV status = CKR_MECHANISM_INVALID;
  if (pMechanism != NULL_PTR)
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d05c      	beq.n	8003c00 <KMS_Entry_CheckMechanismContent+0xc0>
  {
    switch (pMechanism->mechanism)
 8003b46:	6804      	ldr	r4, [r0, #0]
 8003b48:	f241 028b 	movw	r2, #4235	; 0x108b
 8003b4c:	4294      	cmp	r4, r2
 8003b4e:	d833      	bhi.n	8003bb8 <KMS_Entry_CheckMechanismContent+0x78>
 8003b50:	f5b4 5f84 	cmp.w	r4, #4224	; 0x1080
 8003b54:	d812      	bhi.n	8003b7c <KMS_Entry_CheckMechanismContent+0x3c>
 8003b56:	f241 0250 	movw	r2, #4176	; 0x1050
 8003b5a:	4294      	cmp	r4, r2
 8003b5c:	d046      	beq.n	8003bec <KMS_Entry_CheckMechanismContent+0xac>
 8003b5e:	d84f      	bhi.n	8003c00 <KMS_Entry_CheckMechanismContent+0xc0>
 8003b60:	f5b4 7f08 	cmp.w	r4, #544	; 0x220
 8003b64:	d036      	beq.n	8003bd4 <KMS_Entry_CheckMechanismContent+0x94>
 8003b66:	d816      	bhi.n	8003b96 <KMS_Entry_CheckMechanismContent+0x56>
 8003b68:	2c06      	cmp	r4, #6
 8003b6a:	d033      	beq.n	8003bd4 <KMS_Entry_CheckMechanismContent+0x94>
 8003b6c:	2c40      	cmp	r4, #64	; 0x40
 8003b6e:	d031      	beq.n	8003bd4 <KMS_Entry_CheckMechanismContent+0x94>
 8003b70:	2c01      	cmp	r4, #1
      case CKM_SHA1_RSA_PKCS:
      case CKM_SHA256_RSA_PKCS:
      case CKM_ECDSA:
      case CKM_ECDSA_SHA1:
      case CKM_ECDSA_SHA256:
        status = CKR_OK;
 8003b72:	bf14      	ite	ne
 8003b74:	2470      	movne	r4, #112	; 0x70
 8003b76:	2400      	moveq	r4, #0
        status = CKR_MECHANISM_INVALID;
        break;
    }
  }
  return status;
}
 8003b78:	4620      	mov	r0, r4
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	f5a4 5384 	sub.w	r3, r4, #4224	; 0x1080
 8003b80:	3b01      	subs	r3, #1
 8003b82:	2b0a      	cmp	r3, #10
 8003b84:	d83c      	bhi.n	8003c00 <KMS_Entry_CheckMechanismContent+0xc0>
 8003b86:	e8df f003 	tbb	[pc, r3]
 8003b8a:	2525      	.short	0x2525
 8003b8c:	3b3b3b3b 	.word	0x3b3b3b3b
 8003b90:	253b1a27 	.word	0x253b1a27
 8003b94:	25          	.byte	0x25
 8003b95:	00          	.byte	0x00
    switch (pMechanism->mechanism)
 8003b96:	f241 0242 	movw	r2, #4162	; 0x1042
 8003b9a:	4294      	cmp	r4, r2
 8003b9c:	d805      	bhi.n	8003baa <KMS_Entry_CheckMechanismContent+0x6a>
 8003b9e:	f5b4 5f82 	cmp.w	r4, #4160	; 0x1040
 8003ba2:	d217      	bcs.n	8003bd4 <KMS_Entry_CheckMechanismContent+0x94>
 8003ba4:	f5b4 7f14 	cmp.w	r4, #592	; 0x250
 8003ba8:	e7e3      	b.n	8003b72 <KMS_Entry_CheckMechanismContent+0x32>
        status = CKR_OK;
 8003baa:	f241 0044 	movw	r0, #4164	; 0x1044
 8003bae:	4284      	cmp	r4, r0
 8003bb0:	bf14      	ite	ne
 8003bb2:	2470      	movne	r4, #112	; 0x70
 8003bb4:	2400      	moveq	r4, #0
 8003bb6:	e7df      	b.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>
 8003bb8:	f241 1004 	movw	r0, #4356	; 0x1104
 8003bbc:	e7f7      	b.n	8003bae <KMS_Entry_CheckMechanismContent+0x6e>
        CK_CCM_PARAMS *pParam = (CK_CCM_PARAMS *)(pMechanism->pParameter);
 8003bbe:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003bc0:	2c00      	cmp	r4, #0
 8003bc2:	d0d9      	beq.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pNonce), pParam->ulNonceLen * sizeof(CK_BYTE));
 8003bc4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003bc8:	f7fc fe54 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pAAD), pParam->ulAADLen * sizeof(CK_BYTE));
 8003bcc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pPublicData), pParam->ulPublicDataLen * sizeof(CK_BYTE));
 8003bd0:	f7fc fe50 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        status = CKR_OK;
 8003bd4:	2400      	movs	r4, #0
 8003bd6:	e7cf      	b.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>
        CK_GCM_PARAMS *pParam = (CK_GCM_PARAMS *)(pMechanism->pParameter);
 8003bd8:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d0cc      	beq.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pIv), pParam->ulIvLen * sizeof(CK_BYTE));
 8003bde:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003be2:	f7fc fe47 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pAAD), pParam->ulAADLen * sizeof(CK_BYTE));
 8003be6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003bea:	e7f1      	b.n	8003bd0 <KMS_Entry_CheckMechanismContent+0x90>
        CK_ECDH1_DERIVE_PARAMS *pParam = (CK_ECDH1_DERIVE_PARAMS *)(pMechanism->pParameter);
 8003bec:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003bee:	2c00      	cmp	r4, #0
 8003bf0:	d0c2      	beq.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pSharedData), pParam->ulSharedDataLen * sizeof(CK_BYTE));
 8003bf2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8003bf6:	f7fc fe3d 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pPublicData), pParam->ulPublicDataLen * sizeof(CK_BYTE));
 8003bfa:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8003bfe:	e7e7      	b.n	8003bd0 <KMS_Entry_CheckMechanismContent+0x90>
    switch (pMechanism->mechanism)
 8003c00:	2470      	movs	r4, #112	; 0x70
 8003c02:	e7b9      	b.n	8003b78 <KMS_Entry_CheckMechanismContent+0x38>

08003c04 <KMS_Entry>:
  * @param  arguments function ID dependent arguments
  * @return Operation status
  * @retval Any PKCS11 CK_RV values
  */
CK_RV KMS_Entry(KMS_FunctionID_t eID, va_list arguments)
{
 8003c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    return CKR_FUNCTION_FAILED;
  }

  /* Check that the Function ID is not locked */
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003c08:	f420 057f 	bic.w	r5, r0, #16711680	; 0xff0000
 8003c0c:	4628      	mov	r0, r5
{
 8003c0e:	460c      	mov	r4, r1
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003c10:	f001 fc0c 	bl	800542c <KMS_CheckServiceFctIdIsNotLocked>
 8003c14:	b118      	cbz	r0, 8003c1e <KMS_Entry+0x1a>
  {
    return CKR_FUNCTION_FAILED;
 8003c16:	2006      	movs	r0, #6

  /* Clean up */
  va_end(arguments);

  return e_ret_status;
}
 8003c18:	b003      	add	sp, #12
 8003c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f001 fc04 	bl	800542c <KMS_CheckServiceFctIdIsNotLocked>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1f6      	bne.n	8003c16 <KMS_Entry+0x12>
  switch (eID & (~KMS_CLUST_MASK))
 8003c28:	3d01      	subs	r5, #1
 8003c2a:	2d45      	cmp	r5, #69	; 0x45
 8003c2c:	f200 8458 	bhi.w	80044e0 <KMS_Entry+0x8dc>
 8003c30:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003c34:	004c0046 	.word	0x004c0046
 8003c38:	04560456 	.word	0x04560456
 8003c3c:	04560456 	.word	0x04560456
 8003c40:	00520456 	.word	0x00520456
 8003c44:	04560456 	.word	0x04560456
 8003c48:	00610456 	.word	0x00610456
 8003c4c:	04560080 	.word	0x04560080
 8003c50:	04560456 	.word	0x04560456
 8003c54:	04560456 	.word	0x04560456
 8003c58:	00910456 	.word	0x00910456
 8003c5c:	00bb0456 	.word	0x00bb0456
 8003c60:	00d40456 	.word	0x00d40456
 8003c64:	012700ff 	.word	0x012700ff
 8003c68:	016e014e 	.word	0x016e014e
 8003c6c:	01ab0180 	.word	0x01ab0180
 8003c70:	01f601cf 	.word	0x01f601cf
 8003c74:	02410215 	.word	0x02410215
 8003c78:	02890265 	.word	0x02890265
 8003c7c:	02cc02a8 	.word	0x02cc02a8
 8003c80:	045602f1 	.word	0x045602f1
 8003c84:	032a030b 	.word	0x032a030b
 8003c88:	04560356 	.word	0x04560356
 8003c8c:	04560456 	.word	0x04560456
 8003c90:	038a0456 	.word	0x038a0456
 8003c94:	045603b6 	.word	0x045603b6
 8003c98:	04560456 	.word	0x04560456
 8003c9c:	04560456 	.word	0x04560456
 8003ca0:	04560456 	.word	0x04560456
 8003ca4:	04560456 	.word	0x04560456
 8003ca8:	04560456 	.word	0x04560456
 8003cac:	03e20456 	.word	0x03e20456
 8003cb0:	04560456 	.word	0x04560456
 8003cb4:	04560456 	.word	0x04560456
 8003cb8:	04270456 	.word	0x04270456
 8003cbc:	044a043e 	.word	0x044a043e
      e_ret_status = KMS_Initialize(pInitArgs);
 8003cc0:	6820      	ldr	r0, [r4, #0]
}
 8003cc2:	b003      	add	sp, #12
 8003cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Initialize(pInitArgs);
 8003cc8:	f000 bc10 	b.w	80044ec <KMS_Initialize>
      e_ret_status = KMS_Finalize(pReserved);
 8003ccc:	6820      	ldr	r0, [r4, #0]
}
 8003cce:	b003      	add	sp, #12
 8003cd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Finalize(pReserved);
 8003cd4:	f000 bc3c 	b.w	8004550 <KMS_Finalize>
      type        = va_arg(arguments, CK_MECHANISM_TYPE);
 8003cd8:	e9d4 5600 	ldrd	r5, r6, [r4]
      pInfo       = va_arg(arguments, CK_MECHANISM_INFO_PTR);
 8003cdc:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, sizeof(CK_MECHANISM_INFO));
 8003cde:	210c      	movs	r1, #12
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7fc fdc7 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        e_ret_status = KMS_GetMechanismInfo(slotID, type, pInfo);
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4628      	mov	r0, r5
}
 8003cec:	b003      	add	sp, #12
 8003cee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_GetMechanismInfo(slotID, type, pInfo);
 8003cf2:	f000 bcbb 	b.w	800466c <KMS_GetMechanismInfo>
      Notify = va_arg(arguments, CK_NOTIFY);
 8003cf6:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
      flags = va_arg(arguments, uint32_t);
 8003cfa:	e9d4 7800 	ldrd	r7, r8, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pApplication, sizeof(CK_VOID_PTR));
 8003cfe:	2104      	movs	r1, #4
      phSession = va_arg(arguments, CK_SESSION_HANDLE_PTR);
 8003d00:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pApplication, sizeof(CK_VOID_PTR));
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7fc fdb6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)Notify, sizeof(CK_NOTIFY));
 8003d08:	2104      	movs	r1, #4
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f7fc fdb2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phSession, sizeof(CK_SESSION_HANDLE));
 8003d10:	2104      	movs	r1, #4
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7fc fdae 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003d18:	4bc0      	ldr	r3, [pc, #768]	; (800401c <KMS_Entry+0x418>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b913      	cbnz	r3, 8003d24 <KMS_Entry+0x120>
        e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8003d1e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003d22:	e779      	b.n	8003c18 <KMS_Entry+0x14>
      e_ret_status = KMS_OpenSession(slotID,  flags, pApplication, Notify, phSession);
 8003d24:	9400      	str	r4, [sp, #0]
 8003d26:	4633      	mov	r3, r6
 8003d28:	462a      	mov	r2, r5
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f000 fc29 	bl	8004584 <KMS_OpenSession>
      break;
 8003d32:	e771      	b.n	8003c18 <KMS_Entry+0x14>
      if (!KMS_IS_INITIALIZED())
 8003d34:	4bb9      	ldr	r3, [pc, #740]	; (800401c <KMS_Entry+0x418>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <KMS_Entry+0x11a>
      hSession = va_arg(arguments, CK_SESSION_HANDLE);
 8003d3c:	6824      	ldr	r4, [r4, #0]
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 fc54 	bl	80045ec <KMS_CheckSessionHdle>
 8003d44:	b108      	cbz	r0, 8003d4a <KMS_Entry+0x146>
        e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8003d46:	20b3      	movs	r0, #179	; 0xb3
 8003d48:	e766      	b.n	8003c18 <KMS_Entry+0x14>
      e_ret_status = KMS_CloseSession(hSession);
 8003d4a:	4620      	mov	r0, r4
}
 8003d4c:	b003      	add	sp, #12
 8003d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CloseSession(hSession);
 8003d52:	f000 bc5d 	b.w	8004610 <KMS_CloseSession>
      pTemplate = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8003d56:	e9d4 7500 	ldrd	r7, r5, [r4]
      phObject = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8003d5a:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
 8003d5e:	260c      	movs	r6, #12
 8003d60:	462c      	mov	r4, r5
 8003d62:	fb06 5608 	mla	r6, r6, r8, r5
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d115      	bne.n	8003d96 <KMS_Entry+0x192>
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE));
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	4648      	mov	r0, r9
 8003d6e:	f7fc fd81 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003d72:	4baa      	ldr	r3, [pc, #680]	; (800401c <KMS_Entry+0x418>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0d1      	beq.n	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f000 fc36 	bl	80045ec <KMS_CheckSessionHdle>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1e0      	bne.n	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_CreateObject(hSession, pTemplate, ulCount, phObject);
 8003d84:	464b      	mov	r3, r9
 8003d86:	4642      	mov	r2, r8
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4638      	mov	r0, r7
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CreateObject(hSession, pTemplate, ulCount, phObject);
 8003d92:	f7ff b92d 	b.w	8002ff0 <KMS_CreateObject>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003d96:	4620      	mov	r0, r4
 8003d98:	210c      	movs	r1, #12
 8003d9a:	f7fc fd6b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003d9e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003da2:	f7fc fd67 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003da6:	340c      	adds	r4, #12
 8003da8:	e7dd      	b.n	8003d66 <KMS_Entry+0x162>
      if (!KMS_IS_INITIALIZED())
 8003daa:	4b9c      	ldr	r3, [pc, #624]	; (800401c <KMS_Entry+0x418>)
      hSession = va_arg(arguments, CK_SESSION_HANDLE);
 8003dac:	6825      	ldr	r5, [r4, #0]
      if (!KMS_IS_INITIALIZED())
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0b4      	beq.n	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003db4:	4628      	mov	r0, r5
      hObject = va_arg(arguments, CK_OBJECT_HANDLE);
 8003db6:	6864      	ldr	r4, [r4, #4]
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003db8:	f000 fc18 	bl	80045ec <KMS_CheckSessionHdle>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d1c2      	bne.n	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hObject);
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f001 fa77 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_NVM_DYNAMIC_ID) ||
 8003dc6:	3802      	subs	r0, #2
 8003dc8:	b2c0      	uxtb	r0, r0
 8003dca:	2801      	cmp	r0, #1
 8003dcc:	d84d      	bhi.n	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_DestroyObject(hSession, hObject);
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4628      	mov	r0, r5
}
 8003dd2:	b003      	add	sp, #12
 8003dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_DestroyObject(hSession, hObject);
 8003dd8:	f7ff b956 	b.w	8003088 <KMS_DestroyObject>
      ulCount        = va_arg(arguments, CK_ULONG);
 8003ddc:	e9d4 5902 	ldrd	r5, r9, [r4, #8]
 8003de0:	260c      	movs	r6, #12
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 8003de2:	e9d4 7800 	ldrd	r7, r8, [r4]
      pTemplate      = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8003de6:	fb06 5609 	mla	r6, r6, r9, r5
 8003dea:	462c      	mov	r4, r5
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d116      	bne.n	8003e1e <KMS_Entry+0x21a>
      if (!KMS_IS_INITIALIZED())
 8003df0:	4b8a      	ldr	r3, [pc, #552]	; (800401c <KMS_Entry+0x418>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d092      	beq.n	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f000 fbf7 	bl	80045ec <KMS_CheckSessionHdle>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d1a1      	bne.n	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hObject);
 8003e02:	4640      	mov	r0, r8
 8003e04:	f001 fa56 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 8003e08:	2803      	cmp	r0, #3
 8003e0a:	d82e      	bhi.n	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_GetAttributeValue(hSession, hObject, pTemplate, ulCount);
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	462a      	mov	r2, r5
 8003e10:	4641      	mov	r1, r8
 8003e12:	4638      	mov	r0, r7
}
 8003e14:	b003      	add	sp, #12
 8003e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_GetAttributeValue(hSession, hObject, pTemplate, ulCount);
 8003e1a:	f7ff b967 	b.w	80030ec <KMS_GetAttributeValue>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003e1e:	4620      	mov	r0, r4
 8003e20:	210c      	movs	r1, #12
 8003e22:	f7fc fd27 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003e26:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003e2a:	f7fc fd23 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003e2e:	340c      	adds	r4, #12
 8003e30:	e7dc      	b.n	8003dec <KMS_Entry+0x1e8>
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 8003e32:	e9d4 7600 	ldrd	r7, r6, [r4]
      ulCount        = va_arg(arguments, CK_ULONG);
 8003e36:	e9d4 5402 	ldrd	r5, r4, [r4, #8]
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	fb03 5404 	mla	r4, r3, r4, r5
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003e40:	42ac      	cmp	r4, r5
 8003e42:	d114      	bne.n	8003e6e <KMS_Entry+0x26a>
      if (!KMS_IS_INITIALIZED())
 8003e44:	4b75      	ldr	r3, [pc, #468]	; (800401c <KMS_Entry+0x418>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f43f af68 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f000 fbcc 	bl	80045ec <KMS_CheckSessionHdle>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	f47f af76 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hObject);
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f001 fa2a 	bl	80052b4 <KMS_Objects_GetRange>
          (object_range == KMS_OBJECT_RANGE_NVM_DYNAMIC_ID) ||
 8003e60:	3801      	subs	r0, #1
      if ((object_range == KMS_OBJECT_RANGE_NVM_STATIC_ID) ||
 8003e62:	b2c0      	uxtb	r0, r0
 8003e64:	2802      	cmp	r0, #2
 8003e66:	f240 833b 	bls.w	80044e0 <KMS_Entry+0x8dc>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8003e6a:	2082      	movs	r0, #130	; 0x82
 8003e6c:	e6d4      	b.n	8003c18 <KMS_Entry+0x14>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003e6e:	4628      	mov	r0, r5
 8003e70:	210c      	movs	r1, #12
 8003e72:	f7fc fcff 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003e76:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8003e7a:	f7fc fcfb 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003e7e:	350c      	adds	r5, #12
 8003e80:	e7de      	b.n	8003e40 <KMS_Entry+0x23c>
      pTemplate      = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8003e82:	e9d4 7500 	ldrd	r7, r5, [r4]
      ulCount         = va_arg(arguments, CK_ULONG);
 8003e86:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8003e8a:	260c      	movs	r6, #12
 8003e8c:	462c      	mov	r4, r5
 8003e8e:	fb06 5608 	mla	r6, r6, r8, r5
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d112      	bne.n	8003ebc <KMS_Entry+0x2b8>
      if (!KMS_IS_INITIALIZED())
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <KMS_Entry+0x418>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f43f af3f 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f000 fba3 	bl	80045ec <KMS_CheckSessionHdle>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f47f af4d 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_FindObjectsInit(hSession, pTemplate, ulCount);
 8003eac:	4642      	mov	r2, r8
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4638      	mov	r0, r7
}
 8003eb2:	b003      	add	sp, #12
 8003eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjectsInit(hSession, pTemplate, ulCount);
 8003eb8:	f7ff b9a6 	b.w	8003208 <KMS_FindObjectsInit>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	210c      	movs	r1, #12
 8003ec0:	f7fc fcd8 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003ec4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003ec8:	f7fc fcd4 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003ecc:	340c      	adds	r4, #12
 8003ece:	e7e0      	b.n	8003e92 <KMS_Entry+0x28e>
      phObject          = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8003ed0:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulObjectCount    = va_arg(arguments, CK_ULONG_PTR);
 8003ed4:	e9d4 7402 	ldrd	r7, r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE)*ulMaxObjectCount);
 8003ed8:	4630      	mov	r0, r6
 8003eda:	00b9      	lsls	r1, r7, #2
 8003edc:	f7fc fcca 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulObjectCount, sizeof(CK_ULONG));
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7fc fcc6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	; (800401c <KMS_Entry+0x418>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f43f af16 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fb7a 	bl	80045ec <KMS_CheckSessionHdle>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	f47f af24 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_FindObjects(hSession, phObject, ulMaxObjectCount, pulObjectCount);
 8003efe:	4623      	mov	r3, r4
 8003f00:	463a      	mov	r2, r7
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
}
 8003f06:	b003      	add	sp, #12
 8003f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjects(hSession, phObject, ulMaxObjectCount, pulObjectCount);
 8003f0c:	f7ff b9cc 	b.w	80032a8 <KMS_FindObjects>
      if (!KMS_IS_INITIALIZED())
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <KMS_Entry+0x418>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f43f af02 	beq.w	8003d1e <KMS_Entry+0x11a>
      hSession          = va_arg(arguments, CK_SESSION_HANDLE);
 8003f1a:	6824      	ldr	r4, [r4, #0]
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fb65 	bl	80045ec <KMS_CheckSessionHdle>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f47f af0f 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_FindObjectsFinal(hSession);
 8003f28:	4620      	mov	r0, r4
}
 8003f2a:	b003      	add	sp, #12
 8003f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjectsFinal(hSession);
 8003f30:	f7ff b9f2 	b.w	8003318 <KMS_FindObjectsFinal>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8003f34:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8003f38:	210c      	movs	r1, #12
 8003f3a:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8003f3c:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8003f3e:	f7fc fc99 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8003f42:	b9bd      	cbnz	r5, 8003f74 <KMS_Entry+0x370>
      if (!KMS_IS_INITIALIZED())
 8003f44:	4b35      	ldr	r3, [pc, #212]	; (800401c <KMS_Entry+0x418>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f43f aee8 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f000 fb4c 	bl	80045ec <KMS_CheckSessionHdle>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	f47f aef6 	bne.w	8003d46 <KMS_Entry+0x142>
      if (KMS_Objects_GetRange(hKey) == KMS_OBJECT_RANGE_UNKNOWN)
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f001 f9aa 	bl	80052b4 <KMS_Objects_GetRange>
 8003f60:	2806      	cmp	r0, #6
 8003f62:	d082      	beq.n	8003e6a <KMS_Entry+0x266>
      e_ret_status = KMS_EncryptInit(hSession, pMechanism, hKey);
 8003f64:	4622      	mov	r2, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
}
 8003f6a:	b003      	add	sp, #12
 8003f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_EncryptInit(hSession, pMechanism, hKey);
 8003f70:	f7ff bbac 	b.w	80036cc <KMS_EncryptInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 8003f74:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8003f78:	f7fc fc7c 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff fddf 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d0de      	beq.n	8003f44 <KMS_Entry+0x340>
          e_ret_status = CKR_MECHANISM_PARAM_INVALID;
 8003f86:	2071      	movs	r0, #113	; 0x71
 8003f88:	e646      	b.n	8003c18 <KMS_Entry+0x14>
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 8003f8a:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 8003f8e:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 8003f92:	4629      	mov	r1, r5
      pulEncryptedDataLen   = va_arg(arguments, CK_ULONG_PTR);
 8003f94:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7fc fc6c 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulDataLen * sizeof(CK_BYTE));
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7fc fc68 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedDataLen, sizeof(CK_ULONG));
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7fc fc64 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <KMS_Entry+0x418>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f43f aeb4 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f000 fb18 	bl	80045ec <KMS_CheckSessionHdle>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f47f aec2 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_Encrypt(hSession, pData, ulDataLen, pEncryptedData, pulEncryptedDataLen);
 8003fc2:	9400      	str	r4, [sp, #0]
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	462a      	mov	r2, r5
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff fc14 	bl	80037f8 <KMS_Encrypt>
      break;
 8003fd0:	e622      	b.n	8003c18 <KMS_Entry+0x14>
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 8003fd2:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 8003fd6:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 8003fda:	4629      	mov	r1, r5
      pulEncryptedPartLen   = va_arg(arguments, CK_ULONG_PTR);
 8003fdc:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f7fc fc48 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulPartLen * sizeof(CK_BYTE));
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7fc fc44 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedPartLen, sizeof(CK_ULONG));
 8003fec:	2104      	movs	r1, #4
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7fc fc40 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <KMS_Entry+0x418>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f43f ae90 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 faf4 	bl	80045ec <KMS_CheckSessionHdle>
 8004004:	2800      	cmp	r0, #0
 8004006:	f47f ae9e 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_EncryptUpdate(hSession, pPart, ulPartLen, pEncryptedPart, pulEncryptedPartLen);
 800400a:	9400      	str	r4, [sp, #0]
 800400c:	4643      	mov	r3, r8
 800400e:	462a      	mov	r2, r5
 8004010:	4639      	mov	r1, r7
 8004012:	4630      	mov	r0, r6
 8004014:	f7ff fb74 	bl	8003700 <KMS_EncryptUpdate>
      break;
 8004018:	e5fe      	b.n	8003c18 <KMS_Entry+0x14>
 800401a:	bf00      	nop
 800401c:	20000c48 	.word	0x20000c48
      pLastEncryptedPart            = va_arg(arguments, CK_BYTE_PTR);
 8004020:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulLastEncryptedPartLen       = va_arg(arguments, CK_ULONG_PTR);
 8004024:	68a4      	ldr	r4, [r4, #8]
      if (pulLastEncryptedPartLen != NULL)
 8004026:	b13c      	cbz	r4, 8004038 <KMS_Entry+0x434>
        KMS_LL_IsBufferInSecureEnclave((void *)pulLastEncryptedPartLen, sizeof(CK_ULONG));
 8004028:	2104      	movs	r1, #4
 800402a:	4620      	mov	r0, r4
 800402c:	f7fc fc22 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastEncryptedPart, (*pulLastEncryptedPartLen)*sizeof(CK_BYTE));
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	4630      	mov	r0, r6
 8004034:	f7fc fc1e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004038:	4bc2      	ldr	r3, [pc, #776]	; (8004344 <KMS_Entry+0x740>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f43f ae6e 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004042:	4628      	mov	r0, r5
 8004044:	f000 fad2 	bl	80045ec <KMS_CheckSessionHdle>
 8004048:	2800      	cmp	r0, #0
 800404a:	f47f ae7c 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_EncryptFinal(hSession, pLastEncryptedPart, pulLastEncryptedPartLen);
 800404e:	4622      	mov	r2, r4
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
}
 8004054:	b003      	add	sp, #12
 8004056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_EncryptFinal(hSession, pLastEncryptedPart, pulLastEncryptedPartLen);
 800405a:	f7ff bbe9 	b.w	8003830 <KMS_EncryptFinal>
      pMechanism    = va_arg(arguments, CK_MECHANISM_PTR);
 800405e:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004062:	210c      	movs	r1, #12
 8004064:	4628      	mov	r0, r5
      hKey          = va_arg(arguments, CK_OBJECT_HANDLE);
 8004066:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004068:	f7fc fc04 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 800406c:	b9c5      	cbnz	r5, 80040a0 <KMS_Entry+0x49c>
      if (!KMS_IS_INITIALIZED())
 800406e:	4bb5      	ldr	r3, [pc, #724]	; (8004344 <KMS_Entry+0x740>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f43f ae53 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004078:	4630      	mov	r0, r6
 800407a:	f000 fab7 	bl	80045ec <KMS_CheckSessionHdle>
 800407e:	2800      	cmp	r0, #0
 8004080:	f47f ae61 	bne.w	8003d46 <KMS_Entry+0x142>
      if (KMS_Objects_GetRange(hKey) == KMS_OBJECT_RANGE_UNKNOWN)
 8004084:	4620      	mov	r0, r4
 8004086:	f001 f915 	bl	80052b4 <KMS_Objects_GetRange>
 800408a:	2806      	cmp	r0, #6
 800408c:	f43f aeed 	beq.w	8003e6a <KMS_Entry+0x266>
      e_ret_status = KMS_DecryptInit(hSession, pMechanism, hKey);
 8004090:	4622      	mov	r2, r4
 8004092:	4629      	mov	r1, r5
 8004094:	4630      	mov	r0, r6
}
 8004096:	b003      	add	sp, #12
 8004098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DecryptInit(hSession, pMechanism, hKey);
 800409c:	f7ff bc32 	b.w	8003904 <KMS_DecryptInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 80040a0:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 80040a4:	f7fc fbe6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7ff fd49 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f47f af69 	bne.w	8003f86 <KMS_Entry+0x382>
 80040b4:	e7db      	b.n	800406e <KMS_Entry+0x46a>
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 80040b6:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 80040ba:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulEncryptedDataLen * sizeof(CK_BYTE));
 80040be:	4629      	mov	r1, r5
      pulDataLen            = va_arg(arguments, CK_ULONG_PTR);
 80040c0:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulEncryptedDataLen * sizeof(CK_BYTE));
 80040c2:	4638      	mov	r0, r7
 80040c4:	f7fc fbd6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulEncryptedDataLen * sizeof(CK_BYTE));
 80040c8:	4629      	mov	r1, r5
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7fc fbd2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulDataLen, sizeof(CK_ULONG));
 80040d0:	2104      	movs	r1, #4
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fc fbce 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80040d8:	4b9a      	ldr	r3, [pc, #616]	; (8004344 <KMS_Entry+0x740>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f43f ae1e 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 fa82 	bl	80045ec <KMS_CheckSessionHdle>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f47f ae2c 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen,
 80040ee:	9400      	str	r4, [sp, #0]
 80040f0:	4643      	mov	r3, r8
 80040f2:	462a      	mov	r2, r5
 80040f4:	4639      	mov	r1, r7
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7ff fc9e 	bl	8003a38 <KMS_Decrypt>
      break;
 80040fc:	e58c      	b.n	8003c18 <KMS_Entry+0x14>
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 80040fe:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 8004102:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 8004106:	4629      	mov	r1, r5
      pulPartLen            = va_arg(arguments, CK_ULONG_PTR);
 8004108:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 800410a:	4638      	mov	r0, r7
 800410c:	f7fc fbb2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 8004110:	4629      	mov	r1, r5
 8004112:	4640      	mov	r0, r8
 8004114:	f7fc fbae 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulPartLen, sizeof(CK_ULONG));
 8004118:	2104      	movs	r1, #4
 800411a:	4620      	mov	r0, r4
 800411c:	f7fc fbaa 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004120:	4b88      	ldr	r3, [pc, #544]	; (8004344 <KMS_Entry+0x740>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f43f adfa 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800412a:	4630      	mov	r0, r6
 800412c:	f000 fa5e 	bl	80045ec <KMS_CheckSessionHdle>
 8004130:	2800      	cmp	r0, #0
 8004132:	f47f ae08 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedPart, ulEncryptedPartLen, pPart, pulPartLen);
 8004136:	9400      	str	r4, [sp, #0]
 8004138:	4643      	mov	r3, r8
 800413a:	462a      	mov	r2, r5
 800413c:	4639      	mov	r1, r7
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff fbfa 	bl	8003938 <KMS_DecryptUpdate>
      break;
 8004144:	e568      	b.n	8003c18 <KMS_Entry+0x14>
      pLastPart       = va_arg(arguments, CK_BYTE_PTR);
 8004146:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulLastPartLen  = va_arg(arguments, CK_ULONG_PTR);
 800414a:	68a4      	ldr	r4, [r4, #8]
      if (pulLastPartLen != NULL)
 800414c:	b13c      	cbz	r4, 800415e <KMS_Entry+0x55a>
        KMS_LL_IsBufferInSecureEnclave((void *)pulLastPartLen, sizeof(CK_ULONG));
 800414e:	2104      	movs	r1, #4
 8004150:	4620      	mov	r0, r4
 8004152:	f7fc fb8f 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastPart, (*pulLastPartLen)*sizeof(CK_BYTE));
 8004156:	6821      	ldr	r1, [r4, #0]
 8004158:	4630      	mov	r0, r6
 800415a:	f7fc fb8b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 800415e:	4b79      	ldr	r3, [pc, #484]	; (8004344 <KMS_Entry+0x740>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f43f addb 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fa3f 	bl	80045ec <KMS_CheckSessionHdle>
 800416e:	2800      	cmp	r0, #0
 8004170:	f47f ade9 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_DecryptFinal(hSession, pLastPart, pulLastPartLen);
 8004174:	4622      	mov	r2, r4
 8004176:	4631      	mov	r1, r6
 8004178:	4628      	mov	r0, r5
}
 800417a:	b003      	add	sp, #12
 800417c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DecryptFinal(hSession, pLastPart, pulLastPartLen);
 8004180:	f7ff bc76 	b.w	8003a70 <KMS_DecryptFinal>
      pMechanism       = va_arg(arguments, CK_MECHANISM_PTR);
 8004184:	e9d4 5400 	ldrd	r5, r4, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004188:	210c      	movs	r1, #12
 800418a:	4620      	mov	r0, r4
 800418c:	f7fc fb72 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8004190:	b98c      	cbnz	r4, 80041b6 <KMS_Entry+0x5b2>
      if (!KMS_IS_INITIALIZED())
 8004192:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <KMS_Entry+0x740>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f43f adc1 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800419c:	4628      	mov	r0, r5
 800419e:	f000 fa25 	bl	80045ec <KMS_CheckSessionHdle>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	f47f adcf 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_DigestInit(hSession, pMechanism);
 80041a8:	4621      	mov	r1, r4
 80041aa:	4628      	mov	r0, r5
}
 80041ac:	b003      	add	sp, #12
 80041ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestInit(hSession, pMechanism);
 80041b2:	f7fe be0b 	b.w	8002dcc <KMS_DigestInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 80041b6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80041ba:	f7fc fb5b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff fcbe 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f47f aede 	bne.w	8003f86 <KMS_Entry+0x382>
 80041ca:	e7e2      	b.n	8004192 <KMS_Entry+0x58e>
      pData         = va_arg(arguments, CK_BYTE_PTR);
 80041cc:	e9d4 5600 	ldrd	r5, r6, [r4]
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 80041d0:	e9d4 7802 	ldrd	r7, r8, [r4, #8]
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 80041d4:	6924      	ldr	r4, [r4, #16]
      if (pulDigestLen != NULL_PTR)
 80041d6:	b13c      	cbz	r4, 80041e8 <KMS_Entry+0x5e4>
        KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(CK_ULONG));
 80041d8:	2104      	movs	r1, #4
 80041da:	4620      	mov	r0, r4
 80041dc:	f7fc fb4a 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pDigest, (*pulDigestLen)*sizeof(CK_BYTE));
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7fc fb46 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7fc fb42 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80041f0:	4b54      	ldr	r3, [pc, #336]	; (8004344 <KMS_Entry+0x740>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f43f ad92 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 f9f6 	bl	80045ec <KMS_CheckSessionHdle>
 8004200:	2800      	cmp	r0, #0
 8004202:	f47f ada0 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_Digest(hSession, pData, ulDataLen, pDigest, pulDigestLen);
 8004206:	9400      	str	r4, [sp, #0]
 8004208:	4643      	mov	r3, r8
 800420a:	463a      	mov	r2, r7
 800420c:	4631      	mov	r1, r6
 800420e:	4628      	mov	r0, r5
 8004210:	f7fe fe1a 	bl	8002e48 <KMS_Digest>
      break;
 8004214:	e500      	b.n	8003c18 <KMS_Entry+0x14>
      pPart         = va_arg(arguments, CK_BYTE_PTR);
 8004216:	e9d4 5600 	ldrd	r5, r6, [r4]
      ulPartLen     = va_arg(arguments, CK_ULONG);
 800421a:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 800421c:	4630      	mov	r0, r6
 800421e:	4621      	mov	r1, r4
 8004220:	f7fc fb28 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004224:	4b47      	ldr	r3, [pc, #284]	; (8004344 <KMS_Entry+0x740>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f43f ad78 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800422e:	4628      	mov	r0, r5
 8004230:	f000 f9dc 	bl	80045ec <KMS_CheckSessionHdle>
 8004234:	2800      	cmp	r0, #0
 8004236:	f47f ad86 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_DigestUpdate(hSession, pPart, ulPartLen);
 800423a:	4622      	mov	r2, r4
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
}
 8004240:	b003      	add	sp, #12
 8004242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestUpdate(hSession, pPart, ulPartLen);
 8004246:	f7fe be57 	b.w	8002ef8 <KMS_DigestUpdate>
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 800424a:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 800424e:	68a4      	ldr	r4, [r4, #8]
      if (pulDigestLen != NULL_PTR)
 8004250:	b13c      	cbz	r4, 8004262 <KMS_Entry+0x65e>
        KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(CK_ULONG));
 8004252:	2104      	movs	r1, #4
 8004254:	4620      	mov	r0, r4
 8004256:	f7fc fb0d 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pDigest, (*pulDigestLen)*sizeof(CK_BYTE));
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	4630      	mov	r0, r6
 800425e:	f7fc fb09 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <KMS_Entry+0x740>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f43f ad59 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f9bd 	bl	80045ec <KMS_CheckSessionHdle>
 8004272:	2800      	cmp	r0, #0
 8004274:	f47f ad67 	bne.w	8003d46 <KMS_Entry+0x142>
      e_ret_status = KMS_DigestFinal(hSession, pDigest, pulDigestLen);
 8004278:	4622      	mov	r2, r4
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
}
 800427e:	b003      	add	sp, #12
 8004280:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestFinal(hSession, pDigest, pulDigestLen);
 8004284:	f7fe be68 	b.w	8002f58 <KMS_DigestFinal>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8004288:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 800428c:	210c      	movs	r1, #12
 800428e:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8004290:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004292:	f7fc faef 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8004296:	b9c5      	cbnz	r5, 80042ca <KMS_Entry+0x6c6>
      if (!KMS_IS_INITIALIZED())
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <KMS_Entry+0x740>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f43f ad3e 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80042a2:	4630      	mov	r0, r6
 80042a4:	f000 f9a2 	bl	80045ec <KMS_CheckSessionHdle>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f47f ad4c 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hKey);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f001 f800 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 80042b4:	2803      	cmp	r0, #3
 80042b6:	f63f add8 	bhi.w	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_SignInit(hSession, pMechanism, hKey);
 80042ba:	4622      	mov	r2, r4
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
}
 80042c0:	b003      	add	sp, #12
 80042c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_SignInit(hSession, pMechanism, hKey);
 80042c6:	f001 be97 	b.w	8005ff8 <KMS_SignInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 80042ca:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 80042ce:	f7fc fad1 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7ff fc34 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 80042d8:	2800      	cmp	r0, #0
 80042da:	f47f ae54 	bne.w	8003f86 <KMS_Entry+0x382>
 80042de:	e7db      	b.n	8004298 <KMS_Entry+0x694>
      pData           = va_arg(arguments, CK_BYTE_PTR);
 80042e0:	e9d4 5600 	ldrd	r5, r6, [r4]
      pSignature      = va_arg(arguments, CK_BYTE_PTR);
 80042e4:	e9d4 7802 	ldrd	r7, r8, [r4, #8]
      pulSignatureLen = va_arg(arguments, CK_ULONG_PTR);
 80042e8:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 80042ea:	4639      	mov	r1, r7
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7fc fac1 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pulSignatureLen != NULL_PTR)
 80042f2:	b11c      	cbz	r4, 80042fc <KMS_Entry+0x6f8>
        KMS_LL_IsBufferInSecureEnclave((void *)pSignature, (*pulSignatureLen)*sizeof(CK_BYTE));
 80042f4:	6821      	ldr	r1, [r4, #0]
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7fc fabc 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80042fc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004344 <KMS_Entry+0x740>
      KMS_LL_IsBufferInSecureEnclave((void *)pulSignatureLen, sizeof(CK_ULONG));
 8004300:	2104      	movs	r1, #4
 8004302:	4620      	mov	r0, r4
 8004304:	f7fc fab6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004308:	f899 3000 	ldrb.w	r3, [r9]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f43f ad06 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004312:	4628      	mov	r0, r5
 8004314:	f000 f96a 	bl	80045ec <KMS_CheckSessionHdle>
 8004318:	2800      	cmp	r0, #0
 800431a:	f47f ad14 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(KMS_GETSESSION(hSession).hKey);
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	1e6b      	subs	r3, r5, #1
 8004322:	fb02 9303 	mla	r3, r2, r3, r9
 8004326:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004328:	f000 ffc4 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 800432c:	2803      	cmp	r0, #3
 800432e:	f63f ad9c 	bhi.w	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_Sign(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 8004332:	9400      	str	r4, [sp, #0]
 8004334:	4643      	mov	r3, r8
 8004336:	463a      	mov	r2, r7
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	f001 fe7c 	bl	8006038 <KMS_Sign>
 8004340:	e46a      	b.n	8003c18 <KMS_Entry+0x14>
 8004342:	bf00      	nop
 8004344:	20000c48 	.word	0x20000c48
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8004348:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 800434c:	210c      	movs	r1, #12
 800434e:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8004350:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004352:	f7fc fa8f 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8004356:	b9c5      	cbnz	r5, 800438a <KMS_Entry+0x786>
      if (!KMS_IS_INITIALIZED())
 8004358:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <KMS_Entry+0x8e4>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f43f acde 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004362:	4630      	mov	r0, r6
 8004364:	f000 f942 	bl	80045ec <KMS_CheckSessionHdle>
 8004368:	2800      	cmp	r0, #0
 800436a:	f47f acec 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hKey);
 800436e:	4620      	mov	r0, r4
 8004370:	f000 ffa0 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 8004374:	2803      	cmp	r0, #3
 8004376:	f63f ad78 	bhi.w	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_VerifyInit(hSession, pMechanism, hKey);
 800437a:	4622      	mov	r2, r4
 800437c:	4629      	mov	r1, r5
 800437e:	4630      	mov	r0, r6
}
 8004380:	b003      	add	sp, #12
 8004382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_VerifyInit(hSession, pMechanism, hKey);
 8004386:	f001 bebf 	b.w	8006108 <KMS_VerifyInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 800438a:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800438e:	f7fc fa71 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004392:	4628      	mov	r0, r5
 8004394:	f7ff fbd4 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 8004398:	2800      	cmp	r0, #0
 800439a:	f47f adf4 	bne.w	8003f86 <KMS_Entry+0x382>
 800439e:	e7db      	b.n	8004358 <KMS_Entry+0x754>
      pSignature     = va_arg(arguments, CK_BYTE_PTR);
 80043a0:	e9d4 7802 	ldrd	r7, r8, [r4, #8]
      pData          = va_arg(arguments, CK_BYTE_PTR);
 80043a4:	e9d4 5600 	ldrd	r5, r6, [r4]
      ulSignatureLen = va_arg(arguments, CK_ULONG);
 80043a8:	6924      	ldr	r4, [r4, #16]
      if (!KMS_IS_INITIALIZED())
 80043aa:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80044e8 <KMS_Entry+0x8e4>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 80043ae:	4639      	mov	r1, r7
 80043b0:	4630      	mov	r0, r6
 80043b2:	f7fc fa5f 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pSignature, ulSignatureLen * sizeof(CK_BYTE));
 80043b6:	4621      	mov	r1, r4
 80043b8:	4640      	mov	r0, r8
 80043ba:	f7fc fa5b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80043be:	f899 3000 	ldrb.w	r3, [r9]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f43f acab 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f90f 	bl	80045ec <KMS_CheckSessionHdle>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f47f acb9 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(KMS_GETSESSION(hSession).hKey);
 80043d4:	2224      	movs	r2, #36	; 0x24
 80043d6:	1e6b      	subs	r3, r5, #1
 80043d8:	fb02 9303 	mla	r3, r2, r3, r9
 80043dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80043de:	f000 ff69 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 80043e2:	2803      	cmp	r0, #3
 80043e4:	f63f ad41 	bhi.w	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_Verify(hSession, pData, ulDataLen, pSignature, ulSignatureLen);
 80043e8:	9400      	str	r4, [sp, #0]
 80043ea:	4643      	mov	r3, r8
 80043ec:	463a      	mov	r2, r7
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	f001 fea9 	bl	8006148 <KMS_Verify>
 80043f6:	e40f      	b.n	8003c18 <KMS_Entry+0x14>
      pMechanism        = va_arg(arguments, CK_MECHANISM_PTR);
 80043f8:	e9d4 8500 	ldrd	r8, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80043fc:	210c      	movs	r1, #12
 80043fe:	4628      	mov	r0, r5
      pTemplate         = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8004400:	e9d4 9602 	ldrd	r9, r6, [r4, #8]
      phKey             = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8004404:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004408:	f7fc fa34 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 800440c:	bb25      	cbnz	r5, 8004458 <KMS_Entry+0x854>
 800440e:	270c      	movs	r7, #12
 8004410:	4634      	mov	r4, r6
 8004412:	fb07 670a 	mla	r7, r7, sl, r6
      for (CK_ULONG i = 0; i < ulAttributeCount; i++)
 8004416:	42bc      	cmp	r4, r7
 8004418:	d129      	bne.n	800446e <KMS_Entry+0x86a>
      KMS_LL_IsBufferInSecureEnclave((void *)phKey, sizeof(void *));
 800441a:	2104      	movs	r1, #4
 800441c:	4658      	mov	r0, fp
 800441e:	f7fc fa29 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <KMS_Entry+0x8e4>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f43f ac79 	beq.w	8003d1e <KMS_Entry+0x11a>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800442c:	4640      	mov	r0, r8
 800442e:	f000 f8dd 	bl	80045ec <KMS_CheckSessionHdle>
 8004432:	2800      	cmp	r0, #0
 8004434:	f47f ac87 	bne.w	8003d46 <KMS_Entry+0x142>
      object_range = KMS_Objects_GetRange(hBaseKey);
 8004438:	4648      	mov	r0, r9
 800443a:	f000 ff3b 	bl	80052b4 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 800443e:	2803      	cmp	r0, #3
 8004440:	f63f ad13 	bhi.w	8003e6a <KMS_Entry+0x266>
        e_ret_status = KMS_DeriveKey(hSession, pMechanism, hBaseKey, pTemplate, ulAttributeCount, phKey);
 8004444:	e9cd ab00 	strd	sl, fp, [sp]
 8004448:	4633      	mov	r3, r6
 800444a:	464a      	mov	r2, r9
 800444c:	4629      	mov	r1, r5
 800444e:	4640      	mov	r0, r8
 8004450:	f000 f952 	bl	80046f8 <KMS_DeriveKey>
 8004454:	f7ff bbe0 	b.w	8003c18 <KMS_Entry+0x14>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 8004458:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800445c:	f7fc fa0a 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004460:	4628      	mov	r0, r5
 8004462:	f7ff fb6d 	bl	8003b40 <KMS_Entry_CheckMechanismContent>
 8004466:	2800      	cmp	r0, #0
 8004468:	f47f ad8d 	bne.w	8003f86 <KMS_Entry+0x382>
 800446c:	e7cf      	b.n	800440e <KMS_Entry+0x80a>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 800446e:	4620      	mov	r0, r4
 8004470:	210c      	movs	r1, #12
 8004472:	f7fc f9ff 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8004476:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800447a:	f7fc f9fb 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulAttributeCount; i++)
 800447e:	340c      	adds	r4, #12
 8004480:	e7c9      	b.n	8004416 <KMS_Entry+0x812>
      pFlash           = va_arg(arguments, CK_BYTE_PTR);
 8004482:	e9d4 5400 	ldrd	r5, r4, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pHdr, sizeof(KMS_BlobRawHeaderTypeDef));
 8004486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800448a:	4628      	mov	r0, r5
 800448c:	f7fc f9f2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pFlash, ((KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr)->BlobSize);
 8004490:	68a9      	ldr	r1, [r5, #8]
 8004492:	4620      	mov	r0, r4
 8004494:	f7fc f9ee 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <KMS_Entry+0x8e4>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f43f ac3e 	beq.w	8003d1e <KMS_Entry+0x11a>
      e_ret_status = KMS_Objects_ImportBlob(pHdr, pFlash);
 80044a2:	4621      	mov	r1, r4
 80044a4:	4628      	mov	r0, r5
}
 80044a6:	b003      	add	sp, #12
 80044a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_ImportBlob(pHdr, pFlash);
 80044ac:	f001 b8e4 	b.w	8005678 <KMS_Objects_ImportBlob>
      if (!KMS_IS_INITIALIZED())
 80044b0:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <KMS_Entry+0x8e4>)
      pKeys             = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 80044b2:	6820      	ldr	r0, [r4, #0]
      if (!KMS_IS_INITIALIZED())
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f43f ac31 	beq.w	8003d1e <KMS_Entry+0x11a>
      e_ret_status = KMS_Objects_LockKeys(pKeys, ulCount);
 80044bc:	6861      	ldr	r1, [r4, #4]
}
 80044be:	b003      	add	sp, #12
 80044c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_LockKeys(pKeys, ulCount);
 80044c4:	f001 baea 	b.w	8005a9c <KMS_Objects_LockKeys>
      if (!KMS_IS_INITIALIZED())
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <KMS_Entry+0x8e4>)
      pServices             = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 80044ca:	6820      	ldr	r0, [r4, #0]
      if (!KMS_IS_INITIALIZED())
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f43f ac25 	beq.w	8003d1e <KMS_Entry+0x11a>
      e_ret_status = KMS_Objects_LockServices(pServices, ulCount);
 80044d4:	6861      	ldr	r1, [r4, #4]
}
 80044d6:	b003      	add	sp, #12
 80044d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_LockServices(pServices, ulCount);
 80044dc:	f001 baef 	b.w	8005abe <KMS_Objects_LockServices>
        e_ret_status = CKR_FUNCTION_NOT_SUPPORTED;
 80044e0:	2054      	movs	r0, #84	; 0x54
  return e_ret_status;
 80044e2:	f7ff bb99 	b.w	8003c18 <KMS_Entry+0x14>
 80044e6:	bf00      	nop
 80044e8:	20000c48 	.word	0x20000c48

080044ec <KMS_Initialize>:
  *         CKR_CANT_LOCK
  *         CKR_CRYPTOKI_ALREADY_INITIALIZED
  *         CKR_FUNCTION_FAILED
  */
CK_RV  KMS_Initialize(CK_VOID_PTR pInitArgs)
{
 80044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CK_RV e_ret_status;

  /* Check parameters */
  if (pInitArgs != NULL)
 80044f0:	bb40      	cbnz	r0, 8004544 <KMS_Initialize+0x58>
    return CKR_ARGUMENTS_BAD;
#endif /* KMS_PKCS11_COMPLIANCE */
  }

  /* Check if PKCS11 module has already been initialized */
  if (KMS_Manager.initialized == 0xFFU) /* Ensure C_Initialize is not called too many times */
 80044f2:	4a16      	ldr	r2, [pc, #88]	; (800454c <KMS_Initialize+0x60>)
 80044f4:	7814      	ldrb	r4, [r2, #0]
 80044f6:	2cff      	cmp	r4, #255	; 0xff
 80044f8:	4616      	mov	r6, r2
 80044fa:	d025      	beq.n	8004548 <KMS_Initialize+0x5c>
  {
    e_ret_status = CKR_FUNCTION_FAILED;
  }
  else if (KMS_Manager.initialized > 0U)
 80044fc:	b12c      	cbz	r4, 800450a <KMS_Initialize+0x1e>
  {
    KMS_Manager.initialized++;  /* Increase initialization counter to reflect number of C_Initialize calls */
 80044fe:	1c63      	adds	r3, r4, #1
 8004500:	7013      	strb	r3, [r2, #0]
    e_ret_status = CKR_CRYPTOKI_ALREADY_INITIALIZED;
 8004502:	f240 1091 	movw	r0, #401	; 0x191

    e_ret_status = CKR_OK;
  }

  return e_ret_status;
}
 8004506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    KMS_Manager.sessionNb = 0;
 800450a:	6054      	str	r4, [r2, #4]
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 800450c:	f102 0508 	add.w	r5, r2, #8
 8004510:	2701      	movs	r7, #1
      KMS_GETSESSION(i).state = KMS_SESSION_NOT_USED;
 8004512:	f04f 38ff 	mov.w	r8, #4294967295
      (void)memset((void *) & (KMS_GETSESSION(i)), 0, sizeof(kms_session_desc_t));
 8004516:	4628      	mov	r0, r5
 8004518:	2224      	movs	r2, #36	; 0x24
 800451a:	2100      	movs	r1, #0
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 800451c:	3701      	adds	r7, #1
      (void)memset((void *) & (KMS_GETSESSION(i)), 0, sizeof(kms_session_desc_t));
 800451e:	f002 fad5 	bl	8006acc <memset>
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 8004522:	2f0b      	cmp	r7, #11
      KMS_GETSESSION(i).state = KMS_SESSION_NOT_USED;
 8004524:	f8c5 8004 	str.w	r8, [r5, #4]
      KMS_GETSESSION(i).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8004528:	61ec      	str	r4, [r5, #28]
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 800452a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800452e:	d1f2      	bne.n	8004516 <KMS_Initialize+0x2a>
    KMS_MemInit();
 8004530:	f000 f9b8 	bl	80048a4 <KMS_MemInit>
    (void)CA_Init();
 8004534:	f7fe fc14 	bl	8002d60 <CA_Init>
    KMS_PlatfObjects_Init();
 8004538:	f001 fc48 	bl	8005dcc <KMS_PlatfObjects_Init>
    KMS_Manager.initialized = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	7033      	strb	r3, [r6, #0]
    e_ret_status = CKR_OK;
 8004540:	2000      	movs	r0, #0
 8004542:	e7e0      	b.n	8004506 <KMS_Initialize+0x1a>
    return CKR_ARGUMENTS_BAD;
 8004544:	2007      	movs	r0, #7
 8004546:	e7de      	b.n	8004506 <KMS_Initialize+0x1a>
    e_ret_status = CKR_FUNCTION_FAILED;
 8004548:	2006      	movs	r0, #6
 800454a:	e7dc      	b.n	8004506 <KMS_Initialize+0x1a>
 800454c:	20000c48 	.word	0x20000c48

08004550 <KMS_Finalize>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_CRYPTOKI_NOT_INITIALIZED,
  */
CK_RV KMS_Finalize(CK_VOID_PTR pReserved)
{
 8004550:	b538      	push	{r3, r4, r5, lr}
  CK_RV e_ret_status;

  /* To fulfill the PKCS11 spec the input parameter is expected to be NULL */
  if (pReserved != NULL_PTR)
 8004552:	4604      	mov	r4, r0
 8004554:	b970      	cbnz	r0, 8004574 <KMS_Finalize+0x24>
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  /* Check if PKCS11 module has not been initialized */
  else if (KMS_Manager.initialized == 0U)
 8004556:	4d0a      	ldr	r5, [pc, #40]	; (8004580 <KMS_Finalize+0x30>)
 8004558:	782b      	ldrb	r3, [r5, #0]
 800455a:	b16b      	cbz	r3, 8004578 <KMS_Finalize+0x28>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_Manager.initialized > 1U)  /* If there are still some C_Finalize calls to come, simply return OK */
 800455c:	2b01      	cmp	r3, #1
 800455e:	d903      	bls.n	8004568 <KMS_Finalize+0x18>
  {
    KMS_Manager.initialized--;    /* Decrease initialization counter to reflect number of C_Finalize calls */
 8004560:	3b01      	subs	r3, #1
 8004562:	702b      	strb	r3, [r5, #0]
    KMS_Manager.initialized = 0U;

    /* This is to initialize the crypto api */
    (void)CA_DeInit();

    e_ret_status = CKR_OK;
 8004564:	4620      	mov	r0, r4
  }

  return e_ret_status;
}
 8004566:	bd38      	pop	{r3, r4, r5, pc}
    KMS_PlatfObjects_Finalize();
 8004568:	f001 fc40 	bl	8005dec <KMS_PlatfObjects_Finalize>
    KMS_Manager.initialized = 0U;
 800456c:	702c      	strb	r4, [r5, #0]
    (void)CA_DeInit();
 800456e:	f7fe fbf9 	bl	8002d64 <CA_DeInit>
 8004572:	e7f7      	b.n	8004564 <KMS_Finalize+0x14>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8004574:	2007      	movs	r0, #7
 8004576:	e7f6      	b.n	8004566 <KMS_Finalize+0x16>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8004578:	f44f 70c8 	mov.w	r0, #400	; 0x190
  return e_ret_status;
 800457c:	e7f3      	b.n	8004566 <KMS_Finalize+0x16>
 800457e:	bf00      	nop
 8004580:	20000c48 	.word	0x20000c48

08004584 <KMS_OpenSession>:
  *         CKR_SESSION_PARALLEL_NOT_SUPPORTED
  */
CK_RV KMS_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags,
                      CK_VOID_PTR pApplication, CK_NOTIFY Notify,
                      CK_SESSION_HANDLE_PTR phSession)
{
 8004584:	469c      	mov	ip, r3

  /* As defined in PKCS11 spec: For legacy reasons, the CKF_SERIAL_SESSION bit MUST
     always be set; if a call to C_OpenSession does not have this bit set, the call
     should return unsuccessfully with the error code CKR_SESSION_PARALLEL_NOT_SUPPORTED.
  */
  if ((flags & CKF_SERIAL_SESSION) == 0UL)
 8004586:	074b      	lsls	r3, r1, #29
{
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((flags & CKF_SERIAL_SESSION) == 0UL)
 800458a:	d526      	bpl.n	80045da <KMS_OpenSession+0x56>
  {
    e_ret_status = CKR_SESSION_PARALLEL_NOT_SUPPORTED;
  }
  else if (!KMS_IS_INITIALIZED())
 800458c:	4d16      	ldr	r5, [pc, #88]	; (80045e8 <KMS_OpenSession+0x64>)
 800458e:	782c      	ldrb	r4, [r5, #0]
 8004590:	b32c      	cbz	r4, 80045de <KMS_OpenSession+0x5a>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  /* We reach the max number of opened sessions */
  else if (KMS_Manager.sessionNb >=  KMS_NB_SESSIONS_MAX)
 8004592:	686c      	ldr	r4, [r5, #4]
 8004594:	2c09      	cmp	r4, #9
 8004596:	d825      	bhi.n	80045e4 <KMS_OpenSession+0x60>
 8004598:	462f      	mov	r7, r5
    e_ret_status = CKR_SESSION_COUNT;
  }
  else
  {
    /* Find a slot for a Session */
    session_index = 1;
 800459a:	2601      	movs	r6, #1
    do
    {
      if (KMS_GETSESSION(session_index).state == KMS_SESSION_NOT_USED)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	f106 34ff 	add.w	r4, r6, #4294967295
 80045a4:	d112      	bne.n	80045cc <KMS_OpenSession+0x48>
      {
        *phSession = session_index;
 80045a6:	9f05      	ldr	r7, [sp, #20]
 80045a8:	603e      	str	r6, [r7, #0]
        KMS_GETSESSION(session_index).slotID = slotID;
 80045aa:	2624      	movs	r6, #36	; 0x24
 80045ac:	fb06 5404 	mla	r4, r6, r4, r5
        KMS_GETSESSION(session_index).flags = flags;
        KMS_GETSESSION(session_index).pApplication = pApplication;
        KMS_GETSESSION(session_index).Notify = Notify;
        /* A session can have only one crypto mechanism on going at a time  */
        KMS_GETSESSION(session_index).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
        KMS_GETSESSION(session_index).Mechanism = CKM_VENDOR_DEFINED;
 80045b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        KMS_GETSESSION(session_index).slotID = slotID;
 80045b4:	60a0      	str	r0, [r4, #8]
        KMS_GETSESSION(session_index).Mechanism = CKM_VENDOR_DEFINED;
 80045b6:	6223      	str	r3, [r4, #32]
        KMS_GETSESSION(session_index).state = KMS_SESSION_IDLE;      /* Initialized */
 80045b8:	2000      	movs	r0, #0
#ifdef KMS_EXT_TOKEN_ENABLED
        KMS_GETSESSION(session_index).hSession_ExtToken = 0xFFFF;
#endif /* KMS_EXT_TOKEN_ENABLED      */

        /* Increment the session counter */
        KMS_Manager.sessionNb++;
 80045ba:	686b      	ldr	r3, [r5, #4]
        KMS_GETSESSION(session_index).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80045bc:	6260      	str	r0, [r4, #36]	; 0x24
        KMS_GETSESSION(session_index).flags = flags;
 80045be:	e9c4 0103 	strd	r0, r1, [r4, #12]
        KMS_GETSESSION(session_index).Notify = Notify;
 80045c2:	e9c4 2c06 	strd	r2, ip, [r4, #24]
        KMS_Manager.sessionNb++;
 80045c6:	3301      	adds	r3, #1
 80045c8:	606b      	str	r3, [r5, #4]
             && (session_index <= KMS_NB_SESSIONS_MAX)); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
  }

  /* All sessions are in used */
  return e_ret_status;
}
 80045ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      session_index++;
 80045cc:	3601      	adds	r6, #1
             && (session_index <= KMS_NB_SESSIONS_MAX)); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 80045ce:	2e0b      	cmp	r6, #11
 80045d0:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80045d4:	d1e2      	bne.n	800459c <KMS_OpenSession+0x18>
 80045d6:	2006      	movs	r0, #6
 80045d8:	e7f7      	b.n	80045ca <KMS_OpenSession+0x46>
    e_ret_status = CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 80045da:	20b4      	movs	r0, #180	; 0xb4
 80045dc:	e7f5      	b.n	80045ca <KMS_OpenSession+0x46>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 80045de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80045e2:	e7f2      	b.n	80045ca <KMS_OpenSession+0x46>
    e_ret_status = CKR_SESSION_COUNT;
 80045e4:	20b1      	movs	r0, #177	; 0xb1
  return e_ret_status;
 80045e6:	e7f0      	b.n	80045ca <KMS_OpenSession+0x46>
 80045e8:	20000c48 	.word	0x20000c48

080045ec <KMS_CheckSessionHdle>:
  */
CK_RV     KMS_CheckSessionHdle(CK_SESSION_HANDLE hSession)
{
  CK_RV e_ret_status = CKR_SESSION_HANDLE_INVALID;

  if ((hSession >= 1UL) &&
 80045ec:	3801      	subs	r0, #1
 80045ee:	2809      	cmp	r0, #9
 80045f0:	d809      	bhi.n	8004606 <KMS_CheckSessionHdle+0x1a>
      (hSession <= KMS_NB_SESSIONS_MAX) &&
      (KMS_GETSESSION(hSession).state != KMS_SESSION_NOT_USED))
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <KMS_CheckSessionHdle+0x20>)
 80045f4:	2224      	movs	r2, #36	; 0x24
 80045f6:	fb02 3000 	mla	r0, r2, r0, r3
      (hSession <= KMS_NB_SESSIONS_MAX) &&
 80045fa:	68c3      	ldr	r3, [r0, #12]
 80045fc:	3301      	adds	r3, #1
  {
    e_ret_status = CKR_OK;
 80045fe:	bf0c      	ite	eq
 8004600:	20b3      	moveq	r0, #179	; 0xb3
 8004602:	2000      	movne	r0, #0
 8004604:	4770      	bx	lr
  CK_RV e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8004606:	20b3      	movs	r0, #179	; 0xb3
  }
  return e_ret_status;
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000c48 	.word	0x20000c48

08004610 <KMS_CloseSession>:
{
 8004610:	b570      	push	{r4, r5, r6, lr}
  if (!KMS_IS_INITIALIZED())
 8004612:	4d10      	ldr	r5, [pc, #64]	; (8004654 <KMS_CloseSession+0x44>)
 8004614:	782b      	ldrb	r3, [r5, #0]
{
 8004616:	4601      	mov	r1, r0
  if (!KMS_IS_INITIALIZED())
 8004618:	b1b3      	cbz	r3, 8004648 <KMS_CloseSession+0x38>
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800461a:	f7ff ffe7 	bl	80045ec <KMS_CheckSessionHdle>
 800461e:	b9b0      	cbnz	r0, 800464e <KMS_CloseSession+0x3e>
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8004620:	1e48      	subs	r0, r1, #1
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	4350      	muls	r0, r2
 8004626:	182e      	adds	r6, r5, r0
 8004628:	68f4      	ldr	r4, [r6, #12]
 800462a:	b984      	cbnz	r4, 800464e <KMS_CloseSession+0x3e>
    (void)memset((void *) & (KMS_GETSESSION(hSession)), 0, sizeof(kms_session_desc_t));
 800462c:	3008      	adds	r0, #8
 800462e:	4621      	mov	r1, r4
 8004630:	4428      	add	r0, r5
 8004632:	f002 fa4b 	bl	8006acc <memset>
    KMS_GETSESSION(hSession).state = KMS_SESSION_NOT_USED;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	60f3      	str	r3, [r6, #12]
    KMS_Manager.sessionNb--;
 800463c:	686b      	ldr	r3, [r5, #4]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800463e:	6274      	str	r4, [r6, #36]	; 0x24
    KMS_Manager.sessionNb--;
 8004640:	3b01      	subs	r3, #1
 8004642:	606b      	str	r3, [r5, #4]
}
 8004644:	4620      	mov	r0, r4
 8004646:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8004648:	f44f 74c8 	mov.w	r4, #400	; 0x190
 800464c:	e7fa      	b.n	8004644 <KMS_CloseSession+0x34>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 800464e:	24b3      	movs	r4, #179	; 0xb3
  return e_ret_status;
 8004650:	e7f8      	b.n	8004644 <KMS_CloseSession+0x34>
 8004652:	bf00      	nop
 8004654:	20000c48 	.word	0x20000c48

08004658 <KMS_SetStateIdle>:
  * @param  hSession session handle
  * @retval None
  */
void     KMS_SetStateIdle(CK_SESSION_HANDLE hSession)
{
  KMS_GETSESSION(hSession).state = KMS_SESSION_IDLE;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <KMS_SetStateIdle+0x10>)
 800465a:	3801      	subs	r0, #1
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	fb02 3000 	mla	r0, r2, r0, r3
 8004662:	2300      	movs	r3, #0
 8004664:	60c3      	str	r3, [r0, #12]
}
 8004666:	4770      	bx	lr
 8004668:	20000c48 	.word	0x20000c48

0800466c <KMS_GetMechanismInfo>:
#else /* KMS_RSA_xxxx */
#error "No RSA modulus size specified"
#endif /* KMS_RSA_xxxx */
#endif /* KMS_RSA */

  switch (type)
 800466c:	f241 0382 	movw	r3, #4226	; 0x1082
 8004670:	4299      	cmp	r1, r3
 8004672:	d813      	bhi.n	800469c <KMS_GetMechanismInfo+0x30>
 8004674:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8004678:	d81c      	bhi.n	80046b4 <KMS_GetMechanismInfo+0x48>
 800467a:	f241 0341 	movw	r3, #4161	; 0x1041
 800467e:	4299      	cmp	r1, r3
 8004680:	d032      	beq.n	80046e8 <KMS_GetMechanismInfo+0x7c>
 8004682:	f241 0344 	movw	r3, #4164	; 0x1044
 8004686:	4299      	cmp	r1, r3
 8004688:	d02e      	beq.n	80046e8 <KMS_GetMechanismInfo+0x7c>
 800468a:	f5b1 7f14 	cmp.w	r1, #592	; 0x250
 800468e:	d021      	beq.n	80046d4 <KMS_GetMechanismInfo+0x68>
    }
#endif /* KMS_ECDSA & KMS_FCT_SIGN || KMS_ECDSA & KMS_FCT_VERIFY && KMS_SHA256 & KMS_FCT_DIGEST */

    default:
    {
      pInfo->flags = 0;
 8004690:	2300      	movs	r3, #0
      pInfo->ulMaxKeySize = 0;
 8004692:	e9c2 3301 	strd	r3, r3, [r2, #4]
      pInfo->ulMinKeySize = 0;
 8004696:	6013      	str	r3, [r2, #0]
  CK_RV ret_status = CKR_MECHANISM_INVALID;
 8004698:	2070      	movs	r0, #112	; 0x70
  (void)slotID;
  (void)type;
  (void)pInfo;
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 800469a:	4770      	bx	lr
  switch (type)
 800469c:	f241 038b 	movw	r3, #4235	; 0x108b
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d810      	bhi.n	80046c6 <KMS_GetMechanismInfo+0x5a>
 80046a4:	f241 0389 	movw	r3, #4233	; 0x1089
 80046a8:	4299      	cmp	r1, r3
 80046aa:	d81a      	bhi.n	80046e2 <KMS_GetMechanismInfo+0x76>
 80046ac:	f241 0387 	movw	r3, #4231	; 0x1087
 80046b0:	4299      	cmp	r1, r3
 80046b2:	d1ed      	bne.n	8004690 <KMS_GetMechanismInfo+0x24>
      pInfo->flags = 0U
 80046b4:	f44f 7340 	mov.w	r3, #768	; 0x300
      pInfo->flags = CKF_DERIVE;
 80046b8:	6093      	str	r3, [r2, #8]
      pInfo->ulMaxKeySize = CA_CRL_AES256_KEY;
 80046ba:	2320      	movs	r3, #32
 80046bc:	6053      	str	r3, [r2, #4]
      pInfo->ulMinKeySize = CA_CRL_AES128_KEY;
 80046be:	2310      	movs	r3, #16
 80046c0:	6013      	str	r3, [r2, #0]
      ret_status = CKR_OK;
 80046c2:	2000      	movs	r0, #0
      break;
 80046c4:	4770      	bx	lr
  switch (type)
 80046c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80046ca:	4299      	cmp	r1, r3
 80046cc:	d1e0      	bne.n	8004690 <KMS_GetMechanismInfo+0x24>
      pInfo->flags = CKF_DERIVE;
 80046ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046d2:	e7f1      	b.n	80046b8 <KMS_GetMechanismInfo+0x4c>
      pInfo->ulMaxKeySize = 0U;
 80046d4:	2000      	movs	r0, #0
 80046d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046da:	e9c2 0301 	strd	r0, r3, [r2, #4]
      pInfo->ulMinKeySize = 0U;
 80046de:	6010      	str	r0, [r2, #0]
      break;
 80046e0:	4770      	bx	lr
      pInfo->flags = 0U
 80046e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80046e6:	e7e7      	b.n	80046b8 <KMS_GetMechanismInfo+0x4c>
      pInfo->ulMaxKeySize = MECHANISM_ECC_MAX_KEYSIZE;
 80046e8:	4902      	ldr	r1, [pc, #8]	; (80046f4 <KMS_GetMechanismInfo+0x88>)
 80046ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ee:	e9c2 3101 	strd	r3, r1, [r2, #4]
      pInfo->ulMinKeySize = MECHANISM_ECC_MIN_KEYSIZE;
 80046f2:	e7e5      	b.n	80046c0 <KMS_GetMechanismInfo+0x54>
 80046f4:	01502000 	.word	0x01502000

080046f8 <KMS_DeriveKey>:
  *         @ref KMS_ECC_LoadCurve returned values
  */
CK_RV          KMS_DeriveKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                             CK_OBJECT_HANDLE hBaseKey, CK_ATTRIBUTE_PTR  pTemplate,
                             CK_ULONG  ulAttributeCount, CK_OBJECT_HANDLE_PTR  phKey)
{
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef KMS_DERIVE_KEY
  CK_RV e_ret_status;
  kms_obj_keyhead_t *pkms_object;
  kms_attr_t *P_pKeyAttribute = NULL;

  if (!KMS_IS_INITIALIZED())
 80046fc:	4c54      	ldr	r4, [pc, #336]	; (8004850 <KMS_DeriveKey+0x158>)
{
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	469a      	mov	sl, r3
  kms_attr_t *P_pKeyAttribute = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	9302      	str	r3, [sp, #8]
  if (!KMS_IS_INITIALIZED())
 8004706:	7823      	ldrb	r3, [r4, #0]
{
 8004708:	4605      	mov	r5, r0
 800470a:	460e      	mov	r6, r1
 800470c:	4691      	mov	r9, r2
 800470e:	46a3      	mov	fp, r4
  if (!KMS_IS_INITIALIZED())
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8093 	beq.w	800483c <KMS_DeriveKey+0x144>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004716:	f7ff ff69 	bl	80045ec <KMS_CheckSessionHdle>
 800471a:	2800      	cmp	r0, #0
 800471c:	f040 8091 	bne.w	8004842 <KMS_DeriveKey+0x14a>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8004720:	f105 38ff 	add.w	r8, r5, #4294967295
 8004724:	2324      	movs	r3, #36	; 0x24
 8004726:	fb03 4308 	mla	r3, r3, r8, r4
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8088 	bne.w	8004842 <KMS_DeriveKey+0x14a>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  if (pMechanism == NULL_PTR)
 8004732:	2e00      	cmp	r6, #0
 8004734:	f000 8087 	beq.w	8004846 <KMS_DeriveKey+0x14e>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 8004738:	6831      	ldr	r1, [r6, #0]
 800473a:	f241 1204 	movw	r2, #4356	; 0x1104
 800473e:	4291      	cmp	r1, r2
 8004740:	f040 8083 	bne.w	800484a <KMS_DeriveKey+0x152>
  {
#if defined(KMS_AES_ECB) && (KMS_AES_ECB & KMS_FCT_DERIVE_KEY)
    case CKM_AES_ECB_ENCRYPT_DATA:
    {
      CK_MECHANISM aes_ecb_mechanism = { CKM_AES_ECB, NULL, 0 };
 8004744:	f241 0281 	movw	r2, #4225	; 0x1081
 8004748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474c:	9307      	str	r3, [sp, #28]
      CK_ULONG EncryptedLen;
      uint8_t *pKeyBuffer;

      /* Derivation is done based on the value passed in the MEchanism */
      if ((pMechanism->pParameter == NULL) ||
 800474e:	6873      	ldr	r3, [r6, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d071      	beq.n	8004838 <KMS_DeriveKey+0x140>
          (pMechanism->ulParameterLen == 0UL))
 8004754:	68b3      	ldr	r3, [r6, #8]
      if ((pMechanism->pParameter == NULL) ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d06e      	beq.n	8004838 <KMS_DeriveKey+0x140>
      {
        e_ret_status = CKR_MECHANISM_PARAM_INVALID;
        break;
      }
      if ((pMechanism->ulParameterLen != CA_CRL_AES128_KEY)
 800475a:	f023 0208 	bic.w	r2, r3, #8
 800475e:	2a10      	cmp	r2, #16
 8004760:	d001      	beq.n	8004766 <KMS_DeriveKey+0x6e>
          && (pMechanism->ulParameterLen != CA_CRL_AES192_KEY)
          && (pMechanism->ulParameterLen != CA_CRL_AES256_KEY))
 8004762:	2b20      	cmp	r3, #32
 8004764:	d168      	bne.n	8004838 <KMS_DeriveKey+0x140>
      }

      /* The Key */
      /* Read the key value from the Key Handle                 */
      /* Key Handle is the index to one of static or nvm        */
      pkms_object = KMS_Objects_GetPointer(hBaseKey);
 8004766:	4648      	mov	r0, r9
 8004768:	f000 fe04 	bl	8005374 <KMS_Objects_GetPointer>

      /* Check that hKey is valid */
      if ((pkms_object != NULL) &&
 800476c:	4607      	mov	r7, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d060      	beq.n	8004834 <KMS_DeriveKey+0x13c>
 8004772:	6802      	ldr	r2, [r0, #0]
 8004774:	4b37      	ldr	r3, [pc, #220]	; (8004854 <KMS_DeriveKey+0x15c>)
 8004776:	429a      	cmp	r2, r3
 8004778:	d15c      	bne.n	8004834 <KMS_DeriveKey+0x13c>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 800477a:	6842      	ldr	r2, [r0, #4]
 800477c:	f46f 710f 	mvn.w	r1, #572	; 0x23c
 8004780:	440b      	add	r3, r1
 8004782:	429a      	cmp	r2, r3
 8004784:	d156      	bne.n	8004834 <KMS_DeriveKey+0x13c>
          (pkms_object->configuration == KMS_ABI_CONFIG_KEYHEAD))
      {

        /* Search for the Key Value to use */
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8004786:	4601      	mov	r1, r0
 8004788:	aa02      	add	r2, sp, #8
 800478a:	2011      	movs	r0, #17
 800478c:	f000 fe7a 	bl	8005484 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 8004790:	4604      	mov	r4, r0
 8004792:	2800      	cmp	r0, #0
 8004794:	d141      	bne.n	800481a <KMS_DeriveKey+0x122>

          /* As stated in PKCS11 spec:                                                   */
          /* The CKA_DERIVE attribute has the value CK_TRUE if and only if it is         */
          /*   possible to derive other keys from the key                                */
          /* Check that the object allows to DERIVE a KEY, checking ATTRIBUTE CKA_DERIVE */
          e_ret_status = KMS_Objects_SearchAttributes(CKA_DERIVE, pkms_object, &pDeriveAttribute);
 8004796:	aa04      	add	r2, sp, #16
 8004798:	4639      	mov	r1, r7
 800479a:	f44f 7086 	mov.w	r0, #268	; 0x10c
 800479e:	f000 fe71 	bl	8005484 <KMS_Objects_SearchAttributes>

          if (e_ret_status == CKR_OK)
 80047a2:	b918      	cbnz	r0, 80047ac <KMS_DeriveKey+0xb4>
          {
            if (*pDeriveAttribute->data != CK_TRUE)
 80047a4:	9b04      	ldr	r3, [sp, #16]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d13d      	bne.n	8004828 <KMS_DeriveKey+0x130>
              break;
            }
          }

          /* Set key size with value from attribute  */
          if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||    /* 128 bits */
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 0208 	bic.w	r2, r3, #8
 80047b4:	2a10      	cmp	r2, #16
 80047b6:	d001      	beq.n	80047bc <KMS_DeriveKey+0xc4>
              (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d137      	bne.n	800482c <KMS_DeriveKey+0x134>
              (P_pKeyAttribute->size == CA_CRL_AES256_KEY))       /* 256 bits */
          {
            /* Allocate a Key buffer */
            pKeyBuffer = (uint8_t *)KMS_Alloc(hSession, pMechanism->ulParameterLen);
 80047bc:	68b1      	ldr	r1, [r6, #8]
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f89a 	bl	80048f8 <KMS_Alloc>
            if (pKeyBuffer == NULL)
 80047c4:	4607      	mov	r7, r0
 80047c6:	b398      	cbz	r0, 8004830 <KMS_DeriveKey+0x138>
            break;
          }

          /* Reuse the AES-EncryptInit function */
          /* The Encryption mechanism do not expect any param, use one the local definition */
          e_ret_status = KMS_EncryptInit(hSession, &aes_ecb_mechanism, hBaseKey);
 80047c8:	464a      	mov	r2, r9
 80047ca:	a905      	add	r1, sp, #20
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7fe ff7d 	bl	80036cc <KMS_EncryptInit>
          if (e_ret_status != CKR_OK)
 80047d2:	4604      	mov	r4, r0
 80047d4:	b138      	cbz	r0, 80047e6 <KMS_DeriveKey+0xee>
          {
            KMS_Free(hSession, pKeyBuffer);
 80047d6:	4639      	mov	r1, r7
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f8b1 	bl	8004940 <KMS_Free>

  return e_ret_status;
#else /* KMS_DERIVE_KEY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DERIVE_KEY */
}
 80047de:	4620      	mov	r0, r4
 80047e0:	b009      	add	sp, #36	; 0x24
 80047e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80047e6:	ab03      	add	r3, sp, #12
          EncryptedLen = pMechanism->ulParameterLen;
 80047e8:	68b2      	ldr	r2, [r6, #8]
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	6871      	ldr	r1, [r6, #4]
          EncryptedLen = pMechanism->ulParameterLen;
 80047ee:	9203      	str	r2, [sp, #12]
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80047f0:	463b      	mov	r3, r7
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7ff f800 	bl	80037f8 <KMS_Encrypt>
          if (e_ret_status == CKR_OK)
 80047f8:	4604      	mov	r4, r0
 80047fa:	b950      	cbnz	r0, 8004812 <KMS_DeriveKey+0x11a>
            e_ret_status = KMS_Objects_CreateNStoreBlobForAES(hSession,
 80047fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	9a03      	ldr	r2, [sp, #12]
 8004806:	4653      	mov	r3, sl
 8004808:	4639      	mov	r1, r7
 800480a:	4628      	mov	r0, r5
 800480c:	f001 fa14 	bl	8005c38 <KMS_Objects_CreateNStoreBlobForAES>
 8004810:	4604      	mov	r4, r0
            KMS_Free(hSession, pKeyBuffer);
 8004812:	4639      	mov	r1, r7
 8004814:	4628      	mov	r0, r5
 8004816:	f000 f893 	bl	8004940 <KMS_Free>
      KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800481a:	2324      	movs	r3, #36	; 0x24
 800481c:	fb03 b808 	mla	r8, r3, r8, fp
 8004820:	2300      	movs	r3, #0
 8004822:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
      break;
 8004826:	e7da      	b.n	80047de <KMS_DeriveKey+0xe6>
              e_ret_status = CKR_ACTION_PROHIBITED;
 8004828:	241b      	movs	r4, #27
 800482a:	e7d8      	b.n	80047de <KMS_DeriveKey+0xe6>
            e_ret_status = CKR_ATTRIBUTE_VALUE_INVALID;
 800482c:	2413      	movs	r4, #19
 800482e:	e7d6      	b.n	80047de <KMS_DeriveKey+0xe6>
              e_ret_status = CKR_DEVICE_MEMORY;
 8004830:	2431      	movs	r4, #49	; 0x31
 8004832:	e7d4      	b.n	80047de <KMS_DeriveKey+0xe6>
        e_ret_status = CKR_KEY_HANDLE_INVALID;
 8004834:	2460      	movs	r4, #96	; 0x60
 8004836:	e7f0      	b.n	800481a <KMS_DeriveKey+0x122>
        e_ret_status = CKR_MECHANISM_PARAM_INVALID;
 8004838:	2471      	movs	r4, #113	; 0x71
 800483a:	e7d0      	b.n	80047de <KMS_DeriveKey+0xe6>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800483c:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8004840:	e7cd      	b.n	80047de <KMS_DeriveKey+0xe6>
    return CKR_SESSION_HANDLE_INVALID;
 8004842:	24b3      	movs	r4, #179	; 0xb3
 8004844:	e7cb      	b.n	80047de <KMS_DeriveKey+0xe6>
    return CKR_ARGUMENTS_BAD;
 8004846:	2407      	movs	r4, #7
 8004848:	e7c9      	b.n	80047de <KMS_DeriveKey+0xe6>
      e_ret_status = CKR_MECHANISM_INVALID;
 800484a:	2470      	movs	r4, #112	; 0x70
 800484c:	e7c7      	b.n	80047de <KMS_DeriveKey+0xe6>
 800484e:	bf00      	nop
 8004850:	20000c48 	.word	0x20000c48
 8004854:	b10b0240 	.word	0xb10b0240

08004858 <mempool_init>:
/**
  * @brief  Memory pool initialization
  * @retval None
  */
static void mempool_init(kms_mem_pool_header_t *pHead, uint32_t size)
{
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ptr = (uint8_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t));
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
  /* Initialize header with canaries and controls */
  for (uint32_t i = 0; i < (sizeof(pHead->canaries) / sizeof(pHead->canaries[0])); i++)
  {
    pHead->canaries[i] = normalizedHeader[i];
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <mempool_init+0x38>)
 800485c:	4f0d      	ldr	r7, [pc, #52]	; (8004894 <mempool_init+0x3c>)
  }
  pHead->size = size;
 800485e:	6081      	str	r1, [r0, #8]
{
 8004860:	460a      	mov	r2, r1
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
 8004862:	f101 0624 	add.w	r6, r1, #36	; 0x24
  pHead->used = 0;
 8004866:	2100      	movs	r1, #0
    pHead->canaries[i] = normalizedHeader[i];
 8004868:	e9c0 3700 	strd	r3, r7, [r0]
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
 800486c:	1835      	adds	r5, r6, r0
#if defined(KMS_MEM_DEBUGGING)
  pHead->session = KMS_SESSION_ID_INVALID;
 800486e:	e9c0 1103 	strd	r1, r1, [r0, #12]
  pHead->caller = 0;
  pHead->reqSize = 0;
 8004872:	e9c0 1105 	strd	r1, r1, [r0, #20]
{
 8004876:	4604      	mov	r4, r0
  pHead->reserved = 0;
 8004878:	61c1      	str	r1, [r0, #28]
#endif /* KMS_MEM_DEBUGGING */
  (void)memset(ptr, 0, size);   /* Initialize pool buffer contents to 0 */
 800487a:	3020      	adds	r0, #32
 800487c:	f002 f926 	bl	8006acc <memset>
  /* Initialize footer with canaries */
  for (uint32_t i = 0; i < (sizeof(p_foot->canaries) / sizeof(p_foot->canaries[0])); i++)
  {
    p_foot->canaries[i] = normalizedFooter.canaries[i];
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <mempool_init+0x40>)
 8004882:	4a06      	ldr	r2, [pc, #24]	; (800489c <mempool_init+0x44>)
 8004884:	5137      	str	r7, [r6, r4]
 8004886:	e9c5 2301 	strd	r2, r3, [r5, #4]
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <mempool_init+0x48>)
 800488c:	60eb      	str	r3, [r5, #12]
  }
}
 800488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004890:	54762fd6 	.word	0x54762fd6
 8004894:	6aeef1d2 	.word	0x6aeef1d2
 8004898:	dced746e 	.word	0xdced746e
 800489c:	8ae1c029 	.word	0x8ae1c029
 80048a0:	5411254f 	.word	0x5411254f

080048a4 <KMS_MemInit>:
  * @brief  Initialize memory management structure
  * @retval None
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
void KMS_MemInit(void)
{
 80048a4:	b510      	push	{r4, lr}
 * 2 pools of 1K
 * 1 pool of 5K
 */

KMS_MEM_DECLARE_POOL_START()
KMS_MEM_DECLARE_POOL_ENTRY(1, 256)
 80048a6:	4c13      	ldr	r4, [pc, #76]	; (80048f4 <KMS_MemInit+0x50>)
 80048a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7ff ffd3 	bl	8004858 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(2, 256)
 80048b2:	f504 709a 	add.w	r0, r4, #308	; 0x134
 80048b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ba:	f7ff ffcd 	bl	8004858 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(3, 512)
 80048be:	f504 701a 	add.w	r0, r4, #616	; 0x268
 80048c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048c6:	f7ff ffc7 	bl	8004858 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(4, 1024)
 80048ca:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 80048ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048d2:	f7ff ffc1 	bl	8004858 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(5, 1024)
 80048d6:	f504 600d 	add.w	r0, r4, #2256	; 0x8d0
 80048da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048de:	f7ff ffbb 	bl	8004858 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(6, 5 * 1024)
 80048e2:	f604 5004 	addw	r0, r4, #3332	; 0xd04
 80048e6:	f44f 51a0 	mov.w	r1, #5120	; 0x1400

#endif /* KMS_MEM_USE_POOL_ALLOCATOR */
#if defined(KMS_MEM_LOGGING)
  KMS_LL_ReportMemInit();
#endif /* KMS_MEM_LOGGING */
}
 80048ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ee:	f7ff bfb3 	b.w	8004858 <mempool_init>
 80048f2:	bf00      	nop
 80048f4:	20000f54 	.word	0x20000f54

080048f8 <KMS_Alloc>:
  * @param  Size Size of the memory to allocate
  * @retval Allocated pointer if successful to allocate, NULL_PTR if failed
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
CK_VOID_PTR KMS_Alloc(CK_SESSION_HANDLE Session, size_t Size)
{
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t KMS_LL_GetLR(void)
{
  register uint32_t result;

#if defined ( __ICCARM__ ) || ( __GNUC__ )
  __ASM volatile("MOV %0, LR" : "=r"(result));
 80048fa:	4676      	mov	r6, lr
    }
  }
#endif /* KMS_MEM_DEBUGGING */
#endif /* KMS_MEM_USE_HEAP_ALLOCATOR */
#if defined(KMS_MEM_USE_POOL_ALLOCATOR)
  for (uint32_t i = 0; (i < (sizeof(kms_mem_pool_tab) / sizeof(kms_mem_pool_header_t *))) && (ptr == NULL_PTR); i++)
 80048fc:	4d0f      	ldr	r5, [pc, #60]	; (800493c <KMS_Alloc+0x44>)
 80048fe:	2200      	movs	r2, #0
  {
    if ((kms_mem_pool_tab[i]->used == 0UL) && (kms_mem_pool_tab[i]->size >= Size))
    {
      kms_mem_pool_tab[i]->used = 1;
 8004900:	f04f 0c01 	mov.w	ip, #1
    if ((kms_mem_pool_tab[i]->used == 0UL) && (kms_mem_pool_tab[i]->size >= Size))
 8004904:	f855 3b04 	ldr.w	r3, [r5], #4
 8004908:	68dc      	ldr	r4, [r3, #12]
 800490a:	b97c      	cbnz	r4, 800492c <KMS_Alloc+0x34>
 800490c:	689f      	ldr	r7, [r3, #8]
 800490e:	428f      	cmp	r7, r1
 8004910:	d305      	bcc.n	800491e <KMS_Alloc+0x26>
#if defined(KMS_MEM_DEBUGGING)
      kms_mem_pool_tab[i]->session = Session;
 8004912:	e9c3 c003 	strd	ip, r0, [r3, #12]
      kms_mem_pool_tab[i]->caller = LR;
      kms_mem_pool_tab[i]->reqSize = Size;
 8004916:	e9c3 6105 	strd	r6, r1, [r3, #20]
#endif /* KMS_MEM_DEBUGGING */
      ptr = (void *)(uint32_t *)((uint32_t)(kms_mem_pool_tab[i]) + sizeof(kms_mem_pool_header_t));
 800491a:	f103 0420 	add.w	r4, r3, #32
  for (uint32_t i = 0; (i < (sizeof(kms_mem_pool_tab) / sizeof(kms_mem_pool_header_t *))) && (ptr == NULL_PTR); i++)
 800491e:	3201      	adds	r2, #1
 8004920:	2a06      	cmp	r2, #6
 8004922:	d005      	beq.n	8004930 <KMS_Alloc+0x38>
 8004924:	2c00      	cmp	r4, #0
 8004926:	d0ed      	beq.n	8004904 <KMS_Alloc+0xc>
  {
    KMS_LL_ReportMemAlloc(Size, ptr);
  }
#endif /* KMS_MEM_LOGGING */
  return ptr;
}
 8004928:	4620      	mov	r0, r4
 800492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492c:	2400      	movs	r4, #0
 800492e:	e7f6      	b.n	800491e <KMS_Alloc+0x26>
  if (ptr == NULL_PTR)
 8004930:	2c00      	cmp	r4, #0
 8004932:	d1f9      	bne.n	8004928 <KMS_Alloc+0x30>
    KMS_LL_ReportError(KMS_LL_ERROR_MEM_ALLOC_FAILURE);
 8004934:	2001      	movs	r0, #1
 8004936:	f7fb ffbd 	bl	80008b4 <KMS_LL_ReportError>
  return ptr;
 800493a:	e7f5      	b.n	8004928 <KMS_Alloc+0x30>
 800493c:	08006c04 	.word	0x08006c04

08004940 <KMS_Free>:
  * @param  Ptr     Pointer to the memory to free
  * @retval None
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
void KMS_Free(CK_SESSION_HANDLE Session, CK_VOID_PTR Ptr)
{
 8004940:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  (void)Session;

  if (Ptr == NULL_PTR)
 8004942:	460d      	mov	r5, r1
 8004944:	b921      	cbnz	r1, 8004950 <KMS_Free+0x10>
  {
    KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_NULL_PTR);
 8004946:	2003      	movs	r0, #3
    {
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
    }
#endif /* KMS_MEM_USE_POOL_ALLOCATOR */
  } /* (Ptr == NULL_PTR) */
}
 8004948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
 800494c:	f7fb bfb2 	b.w	80008b4 <KMS_LL_ReportError>
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004950:	f851 3c18 	ldr.w	r3, [r1, #-24]
    phead = (kms_mem_pool_header_t *)(tmp_ptr - sizeof(kms_mem_pool_header_t));
 8004954:	f1a1 0420 	sub.w	r4, r1, #32
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004958:	1d0e      	adds	r6, r1, #4
 800495a:	f023 0303 	bic.w	r3, r3, #3
    if (memcmp((void *)phead, &normalizedHeader, sizeof(normalizedHeader)) != 0)
 800495e:	491b      	ldr	r1, [pc, #108]	; (80049cc <KMS_Free+0x8c>)
 8004960:	2208      	movs	r2, #8
 8004962:	4620      	mov	r0, r4
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004964:	441e      	add	r6, r3
    if (memcmp((void *)phead, &normalizedHeader, sizeof(normalizedHeader)) != 0)
 8004966:	f002 f895 	bl	8006a94 <memcmp>
 800496a:	b110      	cbz	r0, 8004972 <KMS_Free+0x32>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_CANARY);
 800496c:	2002      	movs	r0, #2
 800496e:	f7fb ffa1 	bl	80008b4 <KMS_LL_ReportError>
    if (memcmp((void *)pfoot, &normalizedFooter, sizeof(normalizedFooter)) != 0)
 8004972:	4917      	ldr	r1, [pc, #92]	; (80049d0 <KMS_Free+0x90>)
 8004974:	2210      	movs	r2, #16
 8004976:	4630      	mov	r0, r6
 8004978:	f002 f88c 	bl	8006a94 <memcmp>
 800497c:	b110      	cbz	r0, 8004984 <KMS_Free+0x44>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_CANARY);
 800497e:	2002      	movs	r0, #2
 8004980:	f7fb ff98 	bl	80008b4 <KMS_LL_ReportError>
      if (phead == kms_mem_pool_tab[i])
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <KMS_Free+0x94>)
 8004986:	429c      	cmp	r4, r3
 8004988:	d013      	beq.n	80049b2 <KMS_Free+0x72>
 800498a:	f503 729a 	add.w	r2, r3, #308	; 0x134
 800498e:	4294      	cmp	r4, r2
 8004990:	d00f      	beq.n	80049b2 <KMS_Free+0x72>
 8004992:	f503 721a 	add.w	r2, r3, #616	; 0x268
 8004996:	4294      	cmp	r4, r2
 8004998:	d00b      	beq.n	80049b2 <KMS_Free+0x72>
 800499a:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800499e:	4294      	cmp	r4, r2
 80049a0:	d007      	beq.n	80049b2 <KMS_Free+0x72>
 80049a2:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 80049a6:	4294      	cmp	r4, r2
 80049a8:	d003      	beq.n	80049b2 <KMS_Free+0x72>
 80049aa:	f603 5304 	addw	r3, r3, #3332	; 0xd04
 80049ae:	429c      	cmp	r4, r3
 80049b0:	d10a      	bne.n	80049c8 <KMS_Free+0x88>
        phead->used = 0;
 80049b2:	2100      	movs	r1, #0
        phead->session = KMS_SESSION_ID_INVALID;
 80049b4:	e9c4 1103 	strd	r1, r1, [r4, #12]
        phead->reqSize = 0;
 80049b8:	e9c4 1105 	strd	r1, r1, [r4, #20]
        (void)memset(Ptr, 0, phead->size);
 80049bc:	68a2      	ldr	r2, [r4, #8]
 80049be:	4628      	mov	r0, r5
}
 80049c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (void)memset(Ptr, 0, phead->size);
 80049c4:	f002 b882 	b.w	8006acc <memset>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
 80049c8:	2004      	movs	r0, #4
 80049ca:	e7bd      	b.n	8004948 <KMS_Free+0x8>
 80049cc:	08006c2c 	.word	0x08006c2c
 80049d0:	08006c1c 	.word	0x08006c1c
 80049d4:	20000f54 	.word	0x20000f54

080049d8 <reset>:
  */
static void reset(void)
{
  uint32_t i;

  nvm.header = NULL;
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <reset+0x20>)
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]
  nvm.block = NVMS_BLOCK0;
 80049de:	7113      	strb	r3, [r2, #4]
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 80049e0:	f102 0008 	add.w	r0, r2, #8
  {
    nvm.slots[i] = NULL;
 80049e4:	4619      	mov	r1, r3
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 80049e6:	3301      	adds	r3, #1
 80049e8:	2b28      	cmp	r3, #40	; 0x28
    nvm.slots[i] = NULL;
 80049ea:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 80049ee:	d1fa      	bne.n	80049e6 <reset+0xe>
  }
  nvm.free_next = NULL;
  nvm.used_size = 0;
 80049f0:	e9c2 112a 	strd	r1, r1, [r2, #168]	; 0xa8
}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000db8 	.word	0x20000db8

080049fc <null_callback>:
  */
static void null_callback(nvms_data_header_t *hdrp)
{

  (void)(hdrp);
}
 80049fc:	4770      	bx	lr
	...

08004a00 <use_slot_callback>:
  * @brief   Private callback of @p use().
  */
static void use_slot_callback(nvms_data_header_t *hdrp)
{

  nvm.slots[hdrp->fields.slot] = hdrp;
 8004a00:	6883      	ldr	r3, [r0, #8]
 8004a02:	4a02      	ldr	r2, [pc, #8]	; (8004a0c <use_slot_callback+0xc>)
 8004a04:	3302      	adds	r3, #2
 8004a06:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000db8 	.word	0x20000db8

08004a10 <use_end_callback>:
  * @brief   Private callback of @p use().
  */
static void use_end_callback(nvms_data_header_t *hdrp)
{

  nvm.free_next = hdrp;
 8004a10:	4b01      	ldr	r3, [pc, #4]	; (8004a18 <use_end_callback+0x8>)
 8004a12:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
}
 8004a16:	4770      	bx	lr
 8004a18:	20000db8 	.word	0x20000db8

08004a1c <block_erase>:
{
 8004a1c:	b508      	push	{r3, lr}
  result = NVMS_LL_BlockErase(block);
 8004a1e:	f7fb ff71 	bl	8000904 <NVMS_LL_BlockErase>
  if (result)
 8004a22:	2800      	cmp	r0, #0
}
 8004a24:	bf14      	ite	ne
 8004a26:	2003      	movne	r0, #3
 8004a28:	2000      	moveq	r0, #0
 8004a2a:	bd08      	pop	{r3, pc}

08004a2c <check_slot_instance>:
{
 8004a2c:	b530      	push	{r4, r5, lr}
 8004a2e:	1f0b      	subs	r3, r1, #4
 8004a30:	f101 021c 	add.w	r2, r1, #28
    if (hdrp->hdr32[i] != NVMS_LL_ERASED)
 8004a34:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8004a38:	3401      	adds	r4, #1
 8004a3a:	d030      	beq.n	8004a9e <check_slot_instance+0x72>
      if (((uint32_t)hdrp->fields.next & (NVMS_LL_PAGE_SIZE - 1UL)) != 0UL)
 8004a3c:	690c      	ldr	r4, [r1, #16]
 8004a3e:	f014 0507 	ands.w	r5, r4, #7
 8004a42:	d11f      	bne.n	8004a84 <check_slot_instance+0x58>
  * @retval  pointer to the block base
  */
static inline uint32_t NVMS_LL_GetBlockAddress(nvms_block_t block)
{

  if (block == NVMS_BLOCK0)
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <check_slot_instance+0x7c>)
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <check_slot_instance+0x80>)
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	0852      	lsrs	r2, r2, #1
 8004a4c:	b100      	cbz	r0, 8004a50 <check_slot_instance+0x24>
  {
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
  }
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004a4e:	4413      	add	r3, r2
      endp = &startp[NVMS_LL_GetBlockSize()];
 8004a50:	4413      	add	r3, r2
      if ((hdrp->fields.next->hdr8 < (hdrp->hdr8 + sizeof(nvms_data_header_t))) ||
 8004a52:	f101 0220 	add.w	r2, r1, #32
 8004a56:	4294      	cmp	r4, r2
 8004a58:	d314      	bcc.n	8004a84 <check_slot_instance+0x58>
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	d312      	bcc.n	8004a84 <check_slot_instance+0x58>
      if ((hdrp->fields.magic1 != NVMS_HEADER_MAGIC1) ||
 8004a5e:	6808      	ldr	r0, [r1, #0]
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <check_slot_instance+0x84>)
 8004a62:	4298      	cmp	r0, r3
 8004a64:	d10e      	bne.n	8004a84 <check_slot_instance+0x58>
 8004a66:	6848      	ldr	r0, [r1, #4]
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <check_slot_instance+0x88>)
 8004a6a:	4298      	cmp	r0, r3
 8004a6c:	d10a      	bne.n	8004a84 <check_slot_instance+0x58>
      if (hdrp->fields.slot >= NVMS_CFG_NUM_SLOTS)
 8004a6e:	688b      	ldr	r3, [r1, #8]
 8004a70:	2b27      	cmp	r3, #39	; 0x27
 8004a72:	d807      	bhi.n	8004a84 <check_slot_instance+0x58>
      if (hdrp->fields.instance == NVMS_LL_ERASED)
 8004a74:	68cb      	ldr	r3, [r1, #12]
 8004a76:	3301      	adds	r3, #1
 8004a78:	d004      	beq.n	8004a84 <check_slot_instance+0x58>
      if ((hdrp->hdr8 + sizeof(nvms_data_header_t) + hdrp->fields.data_size) >
 8004a7a:	698b      	ldr	r3, [r1, #24]
 8004a7c:	3320      	adds	r3, #32
 8004a7e:	440b      	add	r3, r1
 8004a80:	429c      	cmp	r4, r3
 8004a82:	d204      	bcs.n	8004a8e <check_slot_instance+0x62>
        return NVMS_SLOT_STATUS_BROKEN;
 8004a84:	2003      	movs	r0, #3
 8004a86:	e009      	b.n	8004a9c <check_slot_instance+0x70>
    checksum += *p;
 8004a88:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004a8c:	4405      	add	r5, r0
  while (n != 0UL)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d1fa      	bne.n	8004a88 <check_slot_instance+0x5c>
      if (checksum != hdrp->fields.data_checksum)
 8004a92:	69c8      	ldr	r0, [r1, #28]
      return NVMS_SLOT_STATUS_OK;
 8004a94:	42a8      	cmp	r0, r5
 8004a96:	bf14      	ite	ne
 8004a98:	2002      	movne	r0, #2
 8004a9a:	2001      	moveq	r0, #1
}
 8004a9c:	bd30      	pop	{r4, r5, pc}
  for (i = 0; i < 8U; i++)
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d1c8      	bne.n	8004a34 <check_slot_instance+0x8>
  return NVMS_SLOT_STATUS_ERASED;
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e7fa      	b.n	8004a9c <check_slot_instance+0x70>
 8004aa6:	bf00      	nop
 8004aa8:	08013000 	.word	0x08013000
 8004aac:	08015000 	.word	0x08015000
 8004ab0:	5aa5f731 	.word	0x5aa5f731
 8004ab4:	137fa55a 	.word	0x137fa55a

08004ab8 <scan_slots>:
{
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	4c1d      	ldr	r4, [pc, #116]	; (8004b34 <scan_slots+0x7c>)
 8004abe:	4e1e      	ldr	r6, [pc, #120]	; (8004b38 <scan_slots+0x80>)
 8004ac0:	1b36      	subs	r6, r6, r4
 8004ac2:	4689      	mov	r9, r1
 8004ac4:	4690      	mov	r8, r2
 8004ac6:	0876      	lsrs	r6, r6, #1
  if (block == NVMS_BLOCK0)
 8004ac8:	4607      	mov	r7, r0
 8004aca:	b100      	cbz	r0, 8004ace <scan_slots+0x16>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004acc:	4434      	add	r4, r6
  slotsts = check_slot_instance(block, hdrp);
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7ff ffab 	bl	8004a2c <check_slot_instance>
  if (slotsts != NVMS_SLOT_STATUS_OK)
 8004ad6:	2801      	cmp	r0, #1
  slotsts = check_slot_instance(block, hdrp);
 8004ad8:	4605      	mov	r5, r0
  if (slotsts != NVMS_SLOT_STATUS_OK)
 8004ada:	d126      	bne.n	8004b2a <scan_slots+0x72>
  endp = &startp[NVMS_LL_GetBlockSize()];
 8004adc:	4426      	add	r6, r4
  bool warning = false;
 8004ade:	f04f 0a00 	mov.w	sl, #0
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 8004ae2:	6924      	ldr	r4, [r4, #16]
    if (hdrp->hdr8 == endp)
 8004ae4:	42b4      	cmp	r4, r6
 8004ae6:	d108      	bne.n	8004afa <scan_slots+0x42>
        endcallback(hdrp);
 8004ae8:	4620      	mov	r0, r4
 8004aea:	47c0      	blx	r8
          status = NVMS_STATUS_PARTIAL;
 8004aec:	f1ba 0f00 	cmp.w	sl, #0
 8004af0:	bf18      	it	ne
 8004af2:	2502      	movne	r5, #2
}
 8004af4:	4628      	mov	r0, r5
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    slotsts = check_slot_instance(block, hdrp);
 8004afa:	4621      	mov	r1, r4
 8004afc:	4638      	mov	r0, r7
 8004afe:	f7ff ff95 	bl	8004a2c <check_slot_instance>
    switch (slotsts)
 8004b02:	2803      	cmp	r0, #3
 8004b04:	d8ed      	bhi.n	8004ae2 <scan_slots+0x2a>
 8004b06:	a301      	add	r3, pc, #4	; (adr r3, 8004b0c <scan_slots+0x54>)
 8004b08:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8004b0c:	08004ae9 	.word	0x08004ae9
 8004b10:	08004b1d 	.word	0x08004b1d
 8004b14:	08004b2f 	.word	0x08004b2f
 8004b18:	08004b23 	.word	0x08004b23
        slotcallback(hdrp);
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	47c8      	blx	r9
        break;
 8004b20:	e7df      	b.n	8004ae2 <scan_slots+0x2a>
        endcallback(hdrp);
 8004b22:	4620      	mov	r0, r4
 8004b24:	47c0      	blx	r8
        status = NVMS_STATUS_PARTIAL;
 8004b26:	2502      	movs	r5, #2
        break;
 8004b28:	e7e4      	b.n	8004af4 <scan_slots+0x3c>
    return NVMS_STATUS_BROKEN;
 8004b2a:	2503      	movs	r5, #3
 8004b2c:	e7e2      	b.n	8004af4 <scan_slots+0x3c>
    slotsts = check_slot_instance(block, hdrp);
 8004b2e:	f04f 0a01 	mov.w	sl, #1
  while (!status_found)
 8004b32:	e7d6      	b.n	8004ae2 <scan_slots+0x2a>
 8004b34:	08013000 	.word	0x08013000
 8004b38:	08015000 	.word	0x08015000

08004b3c <use>:
  * @return                    The operation status.
  * @retval NVMS_NOERROR       if the operation has been successfully completed.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
static nvms_error_t use(nvms_block_t block)
{
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d1c      	ldr	r5, [pc, #112]	; (8004bb0 <use+0x74>)
  if (block == NVMS_BLOCK0)
 8004b40:	4606      	mov	r6, r0
 8004b42:	b118      	cbz	r0, 8004b4c <use+0x10>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <use+0x78>)
 8004b46:	1b5b      	subs	r3, r3, r5
 8004b48:	eb05 0553 	add.w	r5, r5, r3, lsr #1

  /* Resetting state */
  reset();

  /* Global info */
  nvm.header    = hdrp;
 8004b4c:	4c1a      	ldr	r4, [pc, #104]	; (8004bb8 <use+0x7c>)
  reset();
 8004b4e:	f7ff ff43 	bl	80049d8 <reset>
  nvm.block     = block;
  nvm.used_size = sizeof(nvms_data_header_t);
 8004b52:	2320      	movs	r3, #32
  nvm.header    = hdrp;
 8004b54:	6025      	str	r5, [r4, #0]
  nvm.free_next = &hdrp[1];

  /* The block should have been checked before calling use() so any
     kind of anomaly in the block is considered an internal error */
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <use+0x80>)
 8004b58:	4919      	ldr	r1, [pc, #100]	; (8004bc0 <use+0x84>)
  nvm.block     = block;
 8004b5a:	7126      	strb	r6, [r4, #4]
  nvm.free_next = &hdrp[1];
 8004b5c:	441d      	add	r5, r3
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004b5e:	4630      	mov	r0, r6
  nvm.used_size = sizeof(nvms_data_header_t);
 8004b60:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  nvm.free_next = &hdrp[1];
 8004b64:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004b68:	f7ff ffa6 	bl	8004ab8 <scan_slots>
  if (status != NVMS_STATUS_NORMAL)
 8004b6c:	2801      	cmp	r0, #1
 8004b6e:	d003      	beq.n	8004b78 <use+0x3c>
  {
    reset();
 8004b70:	f7ff ff32 	bl	80049d8 <reset>
    return NVMS_INTERNAL;
 8004b74:	2008      	movs	r0, #8
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
    }
  }

  return NVMS_NOERROR;
}
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
  if (status != NVMS_STATUS_NORMAL)
 8004b78:	2100      	movs	r1, #0
 8004b7a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004b7e:	f104 0508 	add.w	r5, r4, #8
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8004b82:	4608      	mov	r0, r1
    hdrp = nvm.slots[i];
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
    if (hdrp != NULL)
 8004b88:	b12b      	cbz	r3, 8004b96 <use+0x5a>
      if (hdrp->fields.data_size == 0UL)
 8004b8a:	699e      	ldr	r6, [r3, #24]
 8004b8c:	b95e      	cbnz	r6, 8004ba6 <use+0x6a>
        nvm.slots[hdrp->fields.slot] = NULL;
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	3302      	adds	r3, #2
 8004b92:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8004b96:	3001      	adds	r0, #1
 8004b98:	2828      	cmp	r0, #40	; 0x28
 8004b9a:	d1f3      	bne.n	8004b84 <use+0x48>
 8004b9c:	b109      	cbz	r1, 8004ba2 <use+0x66>
 8004b9e:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    return NVMS_INTERNAL;
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e7e7      	b.n	8004b76 <use+0x3a>
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
 8004ba6:	6919      	ldr	r1, [r3, #16]
 8004ba8:	1acb      	subs	r3, r1, r3
 8004baa:	441a      	add	r2, r3
 8004bac:	2101      	movs	r1, #1
 8004bae:	e7f2      	b.n	8004b96 <use+0x5a>
 8004bb0:	08013000 	.word	0x08013000
 8004bb4:	08015000 	.word	0x08015000
 8004bb8:	20000db8 	.word	0x20000db8
 8004bbc:	08004a11 	.word	0x08004a11
 8004bc0:	08004a01 	.word	0x08004a01

08004bc4 <copy_slots>:
  if (block == NVMS_BLOCK0)
 8004bc4:	4a3c      	ldr	r2, [pc, #240]	; (8004cb8 <copy_slots+0xf4>)
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <copy_slots+0xf8>)
{
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	eb02 0753 	add.w	r7, r2, r3, lsr #1
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	463d      	movne	r5, r7
 8004bd8:	4615      	moveq	r5, r2
  startp = (uint8_t *)NVMS_LL_GetBlockAddress(block);
 8004bda:	f1b0 0800 	subs.w	r8, r0, #0
 8004bde:	bf08      	it	eq
 8004be0:	4617      	moveq	r7, r2
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004be2:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8004cc4 <copy_slots+0x100>
{
 8004be6:	b08b      	sub	sp, #44	; 0x2c
  whdrp = (nvms_data_header_t *)NVMS_LL_GetBlockAddress(dest_block) + 1;
 8004be8:	3520      	adds	r5, #32
  endp = &startp[NVMS_LL_GetBlockSize()];
 8004bea:	eb07 0a53 	add.w	sl, r7, r3, lsr #1
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 8004bee:	2600      	movs	r6, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004bf0:	f04f 39ff 	mov.w	r9, #4294967295
  crcerr = false;
 8004bf4:	2300      	movs	r3, #0
  hdrp = (nvms_data_header_t *)(uint32_t)startp;
 8004bf6:	4639      	mov	r1, r7
  slotp = NULL;
 8004bf8:	461c      	mov	r4, r3
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 8004bfa:	6909      	ldr	r1, [r1, #16]
    if (hdrp->hdr8 == endp)
 8004bfc:	458a      	cmp	sl, r1
 8004bfe:	d137      	bne.n	8004c70 <copy_slots+0xac>
        if (slotp == NULL)
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d054      	beq.n	8004cae <copy_slots+0xea>
          if (crcerr)
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d152      	bne.n	8004cae <copy_slots+0xea>
    if ((err == NVMS_NOERROR) && (rhdrp->fields.data_size > 0UL))
 8004c08:	69a3      	ldr	r3, [r4, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04f      	beq.n	8004cae <copy_slots+0xea>
  hdr.fields.slot                = rhdrp->fields.slot;
 8004c0e:	68a2      	ldr	r2, [r4, #8]
 8004c10:	9204      	str	r2, [sp, #16]
  hdr.fields.instance           = 1;    /* Resetting instance number */
 8004c12:	2201      	movs	r2, #1
 8004c14:	9205      	str	r2, [sp, #20]
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004c16:	f103 021f 	add.w	r2, r3, #31
 8004c1a:	f042 0207 	orr.w	r2, r2, #7
 8004c1e:	3201      	adds	r2, #1
 8004c20:	442a      	add	r2, r5
  hdr.fields.next               = (nvms_data_header_t *)(uint32_t)p_free;
 8004c22:	9206      	str	r2, [sp, #24]
  hdr.fields.data_type       = rhdrp->fields.data_type;
 8004c24:	6962      	ldr	r2, [r4, #20]
  hdr.fields.data_size       = size;
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	e9cd 2307 	strd	r2, r3, [sp, #28]
  hdr.fields.data_checksum   = rhdrp->fields.data_checksum;
 8004c2c:	69e2      	ldr	r2, [r4, #28]
 8004c2e:	9209      	str	r2, [sp, #36]	; 0x24
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004c30:	f105 0108 	add.w	r1, r5, #8
 8004c34:	2218      	movs	r2, #24
 8004c36:	a804      	add	r0, sp, #16
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004c38:	e9cd 9902 	strd	r9, r9, [sp, #8]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004c3c:	f7fb fe88 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004c40:	b990      	cbnz	r0, 8004c68 <copy_slots+0xa4>
  result = NVMS_LL_Write(rhdrp->hdr8 + sizeof(nvms_data_header_t),
 8004c42:	9b01      	ldr	r3, [sp, #4]
 8004c44:	f105 0120 	add.w	r1, r5, #32
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f104 0020 	add.w	r0, r4, #32
 8004c4e:	f7fb fe7f 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004c52:	b948      	cbnz	r0, 8004c68 <copy_slots+0xa4>
  hdr.fields.magic1 = NVMS_HEADER_MAGIC1;
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <copy_slots+0xfc>)
  result = NVMS_LL_Write((const uint8_t *)&hdr, p_next, sizeof(uint32_t) * 2UL);
 8004c56:	2208      	movs	r2, #8
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb0d 0002 	add.w	r0, sp, r2
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004c5e:	e9cd 3b02 	strd	r3, fp, [sp, #8]
  result = NVMS_LL_Write((const uint8_t *)&hdr, p_next, sizeof(uint32_t) * 2UL);
 8004c62:	f7fb fe75 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004c66:	b308      	cbz	r0, 8004cac <copy_slots+0xe8>
    return NVMS_FLASH_FAILURE;
 8004c68:	2003      	movs	r0, #3
}
 8004c6a:	b00b      	add	sp, #44	; 0x2c
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    slotsts = check_slot_instance(block, hdrp);
 8004c70:	4640      	mov	r0, r8
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	f7ff feda 	bl	8004a2c <check_slot_instance>
    switch (slotsts)
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	2803      	cmp	r0, #3
 8004c7c:	d8bd      	bhi.n	8004bfa <copy_slots+0x36>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <copy_slots+0xc0>)
 8004c80:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8004c84:	08004c01 	.word	0x08004c01
 8004c88:	08004c95 	.word	0x08004c95
 8004c8c:	08004ca1 	.word	0x08004ca1
 8004c90:	08004c01 	.word	0x08004c01
        if (hdrp->fields.slot == slot)
 8004c94:	688a      	ldr	r2, [r1, #8]
 8004c96:	42b2      	cmp	r2, r6
 8004c98:	bf04      	itt	eq
 8004c9a:	460c      	moveq	r4, r1
 8004c9c:	2300      	moveq	r3, #0
 8004c9e:	e7ac      	b.n	8004bfa <copy_slots+0x36>
        if (hdrp->fields.slot == slot)
 8004ca0:	688a      	ldr	r2, [r1, #8]
 8004ca2:	42b2      	cmp	r2, r6
 8004ca4:	bf04      	itt	eq
 8004ca6:	460c      	moveq	r4, r1
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	e7a6      	b.n	8004bfa <copy_slots+0x36>
      whdrp = (nvms_data_header_t *)whdrp->fields.next;
 8004cac:	692d      	ldr	r5, [r5, #16]
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 8004cae:	3601      	adds	r6, #1
 8004cb0:	2e28      	cmp	r6, #40	; 0x28
 8004cb2:	d19f      	bne.n	8004bf4 <copy_slots+0x30>
  return NVMS_NOERROR;
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e7d8      	b.n	8004c6a <copy_slots+0xa6>
 8004cb8:	08013000 	.word	0x08013000
 8004cbc:	08015000 	.word	0x08015000
 8004cc0:	5aa5f731 	.word	0x5aa5f731
 8004cc4:	137fa55a 	.word	0x137fa55a

08004cc8 <validate>:
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4c15      	ldr	r4, [pc, #84]	; (8004d20 <validate+0x58>)
 8004ccc:	b088      	sub	sp, #32
  if (block == NVMS_BLOCK0)
 8004cce:	b118      	cbz	r0, 8004cd8 <validate+0x10>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004cd0:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <validate+0x5c>)
 8004cd2:	1b1b      	subs	r3, r3, r4
 8004cd4:	eb04 0453 	add.w	r4, r4, r3, lsr #1
  hdr.fields.slot               = NVMS_SLOT_MAIN_HEADER;
 8004cd8:	2300      	movs	r3, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
  hdr.fields.instance           = instance;
 8004cde:	e9cd 3102 	strd	r3, r1, [sp, #8]
  hdr.fields.next               = &((nvms_data_header_t *)(uint32_t)dp)[1];
 8004ce2:	f104 0120 	add.w	r1, r4, #32
  hdr.fields.data_type       = NVMS_LL_ERASED;
 8004ce6:	e9cd 1204 	strd	r1, r2, [sp, #16]
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004cea:	e9cd 2200 	strd	r2, r2, [sp]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 8004cee:	f104 0108 	add.w	r1, r4, #8
 8004cf2:	2218      	movs	r2, #24
 8004cf4:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum   = 0;
 8004cf6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 8004cfa:	f7fb fe29 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004cfe:	b110      	cbz	r0, 8004d06 <validate+0x3e>
    return NVMS_FLASH_FAILURE;
 8004d00:	2003      	movs	r0, #3
}
 8004d02:	b008      	add	sp, #32
 8004d04:	bd10      	pop	{r4, pc}
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <validate+0x60>)
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <validate+0x64>)
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 8004d0a:	4621      	mov	r1, r4
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004d0c:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 8004d10:	4668      	mov	r0, sp
 8004d12:	2208      	movs	r2, #8
 8004d14:	f7fb fe1c 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d0f2      	beq.n	8004d02 <validate+0x3a>
 8004d1c:	e7f0      	b.n	8004d00 <validate+0x38>
 8004d1e:	bf00      	nop
 8004d20:	08013000 	.word	0x08013000
 8004d24:	08015000 	.word	0x08015000
 8004d28:	5aa5f731 	.word	0x5aa5f731
 8004d2c:	137fa55a 	.word	0x137fa55a

08004d30 <garbage_collect>:
/**
  * @brief   Enforces a garbage collection.
  * @details Storage data is compacted into a single bank.
  */
static nvms_error_t garbage_collect(void)
{
 8004d30:	b510      	push	{r4, lr}

  if (nvm.block == NVMS_BLOCK0)
 8004d32:	4c17      	ldr	r4, [pc, #92]	; (8004d90 <garbage_collect+0x60>)
 8004d34:	7920      	ldrb	r0, [r4, #4]
 8004d36:	b9a8      	cbnz	r0, 8004d64 <garbage_collect+0x34>
  {
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004d38:	2101      	movs	r1, #1
 8004d3a:	f7ff ff43 	bl	8004bc4 <copy_slots>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	bb18      	cbnz	r0, 8004d8a <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK1, nvm.header->fields.instance + 1UL));
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	2001      	movs	r0, #1
 8004d48:	3101      	adds	r1, #1
 8004d4a:	f7ff ffbd 	bl	8004cc8 <validate>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b9d8      	cbnz	r0, 8004d8a <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004d52:	f7ff fe63 	bl	8004a1c <block_erase>
 8004d56:	4603      	mov	r3, r0
 8004d58:	b9b8      	cbnz	r0, 8004d8a <garbage_collect+0x5a>
    CHECK_ERROR(use(NVMS_BLOCK1));
 8004d5a:	2001      	movs	r0, #1
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
    CHECK_ERROR(use(NVMS_BLOCK0));
  }

  return NVMS_NOERROR;
}
 8004d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CHECK_ERROR(use(NVMS_BLOCK0));
 8004d60:	f7ff beec 	b.w	8004b3c <use>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8004d64:	2100      	movs	r1, #0
 8004d66:	2001      	movs	r0, #1
 8004d68:	f7ff ff2c 	bl	8004bc4 <copy_slots>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	b960      	cbnz	r0, 8004d8a <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK0, nvm.header->fields.instance + 1UL));
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	68d9      	ldr	r1, [r3, #12]
 8004d74:	3101      	adds	r1, #1
 8004d76:	f7ff ffa7 	bl	8004cc8 <validate>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	b928      	cbnz	r0, 8004d8a <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7ff fe4c 	bl	8004a1c <block_erase>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0e8      	beq.n	8004d5c <garbage_collect+0x2c>
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000db8 	.word	0x20000db8

08004d94 <append_slot>:
{
 8004d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p_next = nvm.free_next->hdr8;
 8004d98:	4d21      	ldr	r5, [pc, #132]	; (8004e20 <append_slot+0x8c>)
{
 8004d9a:	b088      	sub	sp, #32
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004d9c:	f101 041f 	add.w	r4, r1, #31
{
 8004da0:	461f      	mov	r7, r3
  p_next = nvm.free_next->hdr8;
 8004da2:	f8d5 80a8 	ldr.w	r8, [r5, #168]	; 0xa8
  hdr.fields.slot               = slot;
 8004da6:	9002      	str	r0, [sp, #8]
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004dac:	f044 0407 	orr.w	r4, r4, #7
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004db0:	e9cd 3300 	strd	r3, r3, [sp]
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004db4:	3401      	adds	r4, #1
  hdr.fields.instance           = instance;
 8004db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004db8:	4444      	add	r4, r8
  hdr.fields.data_size          = size;
 8004dba:	e9cd 2105 	strd	r2, r1, [sp, #20]
  hdr.fields.next               = (nvms_data_header_t *)(uint32_t)p_free;
 8004dbe:	e9cd 3403 	strd	r3, r4, [sp, #12]
{
 8004dc2:	460e      	mov	r6, r1
  const uint8_t *p = data_p;
 8004dc4:	463a      	mov	r2, r7
 8004dc6:	1879      	adds	r1, r7, r1
  checksum = 0;
 8004dc8:	2300      	movs	r3, #0
  while (n != 0UL)
 8004dca:	428a      	cmp	r2, r1
 8004dcc:	d10b      	bne.n	8004de6 <append_slot+0x52>
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004dce:	2218      	movs	r2, #24
 8004dd0:	f108 0108 	add.w	r1, r8, #8
 8004dd4:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum      = do_checksum(slotp, size);
 8004dd6:	9307      	str	r3, [sp, #28]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004dd8:	f7fb fdba 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004ddc:	b138      	cbz	r0, 8004dee <append_slot+0x5a>
    return NVMS_FLASH_FAILURE;
 8004dde:	2003      	movs	r0, #3
}
 8004de0:	b008      	add	sp, #32
 8004de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    checksum += *p;
 8004de6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004dea:	4403      	add	r3, r0
    n--;
 8004dec:	e7ed      	b.n	8004dca <append_slot+0x36>
  if (size > 0UL)
 8004dee:	b976      	cbnz	r6, 8004e0e <append_slot+0x7a>
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004df0:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <append_slot+0x90>)
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <append_slot+0x94>)
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8004df4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004df8:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8004dfc:	4668      	mov	r0, sp
 8004dfe:	2208      	movs	r2, #8
 8004e00:	f7fb fda6 	bl	8000950 <NVMS_LL_Write>
  if (result)
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1ea      	bne.n	8004dde <append_slot+0x4a>
  nvm.free_next = (nvms_data_header_t *)(uint32_t)p_free;
 8004e08:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
  return NVMS_NOERROR;
 8004e0c:	e7e8      	b.n	8004de0 <append_slot+0x4c>
    result = NVMS_LL_Write(slotp, &p_next[sizeof(nvms_data_header_t)], size);
 8004e0e:	4632      	mov	r2, r6
 8004e10:	f108 0120 	add.w	r1, r8, #32
 8004e14:	4638      	mov	r0, r7
 8004e16:	f7fb fd9b 	bl	8000950 <NVMS_LL_Write>
    if (result)
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d0e8      	beq.n	8004df0 <append_slot+0x5c>
 8004e1e:	e7de      	b.n	8004dde <append_slot+0x4a>
 8004e20:	20000db8 	.word	0x20000db8
 8004e24:	5aa5f731 	.word	0x5aa5f731
 8004e28:	137fa55a 	.word	0x137fa55a

08004e2c <NVMS_Init>:
  * @retval NVMS_FLASH_FAILURE if the flash memory is unusable because HW
  *                            failures.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
nvms_error_t NVMS_Init(void)
{
 8004e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	4d7f      	ldr	r5, [pc, #508]	; (8005030 <NVMS_Init+0x204>)
 8004e32:	4c80      	ldr	r4, [pc, #512]	; (8005034 <NVMS_Init+0x208>)
  return scan_slots(block, null_callback, null_callback);
 8004e34:	4f80      	ldr	r7, [pc, #512]	; (8005038 <NVMS_Init+0x20c>)
  NVMS_LL_Init();
 8004e36:	f7fb fd4b 	bl	80008d0 <NVMS_LL_Init>
  reset();
 8004e3a:	f7ff fdcd 	bl	80049d8 <reset>
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	eb05 0454 	add.w	r4, r5, r4, lsr #1
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 8004e44:	2603      	movs	r6, #3
  if (NVMS_LL_IsBlockErased(block))
 8004e46:	2000      	movs	r0, #0
 8004e48:	f7fb fd44 	bl	80008d4 <NVMS_LL_IsBlockErased>
 8004e4c:	bb58      	cbnz	r0, 8004ea6 <NVMS_Init+0x7a>
  return scan_slots(block, null_callback, null_callback);
 8004e4e:	497a      	ldr	r1, [pc, #488]	; (8005038 <NVMS_Init+0x20c>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 8004e50:	f8d5 800c 	ldr.w	r8, [r5, #12]
  return scan_slots(block, null_callback, null_callback);
 8004e54:	463a      	mov	r2, r7
 8004e56:	f7ff fe2f 	bl	8004ab8 <scan_slots>
 8004e5a:	4683      	mov	fp, r0
  if (NVMS_LL_IsBlockErased(block))
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7fb fd39 	bl	80008d4 <NVMS_LL_IsBlockErased>
 8004e62:	9001      	str	r0, [sp, #4]
 8004e64:	2800      	cmp	r0, #0
 8004e66:	f040 80bf 	bne.w	8004fe8 <NVMS_Init+0x1bc>
  return scan_slots(block, null_callback, null_callback);
 8004e6a:	4973      	ldr	r1, [pc, #460]	; (8005038 <NVMS_Init+0x20c>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 8004e6c:	f8d4 900c 	ldr.w	r9, [r4, #12]
  return scan_slots(block, null_callback, null_callback);
 8004e70:	463a      	mov	r2, r7
 8004e72:	2001      	movs	r0, #1
 8004e74:	f7ff fe20 	bl	8004ab8 <scan_slots>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8004e78:	9b01      	ldr	r3, [sp, #4]
  return scan_slots(block, null_callback, null_callback);
 8004e7a:	4682      	mov	sl, r0
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8004e7c:	f1bb 0f00 	cmp.w	fp, #0
 8004e80:	d115      	bne.n	8004eae <NVMS_Init+0x82>
 8004e82:	b9d8      	cbnz	r0, 8004ebc <NVMS_Init+0x90>
    CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 8004e84:	2101      	movs	r1, #1
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7ff ff1e 	bl	8004cc8 <validate>
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f040 8084 	bne.w	8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(use(NVMS_BLOCK0));
 8004e94:	f7ff fe52 	bl	8004b3c <use>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d17e      	bne.n	8004f9c <NVMS_Init+0x170>
    return NVMS_NOERROR;
 8004e9e:	2000      	movs	r0, #0
    {
      return err;
    }
  }
  return NVMS_FLASH_FAILURE;
}
 8004ea0:	b003      	add	sp, #12
 8004ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t seq0 = 0;
 8004ea6:	f04f 0800 	mov.w	r8, #0
    return NVMS_STATUS_ERASED;
 8004eaa:	46c3      	mov	fp, r8
 8004eac:	e7d6      	b.n	8004e5c <NVMS_Init+0x30>
  if (sts1 == NVMS_STATUS_ERASED)
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d13b      	bne.n	8004f2a <NVMS_Init+0xfe>
    if (sts0 == NVMS_STATUS_NORMAL)
 8004eb2:	f1bb 0f01 	cmp.w	fp, #1
 8004eb6:	d114      	bne.n	8004ee2 <NVMS_Init+0xb6>
      CHECK_ERROR(use(NVMS_BLOCK0));
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e7eb      	b.n	8004e94 <NVMS_Init+0x68>
    if (sts1 == NVMS_STATUS_NORMAL)
 8004ebc:	2801      	cmp	r0, #1
 8004ebe:	d0e9      	beq.n	8004e94 <NVMS_Init+0x68>
    if (sts1 == NVMS_STATUS_PARTIAL)
 8004ec0:	2802      	cmp	r0, #2
 8004ec2:	d17a      	bne.n	8004fba <NVMS_Init+0x18e>
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8004ec4:	4659      	mov	r1, fp
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7ff fe7c 	bl	8004bc4 <copy_slots>
 8004ecc:	4601      	mov	r1, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d164      	bne.n	8004f9c <NVMS_Init+0x170>
        CHECK_ERROR(validate(NVMS_BLOCK0, seq1 + 1UL));
 8004ed2:	f109 0101 	add.w	r1, r9, #1
    CHECK_ERROR(validate(NVMS_BLOCK0, seq0 + 1UL));
 8004ed6:	f7ff fef7 	bl	8004cc8 <validate>
 8004eda:	4601      	mov	r1, r0
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d15d      	bne.n	8004f9c <NVMS_Init+0x170>
 8004ee0:	e054      	b.n	8004f8c <NVMS_Init+0x160>
    if (sts0 == NVMS_STATUS_PARTIAL)
 8004ee2:	f1bb 0f02 	cmp.w	fp, #2
 8004ee6:	d10f      	bne.n	8004f08 <NVMS_Init+0xdc>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004ee8:	2101      	movs	r1, #1
 8004eea:	2000      	movs	r0, #0
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004eec:	f7ff fe6a 	bl	8004bc4 <copy_slots>
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d152      	bne.n	8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 8004ef6:	f108 0101 	add.w	r1, r8, #1
 8004efa:	2001      	movs	r0, #1
 8004efc:	f7ff fee4 	bl	8004cc8 <validate>
 8004f00:	4601      	mov	r1, r0
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d14a      	bne.n	8004f9c <NVMS_Init+0x170>
 8004f06:	e03a      	b.n	8004f7e <NVMS_Init+0x152>
    if (sts0 == NVMS_STATUS_BROKEN)
 8004f08:	f1bb 0f03 	cmp.w	fp, #3
 8004f0c:	d14f      	bne.n	8004fae <NVMS_Init+0x182>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7ff fd84 	bl	8004a1c <block_erase>
 8004f14:	4601      	mov	r1, r0
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d140      	bne.n	8004f9c <NVMS_Init+0x170>
      CHECK_ERROR(validate(NVMS_BLOCK1, 1));
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	f7ff fed3 	bl	8004cc8 <validate>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f22:	4601      	mov	r1, r0
 8004f24:	bbd0      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(use(NVMS_BLOCK1));
 8004f26:	2001      	movs	r0, #1
 8004f28:	e00a      	b.n	8004f40 <NVMS_Init+0x114>
  if ((sts0 == NVMS_STATUS_NORMAL) && (sts1 == NVMS_STATUS_NORMAL))
 8004f2a:	f1bb 0f01 	cmp.w	fp, #1
 8004f2e:	d10d      	bne.n	8004f4c <NVMS_Init+0x120>
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d127      	bne.n	8004f84 <NVMS_Init+0x158>
    if (seq0 > seq1)
 8004f34:	45c1      	cmp	r9, r8
 8004f36:	d221      	bcs.n	8004f7c <NVMS_Init+0x150>
        CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004f38:	f7ff fd70 	bl	8004a1c <block_erase>
 8004f3c:	4601      	mov	r1, r0
 8004f3e:	bb68      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
      CHECK_ERROR(use(NVMS_BLOCK0));
 8004f40:	f7ff fdfc 	bl	8004b3c <use>
 8004f44:	4601      	mov	r1, r0
 8004f46:	bb48      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
    return NVMS_NOERROR;
 8004f48:	2002      	movs	r0, #2
 8004f4a:	e7a9      	b.n	8004ea0 <NVMS_Init+0x74>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_PARTIAL))
 8004f4c:	f1bb 0f02 	cmp.w	fp, #2
 8004f50:	d14f      	bne.n	8004ff2 <NVMS_Init+0x1c6>
 8004f52:	2802      	cmp	r0, #2
 8004f54:	d165      	bne.n	8005022 <NVMS_Init+0x1f6>
    if (seq0 > seq1)
 8004f56:	45c1      	cmp	r9, r8
 8004f58:	d21a      	bcs.n	8004f90 <NVMS_Init+0x164>
      CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f7ff fd5e 	bl	8004a1c <block_erase>
 8004f60:	4601      	mov	r1, r0
 8004f62:	b9d8      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004f64:	2101      	movs	r1, #1
 8004f66:	f7ff fe2d 	bl	8004bc4 <copy_slots>
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	b9b0      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
      CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 8004f6e:	f108 0101 	add.w	r1, r8, #1
 8004f72:	2001      	movs	r0, #1
 8004f74:	f7ff fea8 	bl	8004cc8 <validate>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	b978      	cbnz	r0, 8004f9c <NVMS_Init+0x170>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f7c:	2000      	movs	r0, #0
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f7e:	f7ff fd4d 	bl	8004a1c <block_erase>
 8004f82:	e7ce      	b.n	8004f22 <NVMS_Init+0xf6>
    if (sts1 == NVMS_STATUS_PARTIAL)
 8004f84:	2802      	cmp	r0, #2
 8004f86:	d110      	bne.n	8004faa <NVMS_Init+0x17e>
      if (seq0 > seq1)
 8004f88:	45c1      	cmp	r9, r8
 8004f8a:	d201      	bcs.n	8004f90 <NVMS_Init+0x164>
        CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7d3      	b.n	8004f38 <NVMS_Init+0x10c>
        CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fd43 	bl	8004a1c <block_erase>
 8004f96:	4601      	mov	r1, r0
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d094      	beq.n	8004ec6 <NVMS_Init+0x9a>
    if ((err == NVMS_NOERROR) || (err == NVMS_WARNING))
 8004f9c:	2902      	cmp	r1, #2
 8004f9e:	d0d3      	beq.n	8004f48 <NVMS_Init+0x11c>
  for (uint32_t i = NVMS_CFG_MAX_REPAIR_ATTEMPTS; i > 0UL; i--)
 8004fa0:	3e01      	subs	r6, #1
 8004fa2:	f47f af50 	bne.w	8004e46 <NVMS_Init+0x1a>
  return NVMS_FLASH_FAILURE;
 8004fa6:	2003      	movs	r0, #3
 8004fa8:	e77a      	b.n	8004ea0 <NVMS_Init+0x74>
    if (sts1 == NVMS_STATUS_BROKEN)
 8004faa:	2803      	cmp	r0, #3
 8004fac:	d0ee      	beq.n	8004f8c <NVMS_Init+0x160>
  CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7ff fd34 	bl	8004a1c <block_erase>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1f0      	bne.n	8004f9c <NVMS_Init+0x170>
  CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f7ff fd2e 	bl	8004a1c <block_erase>
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d1ea      	bne.n	8004f9c <NVMS_Init+0x170>
  CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	f7ff fe7e 	bl	8004cc8 <validate>
 8004fcc:	e7b6      	b.n	8004f3c <NVMS_Init+0x110>
      if (seq1 > seq0)
 8004fce:	45c1      	cmp	r9, r8
 8004fd0:	d8d4      	bhi.n	8004f7c <NVMS_Init+0x150>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004fd2:	f7ff fd23 	bl	8004a1c <block_erase>
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1df      	bne.n	8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004fdc:	2101      	movs	r1, #1
 8004fde:	e785      	b.n	8004eec <NVMS_Init+0xc0>
    if (sts0 == NVMS_STATUS_BROKEN)
 8004fe0:	f1bb 0f03 	cmp.w	fp, #3
 8004fe4:	d1e3      	bne.n	8004fae <NVMS_Init+0x182>
 8004fe6:	e7c9      	b.n	8004f7c <NVMS_Init+0x150>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8004fe8:	f1bb 0f00 	cmp.w	fp, #0
 8004fec:	f47f af61 	bne.w	8004eb2 <NVMS_Init+0x86>
 8004ff0:	e748      	b.n	8004e84 <NVMS_Init+0x58>
  if (sts1 == NVMS_STATUS_NORMAL)
 8004ff2:	2801      	cmp	r0, #1
 8004ff4:	d0f4      	beq.n	8004fe0 <NVMS_Init+0x1b4>
  if ((sts0 == NVMS_STATUS_BROKEN) && (sts1 == NVMS_STATUS_PARTIAL))
 8004ff6:	f1bb 0f03 	cmp.w	fp, #3
 8004ffa:	d1d8      	bne.n	8004fae <NVMS_Init+0x182>
 8004ffc:	f1ba 0f02 	cmp.w	sl, #2
 8005000:	d1d5      	bne.n	8004fae <NVMS_Init+0x182>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fd0a 	bl	8004a1c <block_erase>
 8005008:	4601      	mov	r1, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d1c6      	bne.n	8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 800500e:	2001      	movs	r0, #1
 8005010:	f7ff fdd8 	bl	8004bc4 <copy_slots>
 8005014:	4601      	mov	r1, r0
 8005016:	2800      	cmp	r0, #0
 8005018:	d1c0      	bne.n	8004f9c <NVMS_Init+0x170>
    CHECK_ERROR(validate(NVMS_BLOCK0, seq0 + 1UL));
 800501a:	f108 0101 	add.w	r1, r8, #1
 800501e:	2000      	movs	r0, #0
 8005020:	e759      	b.n	8004ed6 <NVMS_Init+0xaa>
  if (sts1 == NVMS_STATUS_NORMAL)
 8005022:	2801      	cmp	r0, #1
 8005024:	d0d3      	beq.n	8004fce <NVMS_Init+0x1a2>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_BROKEN))
 8005026:	2803      	cmp	r0, #3
 8005028:	d1c1      	bne.n	8004fae <NVMS_Init+0x182>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 800502a:	2001      	movs	r0, #1
 800502c:	e7d1      	b.n	8004fd2 <NVMS_Init+0x1a6>
 800502e:	bf00      	nop
 8005030:	08013000 	.word	0x08013000
 8005034:	08015000 	.word	0x08015000
 8005038:	080049fd 	.word	0x080049fd

0800503c <NVMS_Deinit>:
  *          been yet initialized.
  */
void NVMS_Deinit(void)
{
  /* Clearing data structures */
  reset();
 800503c:	f7ff bccc 	b.w	80049d8 <reset>

08005040 <NVMS_WriteDataWithType>:
  * @retval NVMS_OUT_OF_MEM    if the slot space is exhausted.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
nvms_error_t NVMS_WriteDataWithType(nvms_slot_t slot, size_t size, nvms_data_type_t type,
                                    const uint8_t *slotp)
{
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return nvm.header != NULL;
 8005044:	4c2a      	ldr	r4, [pc, #168]	; (80050f0 <NVMS_WriteDataWithType+0xb0>)
 8005046:	6825      	ldr	r5, [r4, #0]
{
 8005048:	b085      	sub	sp, #20
 800504a:	4607      	mov	r7, r0
 800504c:	4688      	mov	r8, r1
 800504e:	4693      	mov	fp, r2
  size_t oldused;
  nvms_error_t err;
  nvms_data_header_t *hdrp;

  /* Check on initialization */
  if (!is_initialized())
 8005050:	2d00      	cmp	r5, #0
 8005052:	d046      	beq.n	80050e2 <NVMS_WriteDataWithType+0xa2>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 8005054:	2827      	cmp	r0, #39	; 0x27
 8005056:	d846      	bhi.n	80050e6 <NVMS_WriteDataWithType+0xa6>
  * @retval  Block size
  */
static inline size_t NVMS_LL_GetBlockSize(void)
{

  return NVMS_LL_BLOCK_SIZE;
 8005058:	4926      	ldr	r1, [pc, #152]	; (80050f4 <NVMS_WriteDataWithType+0xb4>)
 800505a:	4827      	ldr	r0, [pc, #156]	; (80050f8 <NVMS_WriteDataWithType+0xb8>)
  {
    return NVMS_SLOT_INVALID;
  }

  /* Checking for immediately available space */
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 800505c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8005060:	1a08      	subs	r0, r1, r0
  /* If the requested space is out of the compacted block size then an error is returned.
   * NOTE: The space for one header is reserved in order to allow for a
   * data erase operation after the space has been fully allocated.
   */
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
                                             nvm.used_size -
 8005062:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005066:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800506a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800506e:	31e0      	adds	r1, #224	; 0xe0
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 8005070:	1b52      	subs	r2, r2, r5
                                             nvm.used_size -
 8005072:	eb01 0150 	add.w	r1, r1, r0, lsr #1
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 8005076:	f108 0520 	add.w	r5, r8, #32
 800507a:	428d      	cmp	r5, r1
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 800507c:	ebc2 0250 	rsb	r2, r2, r0, lsr #1
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 8005080:	d833      	bhi.n	80050ea <NVMS_WriteDataWithType+0xaa>
    return NVMS_OUT_OF_MEM;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new data instance */
  if ((sizeof(nvms_data_header_t) + size) > free)
 8005082:	4295      	cmp	r5, r2
 8005084:	d929      	bls.n	80050da <NVMS_WriteDataWithType+0x9a>
 8005086:	9303      	str	r3, [sp, #12]
  {
    warning = true;
    err = garbage_collect();
 8005088:	f7ff fe52 	bl	8004d30 <garbage_collect>
    if (err != NVMS_NOERROR)
 800508c:	bb10      	cbnz	r0, 80050d4 <NVMS_WriteDataWithType+0x94>
 800508e:	9b03      	ldr	r3, [sp, #12]
    warning = true;
 8005090:	2601      	movs	r6, #1
      return err;
    }
  }

  /* Index for the new data */
  if (nvm.slots[slot] == NULL)
 8005092:	f107 0a02 	add.w	sl, r7, #2
 8005096:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 800509a:	b305      	cbz	r5, 80050de <NVMS_WriteDataWithType+0x9e>
    instance = 1;
    oldused = 0;
  }
  else
  {
    instance = nvm.slots[slot]->fields.instance + 1UL;
 800509c:	68e9      	ldr	r1, [r5, #12]
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 800509e:	692a      	ldr	r2, [r5, #16]
    instance = nvm.slots[slot]->fields.instance + 1UL;
 80050a0:	3101      	adds	r1, #1
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 80050a2:	1b55      	subs	r5, r2, r5

  /* Position of the new data instance */
  hdrp = nvm.free_next;

  /* Writing the new instance */
  err = append_slot(slot, size, type, slotp, instance);
 80050a4:	9100      	str	r1, [sp, #0]
 80050a6:	465a      	mov	r2, fp
 80050a8:	4641      	mov	r1, r8
 80050aa:	4638      	mov	r0, r7
  hdrp = nvm.free_next;
 80050ac:	f8d4 90a8 	ldr.w	r9, [r4, #168]	; 0xa8
  err = append_slot(slot, size, type, slotp, instance);
 80050b0:	f7ff fe70 	bl	8004d94 <append_slot>
  if (err != NVMS_NOERROR)
 80050b4:	b970      	cbnz	r0, 80050d4 <NVMS_WriteDataWithType+0x94>
  }

  /* Adjusting the counter of the effective used size */
  nvm.slots[slot]  = hdrp;
  nvm.used_size -= oldused;
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 80050b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050ba:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
  nvm.slots[slot]  = hdrp;
 80050be:	f844 902a 	str.w	r9, [r4, sl, lsl #2]
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 80050c2:	eba3 0309 	sub.w	r3, r3, r9
 80050c6:	4413      	add	r3, r2
 80050c8:	1b5d      	subs	r5, r3, r5

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 80050ca:	2e00      	cmp	r6, #0
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 80050cc:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  return warning ? NVMS_WARNING : NVMS_NOERROR;
 80050d0:	bf18      	it	ne
 80050d2:	2002      	movne	r0, #2
}
 80050d4:	b005      	add	sp, #20
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool warning = false;
 80050da:	2600      	movs	r6, #0
 80050dc:	e7d9      	b.n	8005092 <NVMS_WriteDataWithType+0x52>
    instance = 1;
 80050de:	2101      	movs	r1, #1
 80050e0:	e7e0      	b.n	80050a4 <NVMS_WriteDataWithType+0x64>
    return NVMS_NOTINIT;
 80050e2:	2001      	movs	r0, #1
 80050e4:	e7f6      	b.n	80050d4 <NVMS_WriteDataWithType+0x94>
    return NVMS_SLOT_INVALID;
 80050e6:	2004      	movs	r0, #4
 80050e8:	e7f4      	b.n	80050d4 <NVMS_WriteDataWithType+0x94>
    return NVMS_OUT_OF_MEM;
 80050ea:	2007      	movs	r0, #7
 80050ec:	e7f2      	b.n	80050d4 <NVMS_WriteDataWithType+0x94>
 80050ee:	bf00      	nop
 80050f0:	20000db8 	.word	0x20000db8
 80050f4:	08015000 	.word	0x08015000
 80050f8:	08013000 	.word	0x08013000

080050fc <NVMS_EraseData>:
  *                             failures.
  * @retval NVMS_DATA_NOT_FOUND if the data does not exists.
  * @retval NVMS_INTERNAL       if an internal error occurred.
  */
nvms_error_t NVMS_EraseData(nvms_slot_t slot)
{
 80050fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  return nvm.header != NULL;
 8005100:	4c22      	ldr	r4, [pc, #136]	; (800518c <NVMS_EraseData+0x90>)
 8005102:	6821      	ldr	r1, [r4, #0]
{
 8005104:	4681      	mov	r9, r0
  size_t free;
  size_t oldused;
  nvms_error_t err;

  /* Check on initialization */
  if (!is_initialized())
 8005106:	b3c1      	cbz	r1, 800517a <NVMS_EraseData+0x7e>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 8005108:	2827      	cmp	r0, #39	; 0x27
 800510a:	d838      	bhi.n	800517e <NVMS_EraseData+0x82>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence */
  if (nvm.slots[slot] == NULL)
 800510c:	1c86      	adds	r6, r0, #2
 800510e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8005112:	b3b3      	cbz	r3, 8005182 <NVMS_EraseData+0x86>
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <NVMS_EraseData+0x94>)
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <NVMS_EraseData+0x98>)
 8005118:	1ad2      	subs	r2, r2, r3
  {
    return NVMS_DATA_NOT_FOUND;
  }

  /* Checking for immediately available space */
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 800511a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800511e:	1a5b      	subs	r3, r3, r1

  /* If the requested space is out of the compacted block size then an
     error is returned.
     NOTE: This condition SHOULD NEVER HAPPEN because the slot write operation
     makes sure to leave to leave enough space for an erase operation */
  if (sizeof(nvms_data_header_t) > (NVMS_LL_GetBlockSize() - nvm.used_size))
 8005120:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 8005124:	ebc3 0352 	rsb	r3, r3, r2, lsr #1
  if (sizeof(nvms_data_header_t) > (NVMS_LL_GetBlockSize() - nvm.used_size))
 8005128:	ebc1 0252 	rsb	r2, r1, r2, lsr #1
 800512c:	2a1f      	cmp	r2, #31
 800512e:	d92a      	bls.n	8005186 <NVMS_EraseData+0x8a>
    return NVMS_INTERNAL;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new slot instance */
  if (sizeof(nvms_data_header_t) > free)
 8005130:	2b1f      	cmp	r3, #31
 8005132:	d820      	bhi.n	8005176 <NVMS_EraseData+0x7a>
  {
    warning = true;
    err = garbage_collect();
 8005134:	f7ff fdfc 	bl	8004d30 <garbage_collect>
    if (err != NVMS_NOERROR)
 8005138:	b9d0      	cbnz	r0, 8005170 <NVMS_EraseData+0x74>
    warning = true;
 800513a:	2701      	movs	r7, #1
      return err;
    }
  }

  /* Index for the new slot */
  instance = nvm.slots[slot]->fields.instance + 1UL;
 800513c:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8005140:	e9d5 3803 	ldrd	r3, r8, [r5, #12]
 8005144:	3301      	adds	r3, #1
  oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);

  /* Writing the new instance */
  err = append_slot(slot, 0, NVMS_DATA_TYPE_DEFAULT, NULL, instance);
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	4619      	mov	r1, r3
 8005150:	4648      	mov	r0, r9
 8005152:	f7ff fe1f 	bl	8004d94 <append_slot>
  if (err != NVMS_NOERROR)
 8005156:	b958      	cbnz	r0, 8005170 <NVMS_EraseData+0x74>
    return err;
  }

  /* Adjusting the counter of the effective used size */
  nvm.slots[slot]  = NULL;
  nvm.used_size -= oldused;
 8005158:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
  nvm.slots[slot]  = NULL;
 800515c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  nvm.used_size -= oldused;
 8005160:	441d      	add	r5, r3
 8005162:	eba5 0508 	sub.w	r5, r5, r8

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 8005166:	2f00      	cmp	r7, #0
  nvm.used_size -= oldused;
 8005168:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  return warning ? NVMS_WARNING : NVMS_NOERROR;
 800516c:	bf18      	it	ne
 800516e:	2002      	movne	r0, #2
}
 8005170:	b003      	add	sp, #12
 8005172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool warning = false;
 8005176:	2700      	movs	r7, #0
 8005178:	e7e0      	b.n	800513c <NVMS_EraseData+0x40>
    return NVMS_NOTINIT;
 800517a:	2001      	movs	r0, #1
 800517c:	e7f8      	b.n	8005170 <NVMS_EraseData+0x74>
    return NVMS_SLOT_INVALID;
 800517e:	2004      	movs	r0, #4
 8005180:	e7f6      	b.n	8005170 <NVMS_EraseData+0x74>
    return NVMS_DATA_NOT_FOUND;
 8005182:	2005      	movs	r0, #5
 8005184:	e7f4      	b.n	8005170 <NVMS_EraseData+0x74>
    return NVMS_INTERNAL;
 8005186:	2008      	movs	r0, #8
 8005188:	e7f2      	b.n	8005170 <NVMS_EraseData+0x74>
 800518a:	bf00      	nop
 800518c:	20000db8 	.word	0x20000db8
 8005190:	08013000 	.word	0x08013000
 8005194:	08015000 	.word	0x08015000

08005198 <NVMS_GetDataWithType>:
  * @retval NVMS_SLOT_INVALID   if the slot number is out of range.
  * @retval NVMS_DATA_NOT_FOUND if the data does not exists.
  */
nvms_error_t NVMS_GetDataWithType(nvms_slot_t slot, size_t *size_p, nvms_data_type_t *type_p,
                                  uint8_t **data_pp)
{
 8005198:	b530      	push	{r4, r5, lr}
 800519a:	4604      	mov	r4, r0
 800519c:	4618      	mov	r0, r3
  return nvm.header != NULL;
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <NVMS_GetDataWithType+0x3c>)
  /* Check on initialization */
  if (!is_initialized())
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	b185      	cbz	r5, 80051c6 <NVMS_GetDataWithType+0x2e>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 80051a4:	2c27      	cmp	r4, #39	; 0x27
 80051a6:	d810      	bhi.n	80051ca <NVMS_GetDataWithType+0x32>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence */
  if (nvm.slots[slot] == NULL)
 80051a8:	3402      	adds	r4, #2
 80051aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80051ae:	b173      	cbz	r3, 80051ce <NVMS_GetDataWithType+0x36>
  {
    return NVMS_DATA_NOT_FOUND;
  }

  if (size_p != NULL)
 80051b0:	b109      	cbz	r1, 80051b6 <NVMS_GetDataWithType+0x1e>
  {
    *size_p = nvm.slots[slot]->fields.data_size;
 80051b2:	699c      	ldr	r4, [r3, #24]
 80051b4:	600c      	str	r4, [r1, #0]
  }

  if (type_p != NULL)
 80051b6:	b10a      	cbz	r2, 80051bc <NVMS_GetDataWithType+0x24>
  {
    *type_p = nvm.slots[slot]->fields.data_type;
 80051b8:	6959      	ldr	r1, [r3, #20]
 80051ba:	6011      	str	r1, [r2, #0]
  }

  if (data_pp != NULL)
 80051bc:	b110      	cbz	r0, 80051c4 <NVMS_GetDataWithType+0x2c>
  {
    *data_pp = nvm.slots[slot]->hdr8 + sizeof(nvms_data_header_t);
 80051be:	3320      	adds	r3, #32
 80051c0:	6003      	str	r3, [r0, #0]
  }

  return NVMS_NOERROR;
 80051c2:	2000      	movs	r0, #0
}
 80051c4:	bd30      	pop	{r4, r5, pc}
    return NVMS_NOTINIT;
 80051c6:	2001      	movs	r0, #1
 80051c8:	e7fc      	b.n	80051c4 <NVMS_GetDataWithType+0x2c>
    return NVMS_SLOT_INVALID;
 80051ca:	2004      	movs	r0, #4
 80051cc:	e7fa      	b.n	80051c4 <NVMS_GetDataWithType+0x2c>
    return NVMS_DATA_NOT_FOUND;
 80051ce:	2005      	movs	r0, #5
 80051d0:	e7f8      	b.n	80051c4 <NVMS_GetDataWithType+0x2c>
 80051d2:	bf00      	nop
 80051d4:	20000db8 	.word	0x20000db8

080051d8 <authenticate_blob_header.isra.0>:
  * @retval CKR_OK
  *         CKR_FUNCTION_FAILED
  *         CKR_SIGNATURE_INVALID
  *         @ref KMS_OpenSession returned values
  */
static CK_RV authenticate_blob_header(kms_importblob_ctx_t *pCtx,
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	b086      	sub	sp, #24
  CK_ULONG blob_hdr_add;

  (void)pCtx;

  /* Open session */
  e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 80051dc:	2300      	movs	r3, #0
 80051de:	ae02      	add	r6, sp, #8
static CK_RV authenticate_blob_header(kms_importblob_ctx_t *pCtx,
 80051e0:	4605      	mov	r5, r0
  e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 80051e2:	9600      	str	r6, [sp, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	2104      	movs	r1, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff f9cb 	bl	8004584 <KMS_OpenSession>
  if (e_ret_status == CKR_OK)
 80051ee:	4604      	mov	r4, r0
 80051f0:	b118      	cbz	r0, 80051fa <authenticate_blob_header.isra.0+0x22>
  CK_RV e_authenticate_status = CKR_SIGNATURE_INVALID;
 80051f2:	24c0      	movs	r4, #192	; 0xc0
      (void)KMS_CloseSession(session);
    }
  }

  return e_authenticate_status;
}
 80051f4:	4620      	mov	r0, r4
 80051f6:	b006      	add	sp, #24
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
    obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 80051fa:	f000 fe2c 	bl	8005e56 <KMS_PlatfObjects_GetBlobVerifyKey>
    smech.mechanism = CKM_ECDSA_SHA256;
 80051fe:	f241 0344 	movw	r3, #4164	; 0x1044
    obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 8005202:	4602      	mov	r2, r0
    if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005204:	a903      	add	r1, sp, #12
 8005206:	9802      	ldr	r0, [sp, #8]
    smech.mechanism = CKM_ECDSA_SHA256;
 8005208:	9303      	str	r3, [sp, #12]
    smech.ulParameterLen = 0;
 800520a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 800520e:	f000 ff7b 	bl	8006108 <KMS_VerifyInit>
 8005212:	bb58      	cbnz	r0, 800526c <authenticate_blob_header.isra.0+0x94>
      if (KMS_Verify(session,
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	9802      	ldr	r0, [sp, #8]
 800521a:	f105 0380 	add.w	r3, r5, #128	; 0x80
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	4629      	mov	r1, r5
 8005222:	f000 ff91 	bl	8006148 <KMS_Verify>
        e_ret_status = CKR_SIGNATURE_INVALID;
 8005226:	1e04      	subs	r4, r0, #0
 8005228:	bf18      	it	ne
 800522a:	24c0      	movne	r4, #192	; 0xc0
    (void)KMS_CloseSession(session);
 800522c:	9802      	ldr	r0, [sp, #8]
 800522e:	f7ff f9ef 	bl	8004610 <KMS_CloseSession>
  if (e_ret_status == CKR_OK)
 8005232:	2c00      	cmp	r4, #0
 8005234:	d1dd      	bne.n	80051f2 <authenticate_blob_header.isra.0+0x1a>
    e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 8005236:	9600      	str	r6, [sp, #0]
 8005238:	4623      	mov	r3, r4
 800523a:	4622      	mov	r2, r4
 800523c:	2104      	movs	r1, #4
 800523e:	4620      	mov	r0, r4
 8005240:	f7ff f9a0 	bl	8004584 <KMS_OpenSession>
    if (e_ret_status == CKR_OK)
 8005244:	2800      	cmp	r0, #0
 8005246:	d1d4      	bne.n	80051f2 <authenticate_blob_header.isra.0+0x1a>
      obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 8005248:	f000 fe05 	bl	8005e56 <KMS_PlatfObjects_GetBlobVerifyKey>
      smech.mechanism = CKM_ECDSA_SHA256;
 800524c:	f241 0344 	movw	r3, #4164	; 0x1044
      obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 8005250:	4602      	mov	r2, r0
      if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005252:	a903      	add	r1, sp, #12
 8005254:	9802      	ldr	r0, [sp, #8]
      smech.mechanism = CKM_ECDSA_SHA256;
 8005256:	9303      	str	r3, [sp, #12]
      smech.ulParameterLen = 0;
 8005258:	e9cd 4404 	strd	r4, r4, [sp, #16]
      if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 800525c:	f000 ff54 	bl	8006108 <KMS_VerifyInit>
 8005260:	b130      	cbz	r0, 8005270 <authenticate_blob_header.isra.0+0x98>
  CK_RV e_authenticate_status = CKR_SIGNATURE_INVALID;
 8005262:	24c0      	movs	r4, #192	; 0xc0
      (void)KMS_CloseSession(session);
 8005264:	9802      	ldr	r0, [sp, #8]
 8005266:	f7ff f9d3 	bl	8004610 <KMS_CloseSession>
  return e_authenticate_status;
 800526a:	e7c3      	b.n	80051f4 <authenticate_blob_header.isra.0+0x1c>
      e_ret_status = CKR_FUNCTION_FAILED;
 800526c:	2406      	movs	r4, #6
 800526e:	e7dd      	b.n	800522c <authenticate_blob_header.isra.0+0x54>
        if (KMS_Verify(session,
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	9802      	ldr	r0, [sp, #8]
 8005276:	f105 0380 	add.w	r3, r5, #128	; 0x80
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	4629      	mov	r1, r5
 800527e:	f000 ff63 	bl	8006148 <KMS_Verify>
 8005282:	4604      	mov	r4, r0
 8005284:	2800      	cmp	r0, #0
 8005286:	d1ec      	bne.n	8005262 <authenticate_blob_header.isra.0+0x8a>
 8005288:	e7ec      	b.n	8005264 <authenticate_blob_header.isra.0+0x8c>

0800528a <read_next_chunk>:
                       uint32_t session,
                       uint8_t *p_source_address,
                       uint32_t size,
                       uint8_t *p_decrypted_chunk,
                       uint32_t *p_decrypted_size)
{
 800528a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CK_RV        e_ret_status;

  /* Read */
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 800528c:	f500 7400 	add.w	r4, r0, #512	; 0x200
{
 8005290:	460e      	mov	r6, r1
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 8005292:	4620      	mov	r0, r4
{
 8005294:	4611      	mov	r1, r2
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 8005296:	461a      	mov	r2, r3
{
 8005298:	461d      	mov	r5, r3
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 800529a:	f7fb fb0d 	bl	80008b8 <KMS_LL_FLASH_Read>

  if (e_ret_status == CKR_OK)
 800529e:	b938      	cbnz	r0, 80052b0 <read_next_chunk+0x26>
  {
    e_ret_status = KMS_DecryptUpdate(session,
 80052a0:	ab07      	add	r3, sp, #28
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	462a      	mov	r2, r5
 80052a6:	9b06      	ldr	r3, [sp, #24]
 80052a8:	4621      	mov	r1, r4
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7fe fb44 	bl	8003938 <KMS_DecryptUpdate>
                                     (CK_BYTE *)p_decrypted_chunk,
                                     (CK_ULONG_PTR)(uint32_t)&p_decrypted_size);
  }

  return e_ret_status;
}
 80052b0:	b002      	add	sp, #8
 80052b2:	bd70      	pop	{r4, r5, r6, pc}

080052b4 <KMS_Objects_GetRange>:
  * @brief  This function returns object range identification from key handle
  * @param  hKey key handle
  * @retval Value within @ref kms_obj_range_t
  */
kms_obj_range_t  KMS_Objects_GetRange(CK_OBJECT_HANDLE hKey)
{
 80052b4:	b513      	push	{r0, r1, r4, lr}
 80052b6:	4604      	mov	r4, r0
  uint32_t MinSlot;
  uint32_t MaxSlot;

  /* Read the available static slots from the platform */
  KMS_PlatfObjects_EmbeddedRange(&MinSlot, &MaxSlot);
 80052b8:	a901      	add	r1, sp, #4
 80052ba:	4668      	mov	r0, sp
 80052bc:	f000 fd38 	bl	8005d30 <KMS_PlatfObjects_EmbeddedRange>
  /* If hKey is in the range of the embedded keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d302      	bcc.n	80052cc <KMS_Objects_GetRange+0x18>
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d917      	bls.n	80052fc <KMS_Objects_GetRange+0x48>
    return (KMS_OBJECT_RANGE_EMBEDDED);
  }

#ifdef KMS_NVM_ENABLED
  /* Read the available nvm slots from the platform */
  KMS_PlatfObjects_NvmStaticRange(&MinSlot, &MaxSlot);
 80052cc:	a901      	add	r1, sp, #4
 80052ce:	4668      	mov	r0, sp
 80052d0:	f000 fd3c 	bl	8005d4c <KMS_PlatfObjects_NvmStaticRange>
  /* If hKey is in the range of nvm keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80052d4:	9b01      	ldr	r3, [sp, #4]
 80052d6:	42a3      	cmp	r3, r4
 80052d8:	d302      	bcc.n	80052e0 <KMS_Objects_GetRange+0x2c>
 80052da:	9b00      	ldr	r3, [sp, #0]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d90f      	bls.n	8005300 <KMS_Objects_GetRange+0x4c>
    return (KMS_OBJECT_RANGE_NVM_STATIC_ID);
  }

#ifdef KMS_NVM_DYNAMIC_ENABLED
  /* Read the available nvm slots from the platform */
  KMS_PlatfObjects_NvmDynamicRange(&MinSlot, &MaxSlot);
 80052e0:	a901      	add	r1, sp, #4
 80052e2:	4668      	mov	r0, sp
 80052e4:	f000 fd40 	bl	8005d68 <KMS_PlatfObjects_NvmDynamicRange>
  /* If hKey is in the range of nvm keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80052e8:	9b01      	ldr	r3, [sp, #4]
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	d30a      	bcc.n	8005304 <KMS_Objects_GetRange+0x50>
  {
    return (KMS_OBJECT_RANGE_NVM_DYNAMIC_ID);
 80052ee:	9800      	ldr	r0, [sp, #0]
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	bf8c      	ite	hi
 80052f4:	2006      	movhi	r0, #6
 80052f6:	2002      	movls	r0, #2
  }
#endif  /* KMS_EXT_TOKEN_ENABLED */

  /* hKey not in known ranges */
  return KMS_OBJECT_RANGE_UNKNOWN;
}
 80052f8:	b002      	add	sp, #8
 80052fa:	bd10      	pop	{r4, pc}
    return (KMS_OBJECT_RANGE_EMBEDDED);
 80052fc:	2000      	movs	r0, #0
 80052fe:	e7fb      	b.n	80052f8 <KMS_Objects_GetRange+0x44>
    return (KMS_OBJECT_RANGE_NVM_STATIC_ID);
 8005300:	2001      	movs	r0, #1
 8005302:	e7f9      	b.n	80052f8 <KMS_Objects_GetRange+0x44>
  return KMS_OBJECT_RANGE_UNKNOWN;
 8005304:	2006      	movs	r0, #6
 8005306:	e7f7      	b.n	80052f8 <KMS_Objects_GetRange+0x44>

08005308 <KMS_LockKeyHandle>:
#if defined(KMS_SE_LOCK_KEYS)
  CK_RV e_ret_status = CKR_CANT_LOCK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <KMS_LockKeyHandle+0x38>)
{
 800530a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530c:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <KMS_LockKeyHandle+0x3c>)
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800530e:	6813      	ldr	r3, [r2, #0]
{
 8005310:	4601      	mov	r1, r0
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005312:	2400      	movs	r4, #0
  CK_RV e_ret_status = CKR_CANT_LOCK;
 8005314:	200a      	movs	r0, #10
 8005316:	462e      	mov	r6, r5
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005318:	42a3      	cmp	r3, r4
 800531a:	d10a      	bne.n	8005332 <KMS_LockKeyHandle+0x2a>
    if (kms_locked_key_handles[lock_table_index] == hKey)
    {
      e_ret_status = CKR_OK;
    }
  }
  if (e_ret_status != CKR_OK)
 800531c:	b140      	cbz	r0, 8005330 <KMS_LockKeyHandle+0x28>
  {
    /* hKey is not already locked,try to lock it */
    /* if the table is full, then return */
    if (kms_locked_key_index >= KMS_SE_LOCK_KEYS_MAX)
 800531e:	2b0a      	cmp	r3, #10
    {
      e_ret_status = CKR_CANT_LOCK;
    }
    else
    {
      kms_locked_key_handles[lock_table_index] = hKey;
 8005320:	bf1f      	itttt	ne
 8005322:	f846 1023 	strne.w	r1, [r6, r3, lsl #2]
      kms_locked_key_index++;
 8005326:	3301      	addne	r3, #1
 8005328:	6013      	strne	r3, [r2, #0]
      e_ret_status = CKR_OK;
 800532a:	2000      	movne	r0, #0
      e_ret_status = CKR_CANT_LOCK;
 800532c:	bf08      	it	eq
 800532e:	4618      	moveq	r0, r3

  return e_ret_status;
#else /* KMS_SE_LOCK_KEYS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_KEYS */
}
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (kms_locked_key_handles[lock_table_index] == hKey)
 8005332:	f855 7b04 	ldr.w	r7, [r5], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005336:	3401      	adds	r4, #1
      e_ret_status = CKR_OK;
 8005338:	428f      	cmp	r7, r1
 800533a:	bf08      	it	eq
 800533c:	2000      	moveq	r0, #0
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800533e:	e7eb      	b.n	8005318 <KMS_LockKeyHandle+0x10>
 8005340:	20000e9c 	.word	0x20000e9c
 8005344:	20000e74 	.word	0x20000e74

08005348 <KMS_CheckKeyIsNotLocked>:
#if defined(KMS_SE_LOCK_KEYS)
  CK_RV e_ret_status = CKR_OK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <KMS_CheckKeyIsNotLocked+0x24>)
 800534a:	4909      	ldr	r1, [pc, #36]	; (8005370 <KMS_CheckKeyIsNotLocked+0x28>)
{
 800534c:	b530      	push	{r4, r5, lr}
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800534e:	681c      	ldr	r4, [r3, #0]
 8005350:	2300      	movs	r3, #0
{
 8005352:	4602      	mov	r2, r0
  CK_RV e_ret_status = CKR_OK;
 8005354:	4618      	mov	r0, r3
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005356:	429c      	cmp	r4, r3
 8005358:	d100      	bne.n	800535c <KMS_CheckKeyIsNotLocked+0x14>
  }
  return e_ret_status;
#else /* KMS_SE_LOCK_KEYS */
  return CKR_OK;
#endif /* KMS_SE_LOCK_KEYS */
}
 800535a:	bd30      	pop	{r4, r5, pc}
    if (kms_locked_key_handles[lock_table_index] == hKey)
 800535c:	f851 5b04 	ldr.w	r5, [r1], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005360:	3301      	adds	r3, #1
      e_ret_status = CKR_KEY_HANDLE_INVALID;
 8005362:	4295      	cmp	r5, r2
 8005364:	bf08      	it	eq
 8005366:	2060      	moveq	r0, #96	; 0x60
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005368:	e7f5      	b.n	8005356 <KMS_CheckKeyIsNotLocked+0xe>
 800536a:	bf00      	nop
 800536c:	20000e9c 	.word	0x20000e9c
 8005370:	20000e74 	.word	0x20000e74

08005374 <KMS_Objects_GetPointer>:
{
 8005374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005376:	4605      	mov	r5, r0
  if (KMS_CheckKeyIsNotLocked(hKey) == CKR_OK)
 8005378:	f7ff ffe6 	bl	8005348 <KMS_CheckKeyIsNotLocked>
 800537c:	4604      	mov	r4, r0
 800537e:	bb90      	cbnz	r0, 80053e6 <KMS_Objects_GetPointer+0x72>
    KMS_PlatfObjects_EmbeddedRange(&min_slot, &max_slot);
 8005380:	a901      	add	r1, sp, #4
 8005382:	4668      	mov	r0, sp
 8005384:	f000 fcd4 	bl	8005d30 <KMS_PlatfObjects_EmbeddedRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	42ab      	cmp	r3, r5
 800538c:	d306      	bcc.n	800539c <KMS_Objects_GetPointer+0x28>
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	42ab      	cmp	r3, r5
 8005392:	d803      	bhi.n	800539c <KMS_Objects_GetPointer+0x28>
      p_object = KMS_PlatfObjects_EmbeddedObject(hKey);
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fcd1 	bl	8005d3c <KMS_PlatfObjects_EmbeddedObject>
 800539a:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmStaticRange(&min_slot, &max_slot);
 800539c:	a901      	add	r1, sp, #4
 800539e:	4668      	mov	r0, sp
 80053a0:	f000 fcd4 	bl	8005d4c <KMS_PlatfObjects_NvmStaticRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	42ab      	cmp	r3, r5
 80053a8:	d306      	bcc.n	80053b8 <KMS_Objects_GetPointer+0x44>
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	d803      	bhi.n	80053b8 <KMS_Objects_GetPointer+0x44>
      p_object = KMS_PlatfObjects_NvmStaticObject(hKey);
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 fcd1 	bl	8005d58 <KMS_PlatfObjects_NvmStaticObject>
 80053b6:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmDynamicRange(&min_slot, &max_slot);
 80053b8:	a901      	add	r1, sp, #4
 80053ba:	4668      	mov	r0, sp
 80053bc:	f000 fcd4 	bl	8005d68 <KMS_PlatfObjects_NvmDynamicRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 80053c0:	9b01      	ldr	r3, [sp, #4]
 80053c2:	42ab      	cmp	r3, r5
 80053c4:	d306      	bcc.n	80053d4 <KMS_Objects_GetPointer+0x60>
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	d803      	bhi.n	80053d4 <KMS_Objects_GetPointer+0x60>
      p_object = KMS_PlatfObjects_NvmDynamicObject(hKey);
 80053cc:	4628      	mov	r0, r5
 80053ce:	f000 fcd1 	bl	8005d74 <KMS_PlatfObjects_NvmDynamicObject>
 80053d2:	4604      	mov	r4, r0
  if (KMS_CheckKeyIsNotLocked(hKey) == CKR_OK)
 80053d4:	4628      	mov	r0, r5
 80053d6:	f7ff ffb7 	bl	8005348 <KMS_CheckKeyIsNotLocked>
    return NULL;
 80053da:	2800      	cmp	r0, #0
}
 80053dc:	bf0c      	ite	eq
 80053de:	4620      	moveq	r0, r4
 80053e0:	2000      	movne	r0, #0
 80053e2:	b003      	add	sp, #12
 80053e4:	bd30      	pop	{r4, r5, pc}
  kms_obj_keyhead_t *p_object = NULL;
 80053e6:	2400      	movs	r4, #0
 80053e8:	e7f4      	b.n	80053d4 <KMS_Objects_GetPointer+0x60>
	...

080053ec <KMS_LockServiceFctId>:
#if defined(KMS_SE_LOCK_SERVICES)
  CK_RV e_ret_status = CKR_CANT_LOCK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80053ec:	4a0d      	ldr	r2, [pc, #52]	; (8005424 <KMS_LockServiceFctId+0x38>)
{
 80053ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f0:	4d0d      	ldr	r5, [pc, #52]	; (8005428 <KMS_LockServiceFctId+0x3c>)
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80053f2:	6813      	ldr	r3, [r2, #0]
{
 80053f4:	4601      	mov	r1, r0
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80053f6:	2400      	movs	r4, #0
  CK_RV e_ret_status = CKR_CANT_LOCK;
 80053f8:	200a      	movs	r0, #10
 80053fa:	462e      	mov	r6, r5
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d10a      	bne.n	8005416 <KMS_LockServiceFctId+0x2a>
    if (kms_locked_function_id[lock_table_index] == fctId)
    {
      e_ret_status = CKR_OK;
    }
  }
  if (e_ret_status != CKR_OK)
 8005400:	b140      	cbz	r0, 8005414 <KMS_LockServiceFctId+0x28>
  {
    /* Service is not already locked,try to lock it */
    /* if the table is full, then return */
    if (kms_locked_function_id_index >= KMS_SE_LOCK_SERVICES_MAX)
 8005402:	2b02      	cmp	r3, #2
    {
      e_ret_status = CKR_CANT_LOCK;
    }
    else
    {
      kms_locked_function_id[lock_table_index] = fctId;
 8005404:	bf1f      	itttt	ne
 8005406:	f846 1023 	strne.w	r1, [r6, r3, lsl #2]
      kms_locked_function_id_index++;
 800540a:	3301      	addne	r3, #1
 800540c:	6013      	strne	r3, [r2, #0]
      e_ret_status = CKR_OK;
 800540e:	2000      	movne	r0, #0
      e_ret_status = CKR_CANT_LOCK;
 8005410:	bf08      	it	eq
 8005412:	200a      	moveq	r0, #10

  return e_ret_status;
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_SERVICES */
}
 8005414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (kms_locked_function_id[lock_table_index] == fctId)
 8005416:	f855 7b04 	ldr.w	r7, [r5], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800541a:	3401      	adds	r4, #1
      e_ret_status = CKR_OK;
 800541c:	428f      	cmp	r7, r1
 800541e:	bf08      	it	eq
 8005420:	2000      	moveq	r0, #0
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005422:	e7eb      	b.n	80053fc <KMS_LockServiceFctId+0x10>
 8005424:	20000e70 	.word	0x20000e70
 8005428:	20000e68 	.word	0x20000e68

0800542c <KMS_CheckServiceFctIdIsNotLocked>:
#if defined(KMS_SE_LOCK_SERVICES)
  CK_RV e_ret_status = CKR_OK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <KMS_CheckServiceFctIdIsNotLocked+0x24>)
 800542e:	4909      	ldr	r1, [pc, #36]	; (8005454 <KMS_CheckServiceFctIdIsNotLocked+0x28>)
{
 8005430:	b530      	push	{r4, r5, lr}
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005432:	681c      	ldr	r4, [r3, #0]
 8005434:	2300      	movs	r3, #0
{
 8005436:	4602      	mov	r2, r0
  CK_RV e_ret_status = CKR_OK;
 8005438:	4618      	mov	r0, r3
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800543a:	429c      	cmp	r4, r3
 800543c:	d100      	bne.n	8005440 <KMS_CheckServiceFctIdIsNotLocked+0x14>
  }
  return e_ret_status;
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_OK;
#endif /* KMS_SE_LOCK_SERVICES */
}
 800543e:	bd30      	pop	{r4, r5, pc}
    if (kms_locked_function_id[lock_table_index] == fctId)
 8005440:	f851 5b04 	ldr.w	r5, [r1], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005444:	3301      	adds	r3, #1
      e_ret_status = CKR_ACTION_PROHIBITED;
 8005446:	4295      	cmp	r5, r2
 8005448:	bf08      	it	eq
 800544a:	201b      	moveq	r0, #27
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800544c:	e7f5      	b.n	800543a <KMS_CheckServiceFctIdIsNotLocked+0xe>
 800544e:	bf00      	nop
 8005450:	20000e70 	.word	0x20000e70
 8005454:	20000e68 	.word	0x20000e68

08005458 <KMS_FindAttributeInTemplate>:
  *         CKR_ARGUMENTS_BAD
  *         CKR_GENERAL_ERROR
  */
CK_RV KMS_FindAttributeInTemplate(CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount, CK_ATTRIBUTE_TYPE type,
                                  CK_ATTRIBUTE_PTR *ppAttr)
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
  if ((pTemplate == NULL_PTR) || (ulCount == 0UL) || (ppAttr == NULL_PTR))
 800545a:	b188      	cbz	r0, 8005480 <KMS_FindAttributeInTemplate+0x28>
 800545c:	b181      	cbz	r1, 8005480 <KMS_FindAttributeInTemplate+0x28>
 800545e:	b17b      	cbz	r3, 8005480 <KMS_FindAttributeInTemplate+0x28>
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  else
  {
    /* Search within template attributes the given attribute type */
    for (uint32_t i = 0; i < ulCount; i++)
 8005460:	2400      	movs	r4, #0
 8005462:	260c      	movs	r6, #12
    {
      if (pTemplate[i].type == type)
 8005464:	fb06 f504 	mul.w	r5, r6, r4
 8005468:	1947      	adds	r7, r0, r5
 800546a:	5945      	ldr	r5, [r0, r5]
 800546c:	4295      	cmp	r5, r2
 800546e:	d102      	bne.n	8005476 <KMS_FindAttributeInTemplate+0x1e>
      {
        *ppAttr = &(pTemplate[i]);
 8005470:	601f      	str	r7, [r3, #0]
        e_ret_status = CKR_OK;
 8005472:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return e_ret_status;
}
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t i = 0; i < ulCount; i++)
 8005476:	3401      	adds	r4, #1
 8005478:	42a1      	cmp	r1, r4
 800547a:	d1f3      	bne.n	8005464 <KMS_FindAttributeInTemplate+0xc>
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
 800547c:	2005      	movs	r0, #5
 800547e:	e7f9      	b.n	8005474 <KMS_FindAttributeInTemplate+0x1c>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8005480:	2007      	movs	r0, #7
  return e_ret_status;
 8005482:	e7f7      	b.n	8005474 <KMS_FindAttributeInTemplate+0x1c>

08005484 <KMS_Objects_SearchAttributes>:
  * @param  pAttribute found attribute
  * @retval CKR_OK if attribute is found
  *         CKR_ATTRIBUTE_TYPE_INVALID otherwise
  */
CK_RV KMS_Objects_SearchAttributes(uint32_t SearchedId, kms_obj_keyhead_t *pKmsKeyHead, kms_attr_t **pAttribute)
{
 8005484:	b530      	push	{r4, r5, lr}
  uint8_t  *pkms_blob;
  uint32_t blob_index;
  uint32_t current_attribute_size;

  /* The blob containing the attributes is described by the kms_obj_keyhead_t */
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 8005486:	68cd      	ldr	r5, [r1, #12]
  kms_attr_t *pkms_blob_current = (kms_attr_t *)(uint32_t)(pKmsKeyHead->blobs);
 8005488:	f101 0414 	add.w	r4, r1, #20
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 800548c:	2100      	movs	r1, #0
 800548e:	428d      	cmp	r5, r1
 8005490:	d101      	bne.n	8005496 <KMS_Objects_SearchAttributes+0x12>
  CK_RV e_ret_status = CKR_ATTRIBUTE_TYPE_INVALID;
 8005492:	2012      	movs	r0, #18
    pkms_blob = &((uint8_t *)pkms_blob_current)[4UL + 4UL + current_attribute_size];

    /* Point to the next Attribute */
    pkms_blob_current = (kms_attr_t *)(uint32_t)pkms_blob;
  }
  return e_ret_status;
 8005494:	e004      	b.n	80054a0 <KMS_Objects_SearchAttributes+0x1c>
    if (pkms_blob_current->id == SearchedId)
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4283      	cmp	r3, r0
 800549a:	d102      	bne.n	80054a2 <KMS_Objects_SearchAttributes+0x1e>
      *pAttribute = pkms_blob_current;
 800549c:	6014      	str	r4, [r2, #0]
      e_ret_status = CKR_OK;
 800549e:	2000      	movs	r0, #0
}
 80054a0:	bd30      	pop	{r4, r5, pc}
    current_attribute_size = pkms_blob_current->size ;
 80054a2:	6863      	ldr	r3, [r4, #4]
    if ((current_attribute_size % 4UL) != 0UL)
 80054a4:	f013 0f03 	tst.w	r3, #3
      current_attribute_size += 4UL - (current_attribute_size % 4UL);
 80054a8:	bf1c      	itt	ne
 80054aa:	f023 0303 	bicne.w	r3, r3, #3
 80054ae:	3304      	addne	r3, #4
    pkms_blob = &((uint8_t *)pkms_blob_current)[4UL + 4UL + current_attribute_size];
 80054b0:	3308      	adds	r3, #8
 80054b2:	441c      	add	r4, r3
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 80054b4:	3101      	adds	r1, #1
 80054b6:	e7ea      	b.n	800548e <KMS_Objects_SearchAttributes+0xa>

080054b8 <KMS_FindObjectsFromTemplate>:
{
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *p_working_obj_count = 0;
 80054bc:	2600      	movs	r6, #0
{
 80054be:	b08b      	sub	sp, #44	; 0x2c
  *p_working_obj_count = 0;
 80054c0:	601e      	str	r6, [r3, #0]
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80054c2:	a804      	add	r0, sp, #16
{
 80054c4:	4688      	mov	r8, r1
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80054c6:	a905      	add	r1, sp, #20
{
 80054c8:	9201      	str	r2, [sp, #4]
 80054ca:	461d      	mov	r5, r3
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80054cc:	f000 fc30 	bl	8005d30 <KMS_PlatfObjects_EmbeddedRange>
  KMS_PlatfObjects_NvmStaticRange(&h_nvms_obj_min, &h_nvms_obj_max);
 80054d0:	a907      	add	r1, sp, #28
 80054d2:	a806      	add	r0, sp, #24
 80054d4:	f000 fc3a 	bl	8005d4c <KMS_PlatfObjects_NvmStaticRange>
  KMS_PlatfObjects_NvmDynamicRange(&h_nvmd_obj_min, &h_nvmd_obj_max);
 80054d8:	a909      	add	r1, sp, #36	; 0x24
 80054da:	a808      	add	r0, sp, #32
 80054dc:	f000 fc44 	bl	8005d68 <KMS_PlatfObjects_NvmDynamicRange>
  h_object = h_emb_obj_min;
 80054e0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80054e4:	230c      	movs	r3, #12
 80054e6:	fb03 1302 	mla	r3, r3, r2, r1
 80054ea:	9c04      	ldr	r4, [sp, #16]
  while ((*p_working_obj_count < ulMaxCount)
 80054ec:	9300      	str	r3, [sp, #0]
  CK_RV e_ret_status = CKR_OK;
 80054ee:	46b2      	mov	sl, r6
  while ((*p_working_obj_count < ulMaxCount)
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	9a01      	ldr	r2, [sp, #4]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d203      	bcs.n	8005500 <KMS_FindObjectsFromTemplate+0x48>
         && (h_object != KMS_HANDLE_KEY_NOT_KNOWN)
 80054f8:	b114      	cbz	r4, 8005500 <KMS_FindObjectsFromTemplate+0x48>
         && (e_ret_status == CKR_OK))
 80054fa:	f1ba 0f00 	cmp.w	sl, #0
 80054fe:	d003      	beq.n	8005508 <KMS_FindObjectsFromTemplate+0x50>
}
 8005500:	2000      	movs	r0, #0
 8005502:	b00b      	add	sp, #44	; 0x2c
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_pkms_object = KMS_Objects_GetPointer(h_object);
 8005508:	4620      	mov	r0, r4
 800550a:	f7ff ff33 	bl	8005374 <KMS_Objects_GetPointer>
    if ((p_pkms_object != NULL) && (e_ret_status == CKR_OK))
 800550e:	4681      	mov	r9, r0
 8005510:	b318      	cbz	r0, 800555a <KMS_FindObjectsFromTemplate+0xa2>
      if (ulCount > 0UL)
 8005512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005514:	b1db      	cbz	r3, 800554e <KMS_FindObjectsFromTemplate+0x96>
 8005516:	9f14      	ldr	r7, [sp, #80]	; 0x50
        ul_attributes_found_count = 0;
 8005518:	46d3      	mov	fp, sl
 800551a:	e012      	b.n	8005542 <KMS_FindObjectsFromTemplate+0x8a>
          if (KMS_Objects_SearchAttributes(pTemplate[template_index].type, p_pkms_object, &p_attribute) == CKR_OK)
 800551c:	6838      	ldr	r0, [r7, #0]
 800551e:	aa03      	add	r2, sp, #12
 8005520:	4649      	mov	r1, r9
 8005522:	f7ff ffaf 	bl	8005484 <KMS_Objects_SearchAttributes>
 8005526:	b958      	cbnz	r0, 8005540 <KMS_FindObjectsFromTemplate+0x88>
            if ((p_attribute->size == pTemplate[template_index].ulValueLen)
 8005528:	9803      	ldr	r0, [sp, #12]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	6842      	ldr	r2, [r0, #4]
 800552e:	428a      	cmp	r2, r1
 8005530:	d106      	bne.n	8005540 <KMS_FindObjectsFromTemplate+0x88>
                && (memcmp(p_attribute->data, pTemplate[template_index].pValue, p_attribute->size) == 0))
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	3008      	adds	r0, #8
 8005536:	f001 faad 	bl	8006a94 <memcmp>
 800553a:	b908      	cbnz	r0, 8005540 <KMS_FindObjectsFromTemplate+0x88>
              ul_attributes_found_count++;
 800553c:	f10b 0b01 	add.w	fp, fp, #1
        for (template_index = 0; template_index < ulCount; template_index++)
 8005540:	370c      	adds	r7, #12
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	429f      	cmp	r7, r3
 8005546:	d1e9      	bne.n	800551c <KMS_FindObjectsFromTemplate+0x64>
        if (ul_attributes_found_count == ulCount)
 8005548:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800554a:	459b      	cmp	fp, r3
 800554c:	d105      	bne.n	800555a <KMS_FindObjectsFromTemplate+0xa2>
        phObject[*p_working_obj_count] = h_object;
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
        *p_working_obj_count = *p_working_obj_count + 1;
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	602b      	str	r3, [r5, #0]
    switch (state)
 800555a:	2e01      	cmp	r6, #1
    h_object++;
 800555c:	f104 0401 	add.w	r4, r4, #1
    switch (state)
 8005560:	d008      	beq.n	8005574 <KMS_FindObjectsFromTemplate+0xbc>
 8005562:	2e02      	cmp	r6, #2
 8005564:	d00c      	beq.n	8005580 <KMS_FindObjectsFromTemplate+0xc8>
 8005566:	b986      	cbnz	r6, 800558a <KMS_FindObjectsFromTemplate+0xd2>
        if (h_object > h_emb_obj_max)
 8005568:	9b05      	ldr	r3, [sp, #20]
 800556a:	42a3      	cmp	r3, r4
 800556c:	d2c0      	bcs.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>
          h_object = h_nvms_obj_min;
 800556e:	9c06      	ldr	r4, [sp, #24]
          state = KMS_OBJECT_RANGE_NVM_STATIC_ID;
 8005570:	2601      	movs	r6, #1
 8005572:	e7bd      	b.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>
        if (h_object > h_nvms_obj_max)
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	42a3      	cmp	r3, r4
 8005578:	d2ba      	bcs.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>
          h_object = h_nvmd_obj_min;
 800557a:	9c08      	ldr	r4, [sp, #32]
          state = KMS_OBJECT_RANGE_NVM_DYNAMIC_ID;
 800557c:	2602      	movs	r6, #2
 800557e:	e7b7      	b.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>
          h_object = KMS_HANDLE_KEY_NOT_KNOWN;
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	42a3      	cmp	r3, r4
 8005584:	bf38      	it	cc
 8005586:	2400      	movcc	r4, #0
 8005588:	e7b2      	b.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>
    switch (state)
 800558a:	f04f 0a05 	mov.w	sl, #5
 800558e:	e7af      	b.n	80054f0 <KMS_FindObjectsFromTemplate+0x38>

08005590 <KMS_Objects_u8ptr_2_BlobU32>:
  * @param  u8Size u8 buffer size (in bytes)
  * @param  pU32 translated buffer
  * @retval None
  */
void KMS_Objects_u8ptr_2_BlobU32(uint8_t *pU8, uint32_t u8Size, uint32_t *pU32)
{
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t index;
  uint32_t reste = u8Size & 0x3UL;
 8005592:	f001 0603 	and.w	r6, r1, #3
  for (index = 0; index < ((u8Size) / 4UL); index++)
 8005596:	4604      	mov	r4, r0
 8005598:	0889      	lsrs	r1, r1, #2
 800559a:	2500      	movs	r5, #0
 800559c:	42a9      	cmp	r1, r5
 800559e:	f104 0404 	add.w	r4, r4, #4
 80055a2:	d107      	bne.n	80055b4 <KMS_Objects_u8ptr_2_BlobU32+0x24>
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
                  ((uint32_t)pU8[(index * 4UL) + 3UL]);
  }
  if (reste != 0UL)     /* check that we have a multiple of 4 bytes */
 80055a4:	b12e      	cbz	r6, 80055b2 <KMS_Objects_u8ptr_2_BlobU32+0x22>
  {
    if (reste == 1UL)
 80055a6:	2e01      	cmp	r6, #1
 80055a8:	d116      	bne.n	80055d8 <KMS_Objects_u8ptr_2_BlobU32+0x48>
    {
      /* One byte remains, convention is as follow:
       *         u8[]  = {0x01}
       *         u32[] = {0x00000001} */
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL]);
 80055aa:	f810 3021 	ldrb.w	r3, [r0, r1, lsl #2]
    if (reste == 3UL)
    {
      /* Three bytes remains, convention is as follow:
       *         u8[]  = {0x01, 0x02, 0x03}
       *         u32[] = {0x00010203} */
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 16) + \
 80055ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
                    ((uint32_t)pU8[(index * 4UL) + 2UL]);
    }
  }
}
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
 80055b4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
 80055b8:	f814 7c04 	ldrb.w	r7, [r4, #-4]
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
 80055bc:	041b      	lsls	r3, r3, #16
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
 80055be:	eb03 6307 	add.w	r3, r3, r7, lsl #24
                  ((uint32_t)pU8[(index * 4UL) + 3UL]);
 80055c2:	f814 7c01 	ldrb.w	r7, [r4, #-1]
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
 80055c6:	443b      	add	r3, r7
 80055c8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80055cc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
 80055d0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
  for (index = 0; index < ((u8Size) / 4UL); index++)
 80055d4:	3501      	adds	r5, #1
 80055d6:	e7e1      	b.n	800559c <KMS_Objects_u8ptr_2_BlobU32+0xc>
    if (reste == 2UL)
 80055d8:	008c      	lsls	r4, r1, #2
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 8) + \
 80055da:	f810 5021 	ldrb.w	r5, [r0, r1, lsl #2]
                    ((uint32_t)pU8[(index * 4UL) + 1UL]);
 80055de:	4420      	add	r0, r4
    if (reste == 2UL)
 80055e0:	2e02      	cmp	r6, #2
                    ((uint32_t)pU8[(index * 4UL) + 2UL]);
 80055e2:	bf17      	itett	ne
 80055e4:	7883      	ldrbne	r3, [r0, #2]
                    ((uint32_t)pU8[(index * 4UL) + 1UL]);
 80055e6:	7843      	ldrbeq	r3, [r0, #1]
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
 80055e8:	7840      	ldrbne	r0, [r0, #1]
 80055ea:	eb03 4305 	addne.w	r3, r3, r5, lsl #16
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 8) + \
 80055ee:	bf0c      	ite	eq
 80055f0:	eb03 2305 	addeq.w	r3, r3, r5, lsl #8
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
 80055f4:	eb03 2300 	addne.w	r3, r3, r0, lsl #8
 80055f8:	e7d9      	b.n	80055ae <KMS_Objects_u8ptr_2_BlobU32+0x1e>

080055fa <KMS_Objects_BlobU32_2_u8ptr>:
  * @param  u32Size u32 buffer size
  * @param  pU8 translated buffer
  * @retval None
  */
void  KMS_Objects_BlobU32_2_u8ptr(uint32_t *pU32, uint32_t u32Size, uint8_t *pU8)
{
 80055fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t index_key;
  uint32_t reste = u32Size & 0x3UL;

  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 80055fc:	088b      	lsrs	r3, r1, #2
  uint32_t reste = u32Size & 0x3UL;
 80055fe:	f001 0603 	and.w	r6, r1, #3
  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 8005602:	f021 0103 	bic.w	r1, r1, #3
 8005606:	4604      	mov	r4, r0
 8005608:	4615      	mov	r5, r2
 800560a:	eb00 0c01 	add.w	ip, r0, r1
 800560e:	4564      	cmp	r4, ip
 8005610:	f105 0504 	add.w	r5, r5, #4
 8005614:	d107      	bne.n	8005626 <KMS_Objects_BlobU32_2_u8ptr+0x2c>
    pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 16);
    pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key] >> 8);
    pU8[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pU32[index_key]);
  }

  if (reste != 0UL)     /* check that we have a multiple of 4 bytes */
 8005616:	b12e      	cbz	r6, 8005624 <KMS_Objects_BlobU32_2_u8ptr+0x2a>
  {
    if (reste == 1UL)
 8005618:	2e01      	cmp	r6, #1
 800561a:	d116      	bne.n	800564a <KMS_Objects_BlobU32_2_u8ptr+0x50>
    {
      /* One byte remains, convention is as follow:
       *         u8[]  = {0x01}
       *         u32[] = {0x00000001} */
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key]);
 800561c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8005620:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 16);
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 8);
      pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key]);
    }
  }
}
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 24);
 8005626:	78e7      	ldrb	r7, [r4, #3]
 8005628:	f805 7c04 	strb.w	r7, [r5, #-4]
    pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 16);
 800562c:	f854 7b04 	ldr.w	r7, [r4], #4
 8005630:	0c3f      	lsrs	r7, r7, #16
 8005632:	f805 7c03 	strb.w	r7, [r5, #-3]
    pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key] >> 8);
 8005636:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800563a:	0a3f      	lsrs	r7, r7, #8
 800563c:	f805 7c02 	strb.w	r7, [r5, #-2]
    pU8[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pU32[index_key]);
 8005640:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8005644:	f805 7c01 	strb.w	r7, [r5, #-1]
  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 8005648:	e7e1      	b.n	800560e <KMS_Objects_BlobU32_2_u8ptr+0x14>
    if (reste == 2UL)
 800564a:	2e02      	cmp	r6, #2
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key] >> 8);
 800564c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005650:	4411      	add	r1, r2
    if (reste == 2UL)
 8005652:	d106      	bne.n	8005662 <KMS_Objects_BlobU32_2_u8ptr+0x68>
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key] >> 8);
 8005654:	0a24      	lsrs	r4, r4, #8
 8005656:	f802 4023 	strb.w	r4, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key]);
 800565a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800565e:	704b      	strb	r3, [r1, #1]
    if (reste == 3UL)
 8005660:	e7e0      	b.n	8005624 <KMS_Objects_BlobU32_2_u8ptr+0x2a>
      pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 16);
 8005662:	0c24      	lsrs	r4, r4, #16
 8005664:	f802 4023 	strb.w	r4, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 8);
 8005668:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800566c:	0a12      	lsrs	r2, r2, #8
 800566e:	704a      	strb	r2, [r1, #1]
      pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key]);
 8005670:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005674:	708b      	strb	r3, [r1, #2]
}
 8005676:	e7d5      	b.n	8005624 <KMS_Objects_BlobU32_2_u8ptr+0x2a>

08005678 <KMS_Objects_ImportBlob>:
  *         @ref authenticate_blob_header returned values
  *         @ref authenticate_blob returned values
  *         @ref install_blob returned values
  */
CK_RV  KMS_Objects_ImportBlob(CK_BYTE_PTR pHdr, CK_BYTE_PTR pFlash)
{
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
  CK_RV e_install_status = CKR_GENERAL_ERROR;
  uint32_t session_index;
  kms_importblob_ctx_t *p_ctx;

  if (!KMS_IS_INITIALIZED())
 800567c:	4bb1      	ldr	r3, [pc, #708]	; (8005944 <KMS_Objects_ImportBlob+0x2cc>)
 800567e:	781a      	ldrb	r2, [r3, #0]
{
 8005680:	b09b      	sub	sp, #108	; 0x6c
 8005682:	4680      	mov	r8, r0
 8005684:	460f      	mov	r7, r1
  if (!KMS_IS_INITIALIZED())
 8005686:	b922      	cbnz	r2, 8005692 <KMS_Objects_ImportBlob+0x1a>
  CK_RV e_install_status = CKR_GENERAL_ERROR;
 8005688:	2505      	movs	r5, #5
  }
  return e_install_status;
#else /* KMS_IMPORT_BLOB */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_IMPORT_BLOB */
}
 800568a:	4628      	mov	r0, r5
 800568c:	b01b      	add	sp, #108	; 0x6c
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    session_index = 1;
 8005692:	2201      	movs	r2, #1
      if (KMS_GETSESSION(session_index).state != KMS_SESSION_NOT_USED)
 8005694:	68dd      	ldr	r5, [r3, #12]
 8005696:	1c69      	adds	r1, r5, #1
 8005698:	d1f6      	bne.n	8005688 <KMS_Objects_ImportBlob+0x10>
      session_index++;
 800569a:	3201      	adds	r2, #1
    } while (session_index <= KMS_NB_SESSIONS_MAX); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 800569c:	2a0b      	cmp	r2, #11
 800569e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80056a2:	d1f7      	bne.n	8005694 <KMS_Objects_ImportBlob+0x1c>
      p_ctx = KMS_Alloc(KMS_SESSION_ID_INVALID, sizeof(kms_importblob_ctx_t));
 80056a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056a8:	2000      	movs	r0, #0
 80056aa:	f7ff f925 	bl	80048f8 <KMS_Alloc>
      if (p_ctx == NULL)
 80056ae:	4606      	mov	r6, r0
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d0e9      	beq.n	8005688 <KMS_Objects_ImportBlob+0x10>
        e_ret_status = authenticate_blob_header(p_ctx, (KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr, pFlash);
 80056b4:	4640      	mov	r0, r8
 80056b6:	f7ff fd8f 	bl	80051d8 <authenticate_blob_header.isra.0>
 80056ba:	4603      	mov	r3, r0
        if (e_ret_status == CKR_OK)
 80056bc:	b128      	cbz	r0, 80056ca <KMS_Objects_ImportBlob+0x52>
  CK_RV e_install_status = CKR_GENERAL_ERROR;
 80056be:	2505      	movs	r5, #5
        KMS_Free(KMS_SESSION_ID_INVALID, p_ctx);
 80056c0:	4631      	mov	r1, r6
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7ff f93c 	bl	8004940 <KMS_Free>
  return e_install_status;
 80056c8:	e7df      	b.n	800568a <KMS_Objects_ImportBlob+0x12>
  if ((pBlobHeader == NULL))
 80056ca:	f1b8 0f00 	cmp.w	r8, #0
 80056ce:	d0f6      	beq.n	80056be <KMS_Objects_ImportBlob+0x46>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &aessession) != CKR_OK)
 80056d0:	aa08      	add	r2, sp, #32
 80056d2:	9200      	str	r2, [sp, #0]
 80056d4:	2104      	movs	r1, #4
 80056d6:	4602      	mov	r2, r0
 80056d8:	f7fe ff54 	bl	8004584 <KMS_OpenSession>
 80056dc:	4603      	mov	r3, r0
 80056de:	2800      	cmp	r0, #0
 80056e0:	d1ed      	bne.n	80056be <KMS_Objects_ImportBlob+0x46>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &digsession) != CKR_OK)
 80056e2:	aa09      	add	r2, sp, #36	; 0x24
 80056e4:	9200      	str	r2, [sp, #0]
 80056e6:	2104      	movs	r1, #4
 80056e8:	4602      	mov	r2, r0
 80056ea:	f7fe ff4b 	bl	8004584 <KMS_OpenSession>
 80056ee:	b118      	cbz	r0, 80056f8 <KMS_Objects_ImportBlob+0x80>
    (void)KMS_CloseSession(aessession);
 80056f0:	9808      	ldr	r0, [sp, #32]
 80056f2:	f7fe ff8d 	bl	8004610 <KMS_CloseSession>
 80056f6:	e7e2      	b.n	80056be <KMS_Objects_ImportBlob+0x46>
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 80056f8:	f000 fbaf 	bl	8005e5a <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 80056fc:	f241 0382 	movw	r3, #4226	; 0x1082
 8005700:	930a      	str	r3, [sp, #40]	; 0x28
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 8005702:	f108 0354 	add.w	r3, r8, #84	; 0x54
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005706:	4602      	mov	r2, r0
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	930b      	str	r3, [sp, #44]	; 0x2c
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 800570c:	9808      	ldr	r0, [sp, #32]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 800570e:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 8005710:	a90a      	add	r1, sp, #40	; 0x28
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8005712:	930c      	str	r3, [sp, #48]	; 0x30
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 8005714:	f7fe f8f6 	bl	8003904 <KMS_DecryptInit>
  if (e_ret_status == CKR_OK)
 8005718:	4604      	mov	r4, r0
 800571a:	b960      	cbnz	r0, 8005736 <KMS_Objects_ImportBlob+0xbe>
    digmech.mechanism = CKM_SHA256;
 800571c:	f44f 7314 	mov.w	r3, #592	; 0x250
    digmech.pParameter = NULL;
 8005720:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
    digmech.ulParameterLen = 0;
 8005724:	900f      	str	r0, [sp, #60]	; 0x3c
    e_ret_status = KMS_DigestInit(digsession, &digmech);
 8005726:	a90d      	add	r1, sp, #52	; 0x34
 8005728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572a:	f7fd fb4f 	bl	8002dcc <KMS_DigestInit>
  if (e_ret_status == CKR_OK)
 800572e:	4604      	mov	r4, r0
 8005730:	2800      	cmp	r0, #0
 8005732:	f000 8095 	beq.w	8005860 <KMS_Objects_ImportBlob+0x1e8>
  (void)KMS_CloseSession(aessession);
 8005736:	9808      	ldr	r0, [sp, #32]
 8005738:	f7fe ff6a 	bl	8004610 <KMS_CloseSession>
  (void)KMS_CloseSession(digsession);
 800573c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800573e:	f7fe ff67 	bl	8004610 <KMS_CloseSession>
  if (e_ret_status == CKR_OK)
 8005742:	2c00      	cmp	r4, #0
 8005744:	d1bb      	bne.n	80056be <KMS_Objects_ImportBlob+0x46>
    if ((fw_tag_len == KMS_BLOB_TAG_LEN) && (memcmp(fw_tag_output, pBlobHeader->BlobTag, KMS_BLOB_TAG_LEN) == 0))
 8005746:	9a07      	ldr	r2, [sp, #28]
 8005748:	2a20      	cmp	r2, #32
 800574a:	d1b8      	bne.n	80056be <KMS_Objects_ImportBlob+0x46>
 800574c:	f108 0114 	add.w	r1, r8, #20
 8005750:	a812      	add	r0, sp, #72	; 0x48
 8005752:	f001 f99f 	bl	8006a94 <memcmp>
 8005756:	2800      	cmp	r0, #0
 8005758:	d1b1      	bne.n	80056be <KMS_Objects_ImportBlob+0x46>
            e_ret_status = authenticate_blob_header(p_ctx, (KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr, pFlash);
 800575a:	4640      	mov	r0, r8
 800575c:	f7ff fd3c 	bl	80051d8 <authenticate_blob_header.isra.0>
            if (e_ret_status == CKR_OK)
 8005760:	2800      	cmp	r0, #0
 8005762:	d1ac      	bne.n	80056be <KMS_Objects_ImportBlob+0x46>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session) != CKR_OK)
 8005764:	ab07      	add	r3, sp, #28
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4622      	mov	r2, r4
 800576a:	4623      	mov	r3, r4
 800576c:	2104      	movs	r1, #4
 800576e:	f7fe ff09 	bl	8004584 <KMS_OpenSession>
 8005772:	2800      	cmp	r0, #0
 8005774:	f040 818e 	bne.w	8005a94 <KMS_Objects_ImportBlob+0x41c>
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005778:	f000 fb6f 	bl	8005e5a <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 800577c:	f241 0382 	movw	r3, #4226	; 0x1082
 8005780:	930a      	str	r3, [sp, #40]	; 0x28
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	930b      	str	r3, [sp, #44]	; 0x2c
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005786:	4602      	mov	r2, r0
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8005788:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(session, &aesmech, obj_id_index);
 800578a:	9807      	ldr	r0, [sp, #28]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 800578c:	930c      	str	r3, [sp, #48]	; 0x30
  e_ret_status = KMS_DecryptInit(session, &aesmech, obj_id_index);
 800578e:	a90a      	add	r1, sp, #40	; 0x28
 8005790:	f7fe f8b8 	bl	8003904 <KMS_DecryptInit>
  if (e_ret_status != CKR_OK)
 8005794:	4605      	mov	r5, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d192      	bne.n	80056c0 <KMS_Objects_ImportBlob+0x48>
  if (pBlobHeader->BlobSize < fw_decrypted_chunk_size)
 800579a:	f8d8 3008 	ldr.w	r3, [r8, #8]
  e_ret_status = read_next_chunk(pCtx,
 800579e:	9907      	ldr	r1, [sp, #28]
    fw_decrypted_chunk_size = pBlobHeader->BlobSize;
 80057a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  e_ret_status = read_next_chunk(pCtx,
 80057a4:	aa08      	add	r2, sp, #32
 80057a6:	e9cd 6200 	strd	r6, r2, [sp]
    fw_decrypted_chunk_size = pBlobHeader->BlobSize;
 80057aa:	bf28      	it	cs
 80057ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
  e_ret_status = read_next_chunk(pCtx,
 80057b0:	463a      	mov	r2, r7
 80057b2:	4630      	mov	r0, r6
    fw_decrypted_chunk_size = pBlobHeader->BlobSize;
 80057b4:	9308      	str	r3, [sp, #32]
  e_ret_status = read_next_chunk(pCtx,
 80057b6:	f7ff fd68 	bl	800528a <read_next_chunk>
  pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80057ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
  e_ret_status = read_next_chunk(pCtx,
 80057be:	9003      	str	r0, [sp, #12]
  pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80057c0:	444f      	add	r7, r9
                                 pCtx->fw_decrypted_chunk,
 80057c2:	46b3      	mov	fp, r6
  while (((fw_decrypted_total_size < (pBlobHeader->BlobSize))
 80057c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057c8:	454b      	cmp	r3, r9
 80057ca:	d804      	bhi.n	80057d6 <KMS_Objects_ImportBlob+0x15e>
          || (p_next_magic < (uint32_t *)(uint32_t)(&(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size]))))
 80057cc:	9b08      	ldr	r3, [sp, #32]
 80057ce:	4433      	add	r3, r6
 80057d0:	459b      	cmp	fp, r3
 80057d2:	f080 814c 	bcs.w	8005a6e <KMS_Objects_ImportBlob+0x3f6>
         && (e_ret_status == CKR_OK))
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d079      	beq.n	80058d0 <KMS_Objects_ImportBlob+0x258>
 80057dc:	461d      	mov	r5, r3
  if (pBlob != NULL_PTR)
 80057de:	2c00      	cmp	r4, #0
 80057e0:	f040 8147 	bne.w	8005a72 <KMS_Objects_ImportBlob+0x3fa>
 80057e4:	e152      	b.n	8005a8c <KMS_Objects_ImportBlob+0x414>
      if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 80057e6:	eba3 030a 	sub.w	r3, r3, sl
        pfw_source_address = pBlobInFlash;
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	bf08      	it	eq
 80057f0:	463d      	moveq	r5, r7
      if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 80057f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      fw_decrypted_chunk_size = sizeof(pCtx->fw_decrypted_chunk);
 80057f6:	bf28      	it	cs
 80057f8:	f44f 7300 	movcs.w	r3, #512	; 0x200
      size = fw_decrypted_chunk_size;
 80057fc:	461a      	mov	r2, r3
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 80057fe:	4629      	mov	r1, r5
 8005800:	4658      	mov	r0, fp
      fw_decrypted_chunk_size = sizeof(pCtx->fw_decrypted_chunk);
 8005802:	9306      	str	r3, [sp, #24]
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	f7fb f857 	bl	80008b8 <KMS_LL_FLASH_Read>
      if (e_ret_status == CKR_OK)
 800580a:	4604      	mov	r4, r0
 800580c:	b918      	cbnz	r0, 8005816 <KMS_Objects_ImportBlob+0x19e>
        if (size == 0UL)
 800580e:	9a04      	ldr	r2, [sp, #16]
 8005810:	b942      	cbnz	r2, 8005824 <KMS_Objects_ImportBlob+0x1ac>
              pass_index += 1UL;
 8005812:	f109 0901 	add.w	r9, r9, #1
    while ((fw_decrypted_total_size < (pBlobHeader->BlobSize)) && (e_ret_status == CKR_OK))
 8005816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800581a:	4553      	cmp	r3, sl
 800581c:	d925      	bls.n	800586a <KMS_Objects_ImportBlob+0x1f2>
 800581e:	2c00      	cmp	r4, #0
 8005820:	d0e1      	beq.n	80057e6 <KMS_Objects_ImportBlob+0x16e>
 8005822:	e788      	b.n	8005736 <KMS_Objects_ImportBlob+0xbe>
          e_ret_status = KMS_DecryptUpdate(aessession,
 8005824:	ab06      	add	r3, sp, #24
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	9808      	ldr	r0, [sp, #32]
 800582a:	9204      	str	r2, [sp, #16]
 800582c:	4633      	mov	r3, r6
 800582e:	4659      	mov	r1, fp
 8005830:	f7fe f882 	bl	8003938 <KMS_DecryptUpdate>
          if ((e_ret_status == CKR_OK) && (fw_decrypted_chunk_size == size))
 8005834:	4604      	mov	r4, r0
 8005836:	2800      	cmp	r0, #0
 8005838:	d1ed      	bne.n	8005816 <KMS_Objects_ImportBlob+0x19e>
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	9a04      	ldr	r2, [sp, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	d1e9      	bne.n	8005816 <KMS_Objects_ImportBlob+0x19e>
            e_ret_status = KMS_DigestUpdate(digsession, pCtx->fw_decrypted_chunk, fw_decrypted_chunk_size);
 8005842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005844:	4631      	mov	r1, r6
 8005846:	f7fd fb57 	bl	8002ef8 <KMS_DigestUpdate>
            if (e_ret_status == CKR_OK)
 800584a:	4604      	mov	r4, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d1e2      	bne.n	8005816 <KMS_Objects_ImportBlob+0x19e>
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005850:	9a06      	ldr	r2, [sp, #24]
              (void)memset(pCtx->fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 8005852:	21ff      	movs	r1, #255	; 0xff
 8005854:	4630      	mov	r0, r6
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005856:	4415      	add	r5, r2
              fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005858:	4492      	add	sl, r2
              (void)memset(pCtx->fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 800585a:	f001 f937 	bl	8006acc <memset>
 800585e:	e7d8      	b.n	8005812 <KMS_Objects_ImportBlob+0x19a>
  pass_index = 0;
 8005860:	4681      	mov	r9, r0
  uint32_t fw_decrypted_total_size = 0;
 8005862:	4682      	mov	sl, r0
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005864:	f506 7b00 	add.w	fp, r6, #512	; 0x200
 8005868:	e7d5      	b.n	8005816 <KMS_Objects_ImportBlob+0x19e>
  if ((e_ret_status == CKR_OK))
 800586a:	9808      	ldr	r0, [sp, #32]
 800586c:	2c00      	cmp	r4, #0
 800586e:	f47f af62 	bne.w	8005736 <KMS_Objects_ImportBlob+0xbe>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005872:	2520      	movs	r5, #32
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005874:	aa07      	add	r2, sp, #28
 8005876:	a912      	add	r1, sp, #72	; 0x48
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005878:	9507      	str	r5, [sp, #28]
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 800587a:	f7fe f8f9 	bl	8003a70 <KMS_DecryptFinal>
    if (e_ret_status == CKR_OK)
 800587e:	4604      	mov	r4, r0
 8005880:	2800      	cmp	r0, #0
 8005882:	f47f af58 	bne.w	8005736 <KMS_Objects_ImportBlob+0xbe>
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005886:	9809      	ldr	r0, [sp, #36]	; 0x24
      fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005888:	9507      	str	r5, [sp, #28]
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 800588a:	aa07      	add	r2, sp, #28
 800588c:	a912      	add	r1, sp, #72	; 0x48
 800588e:	f7fd fb63 	bl	8002f58 <KMS_DigestFinal>
 8005892:	4604      	mov	r4, r0
      if (e_ret_status == CKR_OK)
 8005894:	e74f      	b.n	8005736 <KMS_Objects_ImportBlob+0xbe>
      if (p_next_magic == (uint32_t *)(uint32_t) &(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size]))
 8005896:	9a08      	ldr	r2, [sp, #32]
 8005898:	18b3      	adds	r3, r6, r2
 800589a:	459b      	cmp	fp, r3
 800589c:	d14b      	bne.n	8005936 <KMS_Objects_ImportBlob+0x2be>
        if (fw_decrypted_total_size == (pBlobHeader->BlobSize))
 800589e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058a2:	454b      	cmp	r3, r9
 80058a4:	d019      	beq.n	80058da <KMS_Objects_ImportBlob+0x262>
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 80058a6:	eba3 0309 	sub.w	r3, r3, r9
 80058aa:	429a      	cmp	r2, r3
          fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 80058ac:	bf88      	it	hi
 80058ae:	9308      	strhi	r3, [sp, #32]
        e_ret_status = read_next_chunk(pCtx, session,
 80058b0:	ab08      	add	r3, sp, #32
 80058b2:	e9cd 6300 	strd	r6, r3, [sp]
 80058b6:	9907      	ldr	r1, [sp, #28]
 80058b8:	9b08      	ldr	r3, [sp, #32]
 80058ba:	463a      	mov	r2, r7
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff fce4 	bl	800528a <read_next_chunk>
        if (e_ret_status != CKR_OK)
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d13b      	bne.n	800593e <KMS_Objects_ImportBlob+0x2c6>
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80058c6:	9b08      	ldr	r3, [sp, #32]
                                 pCtx->fw_decrypted_chunk,
 80058c8:	46b3      	mov	fp, r6
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80058ca:	441f      	add	r7, r3
        fw_decrypted_total_size += fw_decrypted_chunk_size;
 80058cc:	4499      	add	r9, r3
                                 pCtx->fw_decrypted_chunk,
 80058ce:	4605      	mov	r5, r0
    while ((*p_next_magic != KMS_ABI_VERSION_CK_2_40) && (e_ret_status == CKR_OK))
 80058d0:	f8db 3000 	ldr.w	r3, [fp]
 80058d4:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <KMS_Objects_ImportBlob+0x2d0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d1dd      	bne.n	8005896 <KMS_Objects_ImportBlob+0x21e>
    if ((*p_next_magic == KMS_ABI_VERSION_CK_2_40) && (e_ret_status == CKR_OK))
 80058da:	f8db 3000 	ldr.w	r3, [fp]
 80058de:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <KMS_Objects_ImportBlob+0x2d0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	f47f af6f 	bne.w	80057c4 <KMS_Objects_ImportBlob+0x14c>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f af6b 	bne.w	80057c4 <KMS_Objects_ImportBlob+0x14c>
      if ((fw_decrypted_chunk_size - index_in_decrypted_chunk) > sizeof(kms_obj_keyhead_no_blob_t))
 80058ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058f2:	ebaa 0305 	sub.w	r3, sl, r5
 80058f6:	2b14      	cmp	r3, #20
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	d927      	bls.n	800594c <KMS_Objects_ImportBlob+0x2d4>
        (void)memcpy(&blobObject, pCtx->fw_decrypted_chunk + index_in_decrypted_chunk,
 80058fc:	1973      	adds	r3, r6, r5
 80058fe:	aa0d      	add	r2, sp, #52	; 0x34
 8005900:	f103 0c10 	add.w	ip, r3, #16
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	4614      	mov	r4, r2
 800590a:	c403      	stmia	r4!, {r0, r1}
 800590c:	3308      	adds	r3, #8
 800590e:	4563      	cmp	r3, ip
 8005910:	4622      	mov	r2, r4
 8005912:	d1f7      	bne.n	8005904 <KMS_Objects_ImportBlob+0x28c>
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	6020      	str	r0, [r4, #0]
        index_in_decrypted_chunk = index_in_decrypted_chunk + sizeof(kms_obj_keyhead_no_blob_t);
 8005918:	f105 0a14 	add.w	sl, r5, #20
      pBlob = KMS_Alloc(session, sizeof(kms_obj_keyhead_no_blob_t) + blobObject.blobs_size);
 800591c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800591e:	9807      	ldr	r0, [sp, #28]
 8005920:	3114      	adds	r1, #20
 8005922:	f7fe ffe9 	bl	80048f8 <KMS_Alloc>
      if (pBlob == NULL_PTR)
 8005926:	4604      	mov	r4, r0
 8005928:	2800      	cmp	r0, #0
 800592a:	d13f      	bne.n	80059ac <KMS_Objects_ImportBlob+0x334>
        (void)KMS_CloseSession(session);
 800592c:	9807      	ldr	r0, [sp, #28]
 800592e:	f7fe fe6f 	bl	8004610 <KMS_CloseSession>
        return CKR_DEVICE_MEMORY;
 8005932:	2531      	movs	r5, #49	; 0x31
 8005934:	e6c4      	b.n	80056c0 <KMS_Objects_ImportBlob+0x48>
        p_next_magic++;
 8005936:	f10b 0b04 	add.w	fp, fp, #4
        index_in_decrypted_chunk += 4UL;
 800593a:	1d28      	adds	r0, r5, #4
 800593c:	e7c7      	b.n	80058ce <KMS_Objects_ImportBlob+0x256>
        e_ret_status = read_next_chunk(pCtx, session,
 800593e:	9003      	str	r0, [sp, #12]
 8005940:	e7cb      	b.n	80058da <KMS_Objects_ImportBlob+0x262>
 8005942:	bf00      	nop
 8005944:	20000c48 	.word	0x20000c48
 8005948:	b10b0240 	.word	0xb10b0240
      else if (fw_decrypted_total_size < (pBlobHeader->BlobSize))
 800594c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4599      	cmp	r9, r3
 8005954:	f080 80a0 	bcs.w	8005a98 <KMS_Objects_ImportBlob+0x420>
        (void)memcpy(&blobObject, pCtx->fw_decrypted_chunk + index_in_decrypted_chunk,
 8005958:	1971      	adds	r1, r6, r5
 800595a:	9a04      	ldr	r2, [sp, #16]
 800595c:	a80d      	add	r0, sp, #52	; 0x34
 800595e:	f001 f8a7 	bl	8006ab0 <memcpy>
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005962:	9b05      	ldr	r3, [sp, #20]
 8005964:	9907      	ldr	r1, [sp, #28]
 8005966:	eba3 0309 	sub.w	r3, r3, r9
 800596a:	459a      	cmp	sl, r3
          fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 800596c:	bf88      	it	hi
 800596e:	9308      	strhi	r3, [sp, #32]
        size = fw_decrypted_chunk_size;
 8005970:	9b08      	ldr	r3, [sp, #32]
        if (size < (sizeof(kms_obj_keyhead_no_blob_t) - bytes_copied_in_kms))
 8005972:	f1ca 0a14 	rsb	sl, sl, #20
 8005976:	44aa      	add	sl, r5
 8005978:	4553      	cmp	r3, sl
 800597a:	f0c0 808d 	bcc.w	8005a98 <KMS_Objects_ImportBlob+0x420>
        e_ret_status = read_next_chunk(pCtx,
 800597e:	aa08      	add	r2, sp, #32
 8005980:	e9cd 6200 	strd	r6, r2, [sp]
 8005984:	4630      	mov	r0, r6
 8005986:	463a      	mov	r2, r7
 8005988:	f7ff fc7f 	bl	800528a <read_next_chunk>
        if (e_ret_status != CKR_OK)
 800598c:	4605      	mov	r5, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	f47f af25 	bne.w	80057de <KMS_Objects_ImportBlob+0x166>
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005994:	9b08      	ldr	r3, [sp, #32]
 8005996:	441f      	add	r7, r3
        fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005998:	4499      	add	r9, r3
        (void)memcpy((void *)((uint32_t *)tmp), pCtx->fw_decrypted_chunk,
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	a80d      	add	r0, sp, #52	; 0x34
 800599e:	4403      	add	r3, r0
 80059a0:	4652      	mov	r2, sl
 80059a2:	4631      	mov	r1, r6
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f883 	bl	8006ab0 <memcpy>
        index_in_decrypted_chunk = sizeof(kms_obj_keyhead_no_blob_t) - bytes_copied_in_kms ;
 80059aa:	e7b7      	b.n	800591c <KMS_Objects_ImportBlob+0x2a4>
      (void)memcpy(pBlob, &blobObject, sizeof(kms_obj_keyhead_no_blob_t));
 80059ac:	ad0d      	add	r5, sp, #52	; 0x34
 80059ae:	4603      	mov	r3, r0
 80059b0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80059b4:	462a      	mov	r2, r5
 80059b6:	ca03      	ldmia	r2!, {r0, r1}
 80059b8:	4562      	cmp	r2, ip
 80059ba:	6018      	str	r0, [r3, #0]
 80059bc:	6059      	str	r1, [r3, #4]
 80059be:	4615      	mov	r5, r2
 80059c0:	f103 0308 	add.w	r3, r3, #8
 80059c4:	d1f6      	bne.n	80059b4 <KMS_Objects_ImportBlob+0x33c>
 80059c6:	6810      	ldr	r0, [r2, #0]
 80059c8:	6018      	str	r0, [r3, #0]
          tmp = (uint32_t)(&(pBlob->blobs[0]));
 80059ca:	f104 0314 	add.w	r3, r4, #20
      while ((e_ret_status == CKR_OK) && (pBlob->blobs_size > bytes_copied_in_kms))
 80059ce:	4655      	mov	r5, sl
          tmp = (uint32_t)(&(pBlob->blobs[0]));
 80059d0:	9304      	str	r3, [sp, #16]
      bytes_copied_in_kms = 0;
 80059d2:	f04f 0a00 	mov.w	sl, #0
      while ((e_ret_status == CKR_OK) && (pBlob->blobs_size > bytes_copied_in_kms))
 80059d6:	68a3      	ldr	r3, [r4, #8]
 80059d8:	4553      	cmp	r3, sl
 80059da:	f67f aef3 	bls.w	80057c4 <KMS_Objects_ImportBlob+0x14c>
        if ((fw_decrypted_chunk_size - index_in_decrypted_chunk) > (pBlob->blobs_size - bytes_copied_in_kms))
 80059de:	9a08      	ldr	r2, [sp, #32]
 80059e0:	eba3 030a 	sub.w	r3, r3, sl
 80059e4:	1b52      	subs	r2, r2, r5
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d918      	bls.n	8005a1c <KMS_Objects_ImportBlob+0x3a4>
          tmp = (uint32_t)(&(pBlob->blobs[0]));
 80059ea:	f104 0014 	add.w	r0, r4, #20
          (void)memcpy((void *)((uint32_t *)(tmp)),
 80059ee:	461a      	mov	r2, r3
 80059f0:	1971      	adds	r1, r6, r5
 80059f2:	4450      	add	r0, sl
 80059f4:	f001 f85c 	bl	8006ab0 <memcpy>
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 80059f8:	68a2      	ldr	r2, [r4, #8]
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 80059fa:	6920      	ldr	r0, [r4, #16]
 80059fc:	4621      	mov	r1, r4
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 80059fe:	4415      	add	r5, r2
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8005a00:	3214      	adds	r2, #20
 8005a02:	f000 f9fd 	bl	8005e00 <KMS_PlatfObjects_NvmStoreObject>
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 8005a06:	eba5 050a 	sub.w	r5, r5, sl
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8005a0a:	9003      	str	r0, [sp, #12]
          KMS_Free(session, pBlob);
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	9807      	ldr	r0, [sp, #28]
 8005a10:	f7fe ff96 	bl	8004940 <KMS_Free>
          p_next_magic = (uint32_t *)(uint32_t) &(pCtx->fw_decrypted_chunk[index_in_decrypted_chunk]);
 8005a14:	eb06 0b05 	add.w	fp, r6, r5
          pBlob = NULL_PTR;
 8005a18:	2400      	movs	r4, #0
          break;
 8005a1a:	e6d3      	b.n	80057c4 <KMS_Objects_ImportBlob+0x14c>
        else if (fw_decrypted_total_size < (pBlobHeader->BlobSize))
 8005a1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a20:	454b      	cmp	r3, r9
 8005a22:	d91f      	bls.n	8005a64 <KMS_Objects_ImportBlob+0x3ec>
          (void)memcpy((void *)((uint32_t *)(tmp)),
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	1971      	adds	r1, r6, r5
 8005a28:	eb03 000a 	add.w	r0, r3, sl
 8005a2c:	f001 f840 	bl	8006ab0 <memcpy>
          bytes_copied_in_kms += fw_decrypted_chunk_size - index_in_decrypted_chunk;
 8005a30:	9a08      	ldr	r2, [sp, #32]
          e_ret_status = read_next_chunk(pCtx,
 8005a32:	9907      	ldr	r1, [sp, #28]
          bytes_copied_in_kms += fw_decrypted_chunk_size - index_in_decrypted_chunk;
 8005a34:	1b53      	subs	r3, r2, r5
 8005a36:	449a      	add	sl, r3
          if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005a38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a3c:	eba3 0309 	sub.w	r3, r3, r9
 8005a40:	429a      	cmp	r2, r3
            fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8005a42:	bf88      	it	hi
 8005a44:	9308      	strhi	r3, [sp, #32]
          e_ret_status = read_next_chunk(pCtx,
 8005a46:	ab08      	add	r3, sp, #32
 8005a48:	e9cd 6300 	strd	r6, r3, [sp]
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	9b08      	ldr	r3, [sp, #32]
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7ff fc1a 	bl	800528a <read_next_chunk>
          if (e_ret_status != CKR_OK)
 8005a56:	b940      	cbnz	r0, 8005a6a <KMS_Objects_ImportBlob+0x3f2>
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005a58:	9b08      	ldr	r3, [sp, #32]
          index_in_decrypted_chunk = 0;
 8005a5a:	4605      	mov	r5, r0
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005a5c:	441f      	add	r7, r3
          fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005a5e:	4499      	add	r9, r3
                                 pCtx->fw_decrypted_chunk,
 8005a60:	46b3      	mov	fp, r6
 8005a62:	e7b8      	b.n	80059d6 <KMS_Objects_ImportBlob+0x35e>
          e_ret_status = CKR_DATA_INVALID;
 8005a64:	2320      	movs	r3, #32
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	e6ac      	b.n	80057c4 <KMS_Objects_ImportBlob+0x14c>
          e_ret_status = read_next_chunk(pCtx,
 8005a6a:	9003      	str	r0, [sp, #12]
 8005a6c:	e6aa      	b.n	80057c4 <KMS_Objects_ImportBlob+0x14c>
  if (pBlob != NULL_PTR)
 8005a6e:	9d03      	ldr	r5, [sp, #12]
 8005a70:	b11c      	cbz	r4, 8005a7a <KMS_Objects_ImportBlob+0x402>
    KMS_Free(session, pBlob);
 8005a72:	9807      	ldr	r0, [sp, #28]
 8005a74:	4621      	mov	r1, r4
 8005a76:	f7fe ff63 	bl	8004940 <KMS_Free>
  if (e_ret_status == CKR_OK)
 8005a7a:	b93d      	cbnz	r5, 8005a8c <KMS_Objects_ImportBlob+0x414>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005a7c:	2320      	movs	r3, #32
    e_ret_status =  KMS_DecryptFinal(session, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a7e:	9807      	ldr	r0, [sp, #28]
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005a80:	9309      	str	r3, [sp, #36]	; 0x24
    e_ret_status =  KMS_DecryptFinal(session, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a82:	aa09      	add	r2, sp, #36	; 0x24
 8005a84:	a912      	add	r1, sp, #72	; 0x48
 8005a86:	f7fd fff3 	bl	8003a70 <KMS_DecryptFinal>
 8005a8a:	4605      	mov	r5, r0
  (void)KMS_CloseSession(session);
 8005a8c:	9807      	ldr	r0, [sp, #28]
 8005a8e:	f7fe fdbf 	bl	8004610 <KMS_CloseSession>
  return e_ret_status;
 8005a92:	e615      	b.n	80056c0 <KMS_Objects_ImportBlob+0x48>
    return CKR_FUNCTION_FAILED;
 8005a94:	2506      	movs	r5, #6
 8005a96:	e613      	b.n	80056c0 <KMS_Objects_ImportBlob+0x48>
        e_ret_status = CKR_DATA_INVALID;
 8005a98:	2520      	movs	r5, #32
 8005a9a:	e6a0      	b.n	80057de <KMS_Objects_ImportBlob+0x166>

08005a9c <KMS_Objects_LockKeys>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV KMS_Objects_LockKeys(CK_OBJECT_HANDLE_PTR pKeys, CK_ULONG ulCount)
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
#if defined(KMS_SE_LOCK_KEYS)
  if ((pKeys == NULL_PTR) || (ulCount == 0UL))
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	b158      	cbz	r0, 8005aba <KMS_Objects_LockKeys+0x1e>
 8005aa2:	b151      	cbz	r1, 8005aba <KMS_Objects_LockKeys+0x1e>
 8005aa4:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  {
    return CKR_ARGUMENTS_BAD;
  }
  for (uint32_t i = 0; i < ulCount; i++)
 8005aa8:	42ac      	cmp	r4, r5
 8005aaa:	d101      	bne.n	8005ab0 <KMS_Objects_LockKeys+0x14>
  {
    (void)KMS_LockKeyHandle(pKeys[i]);
  }
  return CKR_OK;
 8005aac:	2000      	movs	r0, #0
#else /* KMS_SE_LOCK_KEYS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_KEYS */
}
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
    (void)KMS_LockKeyHandle(pKeys[i]);
 8005ab0:	f854 0b04 	ldr.w	r0, [r4], #4
 8005ab4:	f7ff fc28 	bl	8005308 <KMS_LockKeyHandle>
  for (uint32_t i = 0; i < ulCount; i++)
 8005ab8:	e7f6      	b.n	8005aa8 <KMS_Objects_LockKeys+0xc>
    return CKR_ARGUMENTS_BAD;
 8005aba:	2007      	movs	r0, #7
 8005abc:	e7f7      	b.n	8005aae <KMS_Objects_LockKeys+0x12>

08005abe <KMS_Objects_LockServices>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV KMS_Objects_LockServices(CK_ULONG_PTR pServices, CK_ULONG ulCount)
{
 8005abe:	b538      	push	{r3, r4, r5, lr}
#if defined(KMS_SE_LOCK_SERVICES)
  if ((pServices == NULL_PTR) || (ulCount == 0UL))
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	b158      	cbz	r0, 8005adc <KMS_Objects_LockServices+0x1e>
 8005ac4:	b151      	cbz	r1, 8005adc <KMS_Objects_LockServices+0x1e>
 8005ac6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  {
    return CKR_ARGUMENTS_BAD;
  }
  for (uint32_t i = 0; i < ulCount; i++)
 8005aca:	42ac      	cmp	r4, r5
 8005acc:	d101      	bne.n	8005ad2 <KMS_Objects_LockServices+0x14>
  {
    (void)KMS_LockServiceFctId(pServices[i]);
  }
  return CKR_OK;
 8005ace:	2000      	movs	r0, #0
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_SERVICES */
}
 8005ad0:	bd38      	pop	{r3, r4, r5, pc}
    (void)KMS_LockServiceFctId(pServices[i]);
 8005ad2:	f854 0b04 	ldr.w	r0, [r4], #4
 8005ad6:	f7ff fc89 	bl	80053ec <KMS_LockServiceFctId>
  for (uint32_t i = 0; i < ulCount; i++)
 8005ada:	e7f6      	b.n	8005aca <KMS_Objects_LockServices+0xc>
    return CKR_ARGUMENTS_BAD;
 8005adc:	2007      	movs	r0, #7
 8005ade:	e7f7      	b.n	8005ad0 <KMS_Objects_LockServices+0x12>

08005ae0 <KMS_Objects_CreateNStoreBlobFromTemplates>:
                                                CK_ATTRIBUTE_PTR pTemplate1,
                                                CK_ULONG ulCount1,
                                                CK_ATTRIBUTE_PTR pTemplate2,
                                                CK_ULONG ulCount2,
                                                CK_OBJECT_HANDLE_PTR phObject)
{
 8005ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8005ae8:	4683      	mov	fp, r0
 8005aea:	4615      	mov	r5, r2
 8005aec:	461c      	mov	r4, r3
  uint32_t offset;
  uint32_t *ptr;
  uint32_t tmp;
  kms_obj_keyhead_no_blob_t *p_blob;

  if ((pTemplate1 == NULL_PTR) || (ulCount1 == 0UL) || (phObject == NULL_PTR)
 8005aee:	460e      	mov	r6, r1
 8005af0:	b131      	cbz	r1, 8005b00 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005af2:	b12a      	cbz	r2, 8005b00 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af6:	b11b      	cbz	r3, 8005b00 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
      || ((pTemplate2 == NULL_PTR) && (ulCount2 != 0UL)) || ((pTemplate2 != NULL_PTR) && (ulCount2 == 0UL)))
 8005af8:	b924      	cbnz	r4, 8005b04 <KMS_Objects_CreateNStoreBlobFromTemplates+0x24>
 8005afa:	f1b9 0f00 	cmp.w	r9, #0
 8005afe:	d004      	beq.n	8005b0a <KMS_Objects_CreateNStoreBlobFromTemplates+0x2a>
  {
    return CKR_ARGUMENTS_BAD;
 8005b00:	2407      	movs	r4, #7
 8005b02:	e059      	b.n	8005bb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0xd8>
      || ((pTemplate2 == NULL_PTR) && (ulCount2 != 0UL)) || ((pTemplate2 != NULL_PTR) && (ulCount2 == 0UL)))
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	d0fa      	beq.n	8005b00 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005b0a:	210c      	movs	r1, #12
 8005b0c:	fb01 6105 	mla	r1, r1, r5, r6
  blob_size = 0;
  for (uint32_t i = 0; i < ulCount1; i++)
  {
    /* pValue size align on 4 bytes */
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
                 + (((pTemplate1[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
 8005b10:	4632      	mov	r2, r6
 8005b12:	f04f 0800 	mov.w	r8, #0
  for (uint32_t i = 0; i < ulCount1; i++)
 8005b16:	428a      	cmp	r2, r1
 8005b18:	d152      	bne.n	8005bc0 <KMS_Objects_CreateNStoreBlobFromTemplates+0xe0>
  }

  /* Add for each attribute type & length fields */
  blob_size += ulCount1 * 2UL * sizeof(uint32_t);
 8005b1a:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
  if ((ulCount2 != 0UL) && (pTemplate2 != NULL_PTR))
 8005b1e:	f1b9 0f00 	cmp.w	r9, #0
 8005b22:	d008      	beq.n	8005b36 <KMS_Objects_CreateNStoreBlobFromTemplates+0x56>
 8005b24:	b13c      	cbz	r4, 8005b36 <KMS_Objects_CreateNStoreBlobFromTemplates+0x56>
 8005b26:	210c      	movs	r1, #12
 8005b28:	4622      	mov	r2, r4
 8005b2a:	fb01 4109 	mla	r1, r1, r9, r4
  {
    for (uint32_t i = 0; i < ulCount2; i++)
 8005b2e:	428a      	cmp	r2, r1
 8005b30:	d151      	bne.n	8005bd6 <KMS_Objects_CreateNStoreBlobFromTemplates+0xf6>
      /* pValue size align on 4 bytes */
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
                   + (((pTemplate2[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
    }
    /* Add for each attribute type & length fields */
    blob_size += ulCount2 * 2UL * sizeof(uint32_t);
 8005b32:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
  }

  /* Allocate blob object */
  p_blob = (kms_obj_keyhead_no_blob_t *)KMS_Alloc(hSession, sizeof(kms_obj_keyhead_no_blob_t) + blob_size);
 8005b36:	f108 0114 	add.w	r1, r8, #20
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f7fe fedc 	bl	80048f8 <KMS_Alloc>
  if (p_blob == NULL_PTR)
 8005b40:	4607      	mov	r7, r0
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d074      	beq.n	8005c30 <KMS_Objects_CreateNStoreBlobFromTemplates+0x150>
  {
    e_ret_status = CKR_DEVICE_MEMORY;
  }
  else
  {
    p_blob->version = KMS_ABI_VERSION_CK_2_40;
 8005b46:	4b3b      	ldr	r3, [pc, #236]	; (8005c34 <KMS_Objects_CreateNStoreBlobFromTemplates+0x154>)
 8005b48:	6003      	str	r3, [r0, #0]
    p_blob->configuration = KMS_ABI_CONFIG_KEYHEAD;
 8005b4a:	f46f 720f 	mvn.w	r2, #572	; 0x23c
 8005b4e:	4413      	add	r3, r2
    p_blob->blobs_size = blob_size;
 8005b50:	e9c0 3801 	strd	r3, r8, [r0, #4]
    p_blob->blobs_count = ulCount1 + ulCount2;
 8005b54:	eb05 0309 	add.w	r3, r5, r9
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	60c3      	str	r3, [r0, #12]
    p_blob->object_id = KMS_HANDLE_KEY_NOT_KNOWN;    /* Updated when inserting object in NVM / VM */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6103      	str	r3, [r0, #16]

    offset = 0;
    tmp = (uint32_t)(p_blob);
    ptr = (uint32_t *)(tmp + sizeof(kms_obj_keyhead_no_blob_t));
 8005b60:	f100 0a14 	add.w	sl, r0, #20

    /* Copy Template in blob, size and pValue are reversed, memcpy is impossible */
    for (uint32_t i = 0; i < ulCount1; i++)
 8005b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ptr = (uint32_t *)(tmp + sizeof(kms_obj_keyhead_no_blob_t));
 8005b68:	4698      	mov	r8, r3
    {
      ptr[(3UL * i) + offset] = pTemplate1[i].type;
 8005b6a:	eb08 0003 	add.w	r0, r8, r3
 8005b6e:	6832      	ldr	r2, [r6, #0]
 8005b70:	f84a 2020 	str.w	r2, [sl, r0, lsl #2]
      ptr[(3UL * i) + 1UL + offset] = pTemplate1[i].ulValueLen;
 8005b74:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8005b78:	68b1      	ldr	r1, [r6, #8]
 8005b7a:	6051      	str	r1, [r2, #4]
      (void)memcpy((uint8_t *) & (ptr[(3UL * i) + 2UL + offset]), (uint8_t *)(pTemplate1[i].pValue),
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	3008      	adds	r0, #8
 8005b80:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
      ptr[(3UL * i) + offset] = pTemplate1[i].type;
 8005b84:	9301      	str	r3, [sp, #4]
      (void)memcpy((uint8_t *) & (ptr[(3UL * i) + 2UL + offset]), (uint8_t *)(pTemplate1[i].pValue),
 8005b86:	f000 ff93 	bl	8006ab0 <memcpy>
                   pTemplate1[i].ulValueLen);
      offset += (pTemplate1[i].ulValueLen - 1UL) / 4UL;
 8005b8a:	68b2      	ldr	r2, [r6, #8]
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	f108 0803 	add.w	r8, r8, #3
 8005b92:	3a01      	subs	r2, #1
    for (uint32_t i = 0; i < ulCount1; i++)
 8005b94:	45a8      	cmp	r8, r5
      offset += (pTemplate1[i].ulValueLen - 1UL) / 4UL;
 8005b96:	eb03 0392 	add.w	r3, r3, r2, lsr #2
    for (uint32_t i = 0; i < ulCount1; i++)
 8005b9a:	f106 060c 	add.w	r6, r6, #12
 8005b9e:	d1e4      	bne.n	8005b6a <KMS_Objects_CreateNStoreBlobFromTemplates+0x8a>
    }

    /* Object template #2 management when required by the caller */
    if ((ulCount2 != 0UL) && (pTemplate2 != NULL_PTR))
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	d122      	bne.n	8005bec <KMS_Objects_CreateNStoreBlobFromTemplates+0x10c>
                     pTemplate2[i].ulValueLen);
        offset += (pTemplate2[i].ulValueLen - 1UL) / 4UL;
      }
    }

    e_ret_status = KMS_PlatfObjects_AllocateAndStore(p_blob, phObject);
 8005ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f000 f8eb 	bl	8005d84 <KMS_PlatfObjects_AllocateAndStore>
    KMS_Free(hSession, p_blob);
 8005bae:	4639      	mov	r1, r7
    e_ret_status = KMS_PlatfObjects_AllocateAndStore(p_blob, phObject);
 8005bb0:	4604      	mov	r4, r0
    KMS_Free(hSession, p_blob);
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f7fe fec4 	bl	8004940 <KMS_Free>
  }

  return e_ret_status;
}
 8005bb8:	4620      	mov	r0, r4
 8005bba:	b003      	add	sp, #12
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	f023 0003 	bic.w	r0, r3, #3
                 + (((pTemplate1[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
 8005bc6:	f013 0303 	ands.w	r3, r3, #3
 8005bca:	bf18      	it	ne
 8005bcc:	2304      	movne	r3, #4
 8005bce:	4403      	add	r3, r0
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005bd0:	4498      	add	r8, r3
  for (uint32_t i = 0; i < ulCount1; i++)
 8005bd2:	320c      	adds	r2, #12
 8005bd4:	e79f      	b.n	8005b16 <KMS_Objects_CreateNStoreBlobFromTemplates+0x36>
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005bd6:	6893      	ldr	r3, [r2, #8]
 8005bd8:	f023 0003 	bic.w	r0, r3, #3
                   + (((pTemplate2[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
 8005bdc:	f013 0303 	ands.w	r3, r3, #3
 8005be0:	bf18      	it	ne
 8005be2:	2304      	movne	r3, #4
 8005be4:	4403      	add	r3, r0
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005be6:	4498      	add	r8, r3
    for (uint32_t i = 0; i < ulCount2; i++)
 8005be8:	320c      	adds	r2, #12
 8005bea:	e7a0      	b.n	8005b2e <KMS_Objects_CreateNStoreBlobFromTemplates+0x4e>
    if ((ulCount2 != 0UL) && (pTemplate2 != NULL_PTR))
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	d0da      	beq.n	8005ba6 <KMS_Objects_CreateNStoreBlobFromTemplates+0xc6>
 8005bf0:	9a00      	ldr	r2, [sp, #0]
 8005bf2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
      for (uint32_t i = 0; i < ulCount2; i++)
 8005bf6:	42b5      	cmp	r5, r6
 8005bf8:	f104 040c 	add.w	r4, r4, #12
 8005bfc:	d0d3      	beq.n	8005ba6 <KMS_Objects_CreateNStoreBlobFromTemplates+0xc6>
        ptr[(3UL * (i + ulCount1)) + offset] = pTemplate2[i].type;
 8005bfe:	1958      	adds	r0, r3, r5
 8005c00:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8005c04:	f84a 2020 	str.w	r2, [sl, r0, lsl #2]
        ptr[(3UL * (i + ulCount1)) + 1UL + offset] = pTemplate2[i].ulValueLen;
 8005c08:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8005c0c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005c10:	6051      	str	r1, [r2, #4]
        (void)memcpy((uint8_t *) & (ptr[(3UL * (i + ulCount1)) + 2UL + offset]), (uint8_t *)(pTemplate2[i].pValue),
 8005c12:	4610      	mov	r0, r2
 8005c14:	3008      	adds	r0, #8
 8005c16:	e954 1202 	ldrd	r1, r2, [r4, #-8]
        ptr[(3UL * (i + ulCount1)) + offset] = pTemplate2[i].type;
 8005c1a:	9300      	str	r3, [sp, #0]
        (void)memcpy((uint8_t *) & (ptr[(3UL * (i + ulCount1)) + 2UL + offset]), (uint8_t *)(pTemplate2[i].pValue),
 8005c1c:	f000 ff48 	bl	8006ab0 <memcpy>
        offset += (pTemplate2[i].ulValueLen - 1UL) / 4UL;
 8005c20:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	3a01      	subs	r2, #1
 8005c28:	eb03 0392 	add.w	r3, r3, r2, lsr #2
      for (uint32_t i = 0; i < ulCount2; i++)
 8005c2c:	3503      	adds	r5, #3
 8005c2e:	e7e2      	b.n	8005bf6 <KMS_Objects_CreateNStoreBlobFromTemplates+0x116>
    e_ret_status = CKR_DEVICE_MEMORY;
 8005c30:	2431      	movs	r4, #49	; 0x31
 8005c32:	e7c1      	b.n	8005bb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0xd8>
 8005c34:	b10b0240 	.word	0xb10b0240

08005c38 <KMS_Objects_CreateNStoreBlobForAES>:
                                         uint8_t *pKey,
                                         uint32_t keySize,
                                         CK_ATTRIBUTE_PTR pTemplate,
                                         CK_ULONG ulCount,
                                         CK_OBJECT_HANDLE_PTR phObject)
{
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	b08c      	sub	sp, #48	; 0x30
 8005c3e:	e9dd 9a14 	ldrd	r9, sl, [sp, #80]	; 0x50
 8005c42:	4606      	mov	r6, r0
 8005c44:	4614      	mov	r4, r2
 8005c46:	461f      	mov	r7, r3
   */
  CK_RV e_ret_status;
  CK_ATTRIBUTE template[3];
  uint32_t *trans_key;

  if ((pKey == NULL_PTR) || (keySize == 0UL) || (phObject == NULL_PTR)
 8005c48:	4688      	mov	r8, r1
 8005c4a:	b139      	cbz	r1, 8005c5c <KMS_Objects_CreateNStoreBlobForAES+0x24>
 8005c4c:	b132      	cbz	r2, 8005c5c <KMS_Objects_CreateNStoreBlobForAES+0x24>
 8005c4e:	f1ba 0f00 	cmp.w	sl, #0
 8005c52:	d003      	beq.n	8005c5c <KMS_Objects_CreateNStoreBlobForAES+0x24>
      || ((pTemplate == NULL_PTR) && (ulCount != 0UL))
 8005c54:	b923      	cbnz	r3, 8005c60 <KMS_Objects_CreateNStoreBlobForAES+0x28>
 8005c56:	f1b9 0f00 	cmp.w	r9, #0
 8005c5a:	d004      	beq.n	8005c66 <KMS_Objects_CreateNStoreBlobForAES+0x2e>
      || ((pTemplate != NULL_PTR) && (ulCount == 0UL)))
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
 8005c5c:	2407      	movs	r4, #7
 8005c5e:	e02a      	b.n	8005cb6 <KMS_Objects_CreateNStoreBlobForAES+0x7e>
      || ((pTemplate != NULL_PTR) && (ulCount == 0UL)))
 8005c60:	f1b9 0f00 	cmp.w	r9, #0
 8005c64:	d0fa      	beq.n	8005c5c <KMS_Objects_CreateNStoreBlobForAES+0x24>
  }
  else
  {
    trans_key = KMS_Alloc(hSession, keySize); /* AES keys shall be multiple of 4 length */
 8005c66:	4621      	mov	r1, r4
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7fe fe45 	bl	80048f8 <KMS_Alloc>
    if (trans_key == NULL_PTR)
 8005c6e:	4605      	mov	r5, r0
 8005c70:	b328      	cbz	r0, 8005cbe <KMS_Objects_CreateNStoreBlobForAES+0x86>
      e_ret_status = CKR_DEVICE_MEMORY;
    }
    else
    {
      /* Convert key from u8 to u32 */
      KMS_Objects_u8ptr_2_BlobU32(pKey, keySize, trans_key);
 8005c72:	4602      	mov	r2, r0
 8005c74:	4621      	mov	r1, r4
 8005c76:	4640      	mov	r0, r8
 8005c78:	f7ff fc8a 	bl	8005590 <KMS_Objects_u8ptr_2_BlobU32>
  pTemp->type = Type;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9303      	str	r3, [sp, #12]
  pTemp->pValue = pValue;
 8005c80:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <KMS_Objects_CreateNStoreBlobForAES+0x8c>)
 8005c82:	9304      	str	r3, [sp, #16]
  pTemp->type = Type;
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	2304      	movs	r3, #4
 8005c8a:	e9cd 3205 	strd	r3, r2, [sp, #20]
  pTemp->pValue = pValue;
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <KMS_Objects_CreateNStoreBlobForAES+0x90>)
  pTemp->ulValueLen = ulValueLen;
 8005c90:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c92:	e9cd 2307 	strd	r2, r3, [sp, #28]
  pTemp->type = Type;
 8005c96:	2311      	movs	r3, #17
  pTemp->pValue = pValue;
 8005c98:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
      fill_TLV(&(template[0]), CKA_CLASS, (void *)&vCKO_SECRET_KEY, sizeof(CK_OBJECT_CLASS));
      fill_TLV(&(template[1]), CKA_KEY_TYPE, (void *)&vCKK_AES, sizeof(CK_KEY_TYPE));
      fill_TLV(&(template[2]), CKA_VALUE, trans_key, keySize);

      /* Create and store blob object including additional user template */
      e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession,
 8005c9c:	a903      	add	r1, sp, #12
 8005c9e:	e9cd 9a00 	strd	r9, sl, [sp]
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7ff ff1a 	bl	8005ae0 <KMS_Objects_CreateNStoreBlobFromTemplates>
                                                               3,
                                                               pTemplate,
                                                               ulCount,
                                                               phObject);

      KMS_Free(hSession, trans_key);
 8005cac:	4629      	mov	r1, r5
      e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession,
 8005cae:	4604      	mov	r4, r0
      KMS_Free(hSession, trans_key);
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7fe fe45 	bl	8004940 <KMS_Free>
    }
  }
  return e_ret_status;
}
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	b00c      	add	sp, #48	; 0x30
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      e_ret_status = CKR_DEVICE_MEMORY;
 8005cbe:	2431      	movs	r4, #49	; 0x31
  return e_ret_status;
 8005cc0:	e7f9      	b.n	8005cb6 <KMS_Objects_CreateNStoreBlobForAES+0x7e>
 8005cc2:	bf00      	nop
 8005cc4:	20000c04 	.word	0x20000c04
 8005cc8:	20000c00 	.word	0x20000c00

08005ccc <KMS_PlatfObjects_NvmStaticObjectList>:
/**
  * @brief  Update @ref KMS_PlatfObjects_NvmStaticList with NVM contents
  * @retval None
  */
static void KMS_PlatfObjects_NvmStaticObjectList(void)
{
 8005ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cce:	4d0a      	ldr	r5, [pc, #40]	; (8005cf8 <KMS_PlatfObjects_NvmStaticObjectList+0x2c>)
 8005cd0:	2400      	movs	r4, #0
  /* Load the KMS_PlatfObjects_NvmStaticList[], used to store buffer to NVM  */
  /* This should save processing time  */
  for (uint32_t i = KMS_INDEX_MIN_NVM_STATIC_OBJECTS; i < KMS_INDEX_MAX_NVM_STATIC_OBJECTS; i++)
  {
    /* Read values from NVM */
    nvms_rv = NVMS_GET_DATA(i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, &nvms_data_size, (uint8_t **)(uint32_t)&p_nvms_data);
 8005cd2:	ab01      	add	r3, sp, #4
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4669      	mov	r1, sp
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7ff fa5d 	bl	8005198 <NVMS_GetDataWithType>

    if ((nvms_data_size != 0UL) && (nvms_rv == NVMS_NOERROR))
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	b10b      	cbz	r3, 8005ce6 <KMS_PlatfObjects_NvmStaticObjectList+0x1a>
 8005ce2:	b938      	cbnz	r0, 8005cf4 <KMS_PlatfObjects_NvmStaticObjectList+0x28>
    {
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = p_nvms_data;
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	f845 3b04 	str.w	r3, [r5], #4
  for (uint32_t i = KMS_INDEX_MIN_NVM_STATIC_OBJECTS; i < KMS_INDEX_MAX_NVM_STATIC_OBJECTS; i++)
 8005cea:	3401      	adds	r4, #1
 8005cec:	2c13      	cmp	r4, #19
 8005cee:	d1f0      	bne.n	8005cd2 <KMS_PlatfObjects_NvmStaticObjectList+0x6>
    else
    {
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
    }
  }
}
 8005cf0:	b003      	add	sp, #12
 8005cf2:	bd30      	pop	{r4, r5, pc}
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e7f6      	b.n	8005ce6 <KMS_PlatfObjects_NvmStaticObjectList+0x1a>
 8005cf8:	20000ef0 	.word	0x20000ef0

08005cfc <KMS_PlatfObjects_NvmDynamicObjectList>:
/**
  * @brief  Update @ref KMS_PlatfObjects_NvmDynamicList with NVM contents
  * @retval None
  */
static void KMS_PlatfObjects_NvmDynamicObjectList(void)
{
 8005cfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cfe:	4d0b      	ldr	r5, [pc, #44]	; (8005d2c <KMS_PlatfObjects_NvmDynamicObjectList+0x30>)
 8005d00:	2414      	movs	r4, #20
  /* Load the KMS_PlatfObjects_NvmDynamicList[], used to store buffer to NVM  */
  /* This should save processing time  */
  for (uint32_t i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
  {
    /* Read values from NVM */
    nvms_rv = NVMS_GET_DATA(i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, &nvms_data_size, (uint8_t **)(uint32_t)&p_nvms_data);
 8005d02:	2600      	movs	r6, #0
 8005d04:	ab01      	add	r3, sp, #4
 8005d06:	2200      	movs	r2, #0
 8005d08:	4669      	mov	r1, sp
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff fa44 	bl	8005198 <NVMS_GetDataWithType>

    if ((nvms_data_size != 0UL) && (nvms_rv == NVMS_NOERROR))
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	b14b      	cbz	r3, 8005d28 <KMS_PlatfObjects_NvmDynamicObjectList+0x2c>
 8005d14:	b940      	cbnz	r0, 8005d28 <KMS_PlatfObjects_NvmDynamicObjectList+0x2c>
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = p_nvms_data;
 8005d16:	9b01      	ldr	r3, [sp, #4]
 8005d18:	602b      	str	r3, [r5, #0]
  for (uint32_t i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
 8005d1a:	3401      	adds	r4, #1
 8005d1c:	2c28      	cmp	r4, #40	; 0x28
 8005d1e:	f105 0504 	add.w	r5, r5, #4
 8005d22:	d1ef      	bne.n	8005d04 <KMS_PlatfObjects_NvmDynamicObjectList+0x8>
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = NULL;
    }

  }
}
 8005d24:	b002      	add	sp, #8
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = NULL;
 8005d28:	602e      	str	r6, [r5, #0]
 8005d2a:	e7f6      	b.n	8005d1a <KMS_PlatfObjects_NvmDynamicObjectList+0x1e>
 8005d2c:	20000ea0 	.word	0x20000ea0

08005d30 <KMS_PlatfObjects_EmbeddedRange>:
  * @param  pMax Embedded objects max ID
  * @retval None
  */
void KMS_PlatfObjects_EmbeddedRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_EMBEDDED_OBJECTS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_EMBEDDED_OBJECTS;
 8005d34:	2314      	movs	r3, #20
 8005d36:	600b      	str	r3, [r1, #0]
}
 8005d38:	4770      	bx	lr
	...

08005d3c <KMS_PlatfObjects_EmbeddedObject>:
  * @retval Corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_EmbeddedObject(uint32_t hKey)
{
  return (kms_obj_keyhead_t *)(uint32_t)KMS_PlatfObjects_EmbeddedList[hKey - KMS_INDEX_MIN_EMBEDDED_OBJECTS];
}
 8005d3c:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <KMS_PlatfObjects_EmbeddedObject+0xc>)
  return (kms_obj_keyhead_t *)(uint32_t)KMS_PlatfObjects_EmbeddedList[hKey - KMS_INDEX_MIN_EMBEDDED_OBJECTS];
 8005d3e:	3801      	subs	r0, #1
}
 8005d40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	08006c34 	.word	0x08006c34

08005d4c <KMS_PlatfObjects_NvmStaticRange>:
  * @param  pMax NVM static objects max ID
  * @retval None
  */
void KMS_PlatfObjects_NvmStaticRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_NVM_STATIC_OBJECTS;
 8005d4c:	2315      	movs	r3, #21
 8005d4e:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_STATIC_OBJECTS;
 8005d50:	2328      	movs	r3, #40	; 0x28
 8005d52:	600b      	str	r3, [r1, #0]
}
 8005d54:	4770      	bx	lr
	...

08005d58 <KMS_PlatfObjects_NvmStaticObject>:
  * @retval Corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_NvmStaticObject(uint32_t hKey)
{
  return KMS_PlatfObjects_NvmStaticList[hKey - KMS_INDEX_MIN_NVM_STATIC_OBJECTS];
}
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <KMS_PlatfObjects_NvmStaticObject+0xc>)
  return KMS_PlatfObjects_NvmStaticList[hKey - KMS_INDEX_MIN_NVM_STATIC_OBJECTS];
 8005d5a:	3815      	subs	r0, #21
}
 8005d5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000ef0 	.word	0x20000ef0

08005d68 <KMS_PlatfObjects_NvmDynamicRange>:
  * @param  pMax NVM dynamic objects max ID
  * @retval None
  */
void KMS_PlatfObjects_NvmDynamicRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8005d68:	2329      	movs	r3, #41	; 0x29
 8005d6a:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS;
 8005d6c:	233c      	movs	r3, #60	; 0x3c
 8005d6e:	600b      	str	r3, [r1, #0]
}
 8005d70:	4770      	bx	lr
	...

08005d74 <KMS_PlatfObjects_NvmDynamicObject>:
  * @retval Corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_NvmDynamicObject(uint32_t hKey)
{
  return KMS_PlatfObjects_NvmDynamicList[hKey - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS];
}
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <KMS_PlatfObjects_NvmDynamicObject+0xc>)
  return KMS_PlatfObjects_NvmDynamicList[hKey - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS];
 8005d76:	3829      	subs	r0, #41	; 0x29
}
 8005d78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000ea0 	.word	0x20000ea0

08005d84 <KMS_PlatfObjects_AllocateAndStore>:
  *         CKR_DEVICE_MEMORY
  *         @ref KMS_PlatfObjects_NvmStoreObject returned values
  *         @ref KMS_PlatfObjects_VmStoreObject returned values
  */
CK_RV KMS_PlatfObjects_AllocateAndStore(kms_obj_keyhead_no_blob_t *pBlob, CK_OBJECT_HANDLE_PTR pObjId)
{
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4605      	mov	r5, r0
  CK_OBJECT_HANDLE Index;
  CK_RV e_ret_status;

  if ((pObjId == NULL_PTR) || (pBlob == NULL_PTR))
 8005d88:	460c      	mov	r4, r1
 8005d8a:	b1c1      	cbz	r1, 8005dbe <KMS_PlatfObjects_AllocateAndStore+0x3a>
 8005d8c:	b1b8      	cbz	r0, 8005dbe <KMS_PlatfObjects_AllocateAndStore+0x3a>
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  else
  {
    *pObjId = KMS_HANDLE_KEY_NOT_KNOWN;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4a0d      	ldr	r2, [pc, #52]	; (8005dc8 <KMS_PlatfObjects_AllocateAndStore+0x44>)
 8005d92:	600b      	str	r3, [r1, #0]
#ifdef KMS_NVM_DYNAMIC_ENABLED
    /* Find a Free place in nvm dynamic table */
    for (Index = 0; Index <= (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
    {
      if (KMS_PlatfObjects_NvmDynamicList[Index] == NULL)
 8005d94:	f852 1b04 	ldr.w	r1, [r2], #4
 8005d98:	b969      	cbnz	r1, 8005db6 <KMS_PlatfObjects_AllocateAndStore+0x32>
      {
        *pObjId = Index + KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8005d9a:	3329      	adds	r3, #41	; 0x29
 8005d9c:	6023      	str	r3, [r4, #0]
        *pObjId = Index + KMS_INDEX_MIN_VM_DYNAMIC_OBJECTS;
        break;
      }
    }
#endif /* KMS_VM_DYNAMIC_ENABLED */
    if (*pObjId == KMS_HANDLE_KEY_NOT_KNOWN)
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	b178      	cbz	r0, 8005dc2 <KMS_PlatfObjects_AllocateAndStore+0x3e>
    {
      /* Update object ID */
      pBlob->object_id = *pObjId;
#ifdef KMS_NVM_DYNAMIC_ENABLED
      /* Store in NVM storage */
      e_ret_status = KMS_PlatfObjects_NvmStoreObject(*pObjId,
 8005da2:	68aa      	ldr	r2, [r5, #8]
      pBlob->object_id = *pObjId;
 8005da4:	6128      	str	r0, [r5, #16]
      e_ret_status = KMS_PlatfObjects_NvmStoreObject(*pObjId,
 8005da6:	3214      	adds	r2, #20
 8005da8:	4629      	mov	r1, r5
 8005daa:	f000 f829 	bl	8005e00 <KMS_PlatfObjects_NvmStoreObject>
      e_ret_status = KMS_PlatfObjects_VmStoreObject(*pObjId,
                                                    (uint8_t *)pBlob,
                                                    pBlob->blobs_size + sizeof(kms_obj_keyhead_no_blob_t));
#endif /* KMS_VM_DYNAMIC_ENABLED */
      /* A Garbage collection generate a WARNING ==> Not an error */
      if (e_ret_status != CKR_OK)
 8005dae:	b108      	cbz	r0, 8005db4 <KMS_PlatfObjects_AllocateAndStore+0x30>
      {
        *pObjId = KMS_HANDLE_KEY_NOT_KNOWN;
 8005db0:	2300      	movs	r3, #0
 8005db2:	6023      	str	r3, [r4, #0]
      }
    }
  }
  return e_ret_status;
}
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
    for (Index = 0; Index <= (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
 8005db6:	3301      	adds	r3, #1
 8005db8:	2b14      	cmp	r3, #20
 8005dba:	d1eb      	bne.n	8005d94 <KMS_PlatfObjects_AllocateAndStore+0x10>
 8005dbc:	e7ef      	b.n	8005d9e <KMS_PlatfObjects_AllocateAndStore+0x1a>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8005dbe:	2007      	movs	r0, #7
 8005dc0:	e7f8      	b.n	8005db4 <KMS_PlatfObjects_AllocateAndStore+0x30>
      e_ret_status = CKR_DEVICE_MEMORY;
 8005dc2:	2031      	movs	r0, #49	; 0x31
  return e_ret_status;
 8005dc4:	e7f6      	b.n	8005db4 <KMS_PlatfObjects_AllocateAndStore+0x30>
 8005dc6:	bf00      	nop
 8005dc8:	20000ea0 	.word	0x20000ea0

08005dcc <KMS_PlatfObjects_Init>:
  * @brief  Initialize platform objects
  * @note   Initialize NVM / VM storage and fill "cache" buffers
  * @retval None
  */
void KMS_PlatfObjects_Init(void)
{
 8005dcc:	b510      	push	{r4, lr}
#ifdef KMS_NVM_ENABLED
  /* The NVMS_Init should be done only once */
  if (kms_platf_nvm_initialisation_done == 0UL)
 8005dce:	4c06      	ldr	r4, [pc, #24]	; (8005de8 <KMS_PlatfObjects_Init+0x1c>)
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	b91b      	cbnz	r3, 8005ddc <KMS_PlatfObjects_Init+0x10>
  {
    /* Initialize the NVMS */
    (void)NVMS_Init();
 8005dd4:	f7ff f82a 	bl	8004e2c <NVMS_Init>
    kms_platf_nvm_initialisation_done = 1UL;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	6023      	str	r3, [r4, #0]
  }

  KMS_PlatfObjects_NvmStaticObjectList();
 8005ddc:	f7ff ff76 	bl	8005ccc <KMS_PlatfObjects_NvmStaticObjectList>
    kms_platf_vm_initialisation_done = 1UL;
  }

  KMS_PlatfObjects_VmDynamicObjectList();
#endif /* KMS_VM_DYNAMIC_ENABLED */
}
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005de4:	f7ff bf8a 	b.w	8005cfc <KMS_PlatfObjects_NvmDynamicObjectList>
 8005de8:	20000f40 	.word	0x20000f40

08005dec <KMS_PlatfObjects_Finalize>:
/**
  * @brief  De-Initialize platform objects
  * @retval None
  */
void KMS_PlatfObjects_Finalize(void)
{
 8005dec:	b508      	push	{r3, lr}
#ifdef KMS_NVM_ENABLED
  /* Finalize the NVMS */
  NVMS_Deinit();
 8005dee:	f7ff f925 	bl	800503c <NVMS_Deinit>

  /* We must re-allow the call to NVMS_Init() */
  kms_platf_nvm_initialisation_done = 0UL;
 8005df2:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <KMS_PlatfObjects_Finalize+0x10>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
  VMS_Deinit();

  /* We must re-allow the call to VMS_Init() */
  kms_platf_vm_initialisation_done = 0UL;
#endif /* KMS_VM_DYNAMIC_ENABLED */
}
 8005df8:	bd08      	pop	{r3, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000f40 	.word	0x20000f40

08005e00 <KMS_PlatfObjects_NvmStoreObject>:
  * @param  ObjectSize Object size
  * @retval CKR_OK if storage is successful
  *         CKR_DEVICE_MEMORY otherwise
  */
CK_RV KMS_PlatfObjects_NvmStoreObject(uint32_t ObjectId, uint8_t *pObjectToAdd,  uint32_t ObjectSize)
{
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4604      	mov	r4, r0
  nvms_error_t  rv;
  CK_RV e_ret_status;

  /* It's a NVM STATIC object */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_STATIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS))
 8005e04:	3815      	subs	r0, #21
 8005e06:	2813      	cmp	r0, #19
{
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4611      	mov	r1, r2
  if ((ObjectId >= KMS_INDEX_MIN_NVM_STATIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS))
 8005e0c:	d80c      	bhi.n	8005e28 <KMS_PlatfObjects_NvmStoreObject+0x28>
  {
#ifdef KMS_NVM_DYNAMIC_ENABLED
    /* It's a NVM DYNAMIC object */
    if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
    {
      rv = NVMS_WRITE_DATA(ObjectId - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, ObjectSize, (const uint8_t *)pObjectToAdd);
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	f7ff f915 	bl	8005040 <NVMS_WriteDataWithType>
#else /* KMS_NVM_DYNAMIC_ENABLED */
    rv = NVMS_SLOT_INVALID;
#endif /* KMS_NVM_DYNAMIC_ENABLED */
  }
  /* A Garbage collection generate a WARNING ==> Not an error */
  if ((rv == NVMS_NOERROR) || (rv == NVMS_WARNING))
 8005e16:	f010 04fd 	ands.w	r4, r0, #253	; 0xfd
 8005e1a:	d108      	bne.n	8005e2e <KMS_PlatfObjects_NvmStoreObject+0x2e>
  {
    e_ret_status = CKR_DEVICE_MEMORY;
  }

  /* Refresh NVM lists */
  KMS_PlatfObjects_NvmStaticObjectList();
 8005e1c:	f7ff ff56 	bl	8005ccc <KMS_PlatfObjects_NvmStaticObjectList>
#ifdef KMS_NVM_DYNAMIC_ENABLED
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005e20:	f7ff ff6c 	bl	8005cfc <KMS_PlatfObjects_NvmDynamicObjectList>
#endif /* KMS_NVM_DYNAMIC_ENABLED */

  return e_ret_status;
}
 8005e24:	4620      	mov	r0, r4
 8005e26:	bd10      	pop	{r4, pc}
    if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005e28:	3c29      	subs	r4, #41	; 0x29
 8005e2a:	2c13      	cmp	r4, #19
 8005e2c:	d9ef      	bls.n	8005e0e <KMS_PlatfObjects_NvmStoreObject+0xe>
    e_ret_status = CKR_DEVICE_MEMORY;
 8005e2e:	2431      	movs	r4, #49	; 0x31
 8005e30:	e7f4      	b.n	8005e1c <KMS_PlatfObjects_NvmStoreObject+0x1c>

08005e32 <KMS_PlatfObjects_NvmRemoveObject>:
{
  nvms_error_t rv = NVMS_DATA_NOT_FOUND;
  CK_RV e_ret_status;

  /* Check that the ObjectID is in dynamic range */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005e32:	f1a0 0329 	sub.w	r3, r0, #41	; 0x29
 8005e36:	2b13      	cmp	r3, #19
{
 8005e38:	b510      	push	{r4, lr}
  if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005e3a:	d805      	bhi.n	8005e48 <KMS_PlatfObjects_NvmRemoveObject+0x16>
  {
    rv = NVMS_EraseData(ObjectId - KMS_INDEX_MIN_NVM_STATIC_OBJECTS);
 8005e3c:	3815      	subs	r0, #21
 8005e3e:	f7ff f95d 	bl	80050fc <NVMS_EraseData>
  }
  /* A Garbage collection generate a WARNING ==> Not an error */
  if ((rv == NVMS_NOERROR) || (rv == NVMS_WARNING))
 8005e42:	f010 04fd 	ands.w	r4, r0, #253	; 0xfd
 8005e46:	d000      	beq.n	8005e4a <KMS_PlatfObjects_NvmRemoveObject+0x18>
  {
    e_ret_status = CKR_OK;
  }
  else
  {
    e_ret_status = CKR_DEVICE_MEMORY;
 8005e48:	2431      	movs	r4, #49	; 0x31
  }

  /* Refresh NVM lists */
  KMS_PlatfObjects_NvmStaticObjectList();
 8005e4a:	f7ff ff3f 	bl	8005ccc <KMS_PlatfObjects_NvmStaticObjectList>
#ifdef KMS_NVM_DYNAMIC_ENABLED
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005e4e:	f7ff ff55 	bl	8005cfc <KMS_PlatfObjects_NvmDynamicObjectList>
#endif /* KMS_NVM_DYNAMIC_ENABLED */

  return e_ret_status;
}
 8005e52:	4620      	mov	r0, r4
 8005e54:	bd10      	pop	{r4, pc}

08005e56 <KMS_PlatfObjects_GetBlobVerifyKey>:
  * @retval Key handle
  */
CK_ULONG KMS_PlatfObjects_GetBlobVerifyKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_VERIFY;
}
 8005e56:	2001      	movs	r0, #1
 8005e58:	4770      	bx	lr

08005e5a <KMS_PlatfObjects_GetBlobDecryptKey>:
  * @retval Key handle
  */
CK_ULONG KMS_PlatfObjects_GetBlobDecryptKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_DECRYPT;
}
 8005e5a:	2002      	movs	r0, #2
 8005e5c:	4770      	bx	lr
	...

08005e60 <sign_verify_init.part.0>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OBJECT_HANDLE_INVALID
  *         CKR_SESSION_HANDLE_INVALID
  *         @ref KMS_Objects_SearchAttributes returned values
  */
CK_RV     sign_verify_init(CK_SESSION_HANDLE hSession,
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8005e64:	4f62      	ldr	r7, [pc, #392]	; (8005ff0 <sign_verify_init.part.0+0x190>)
CK_RV     sign_verify_init(CK_SESSION_HANDLE hSession,
 8005e66:	469b      	mov	fp, r3
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8005e68:	f100 3aff 	add.w	sl, r0, #4294967295
 8005e6c:	2324      	movs	r3, #36	; 0x24
 8005e6e:	fb03 730a 	mla	r3, r3, sl, r7
CK_RV     sign_verify_init(CK_SESSION_HANDLE hSession,
 8005e72:	b085      	sub	sp, #20
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8005e74:	68dc      	ldr	r4, [r3, #12]
CK_RV     sign_verify_init(CK_SESSION_HANDLE hSession,
 8005e76:	4606      	mov	r6, r0
 8005e78:	4688      	mov	r8, r1
 8005e7a:	4691      	mov	r9, r2
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	f040 80a2 	bne.w	8005fc6 <sign_verify_init.part.0+0x166>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Check that we support the expected mechanism  */
  if (pMechanism == NULL_PTR)
 8005e82:	2900      	cmp	r1, #0
 8005e84:	f000 809b 	beq.w	8005fbe <sign_verify_init.part.0+0x15e>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 8005e88:	680b      	ldr	r3, [r1, #0]
 8005e8a:	f241 0244 	movw	r2, #4164	; 0x1044
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d06c      	beq.n	8005f6c <sign_verify_init.part.0+0x10c>
 8005e92:	d805      	bhi.n	8005ea0 <sign_verify_init.part.0+0x40>
 8005e94:	f241 0241 	movw	r2, #4161	; 0x1041
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d067      	beq.n	8005f6c <sign_verify_init.part.0+0x10c>
 8005e9c:	2470      	movs	r4, #112	; 0x70
 8005e9e:	e082      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
 8005ea0:	f5a3 5384 	sub.w	r3, r3, #4224	; 0x1080
 8005ea4:	3b0a      	subs	r3, #10
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d8f8      	bhi.n	8005e9c <sign_verify_init.part.0+0x3c>
      kms_attr_t *P_pKeyAttribute;
      kms_aes_cmac_sv_ctx_t *p_ctx;

      /* Read the key value from the Key Handle                 */
      /* Key Handle is the index to one of static or nvm        */
      pkms_object = KMS_Objects_GetPointer(hKey);
 8005eaa:	4648      	mov	r0, r9
 8005eac:	f7ff fa62 	bl	8005374 <KMS_Objects_GetPointer>

      /* Check that hKey is valid:
       * - NULL_PTR value means not found key handle
       * - KMS_ABI_VERSION_CK_2_40 & KMS_ABI_CONFIG_KEYHEAD are magic in header of the key
       */
      if ((pkms_object != NULL) &&
 8005eb0:	4601      	mov	r1, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	f000 8089 	beq.w	8005fca <sign_verify_init.part.0+0x16a>
 8005eb8:	6802      	ldr	r2, [r0, #0]
 8005eba:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <sign_verify_init.part.0+0x194>)
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	f040 8084 	bne.w	8005fca <sign_verify_init.part.0+0x16a>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8005ec2:	6842      	ldr	r2, [r0, #4]
 8005ec4:	f46f 700f 	mvn.w	r0, #572	; 0x23c
 8005ec8:	4403      	add	r3, r0
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d17d      	bne.n	8005fca <sign_verify_init.part.0+0x16a>
          (pkms_object->configuration == KMS_ABI_CONFIG_KEYHEAD))
      {
        /* Search for the Key Value to use */
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8005ece:	aa03      	add	r2, sp, #12
 8005ed0:	2011      	movs	r0, #17
 8005ed2:	f7ff fad7 	bl	8005484 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d164      	bne.n	8005fa6 <sign_verify_init.part.0+0x146>
        {
          /* Set key size with value from attribute  */
          if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f023 0208 	bic.w	r2, r3, #8
 8005ee4:	2a10      	cmp	r2, #16
 8005ee6:	d001      	beq.n	8005eec <sign_verify_init.part.0+0x8c>
              (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d168      	bne.n	8005fbe <sign_verify_init.part.0+0x15e>
              (P_pKeyAttribute->size == CA_CRL_AES256_KEY))       /* 256 bits */
          {
            /* Allocate context */
            p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_cmac_sv_ctx_t));
 8005eec:	2178      	movs	r1, #120	; 0x78
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7fe fd02 	bl	80048f8 <KMS_Alloc>
            if (p_ctx == NULL_PTR)
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d069      	beq.n	8005fce <sign_verify_init.part.0+0x16e>
              e_ret_status = CKR_DEVICE_MEMORY;
              break;
            }
            /* Store information in session structure for later use */
            KMS_GETSESSION(hSession).hKey = hKey;
            KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8005efa:	f8d8 2000 	ldr.w	r2, [r8]
            KMS_GETSESSION(hSession).hKey = hKey;
 8005efe:	2324      	movs	r3, #36	; 0x24
 8005f00:	fb03 730a 	mla	r3, r3, sl, r7
            KMS_GETSESSION(hSession).pCtx = p_ctx;

            /* Check parameters & retrieve tag length to compute */
            if ((pMechanism->mechanism == CKM_AES_CMAC_GENERAL)
 8005f04:	f241 018b 	movw	r1, #4235	; 0x108b
 8005f08:	428a      	cmp	r2, r1
            KMS_GETSESSION(hSession).hKey = hKey;
 8005f0a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
            KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8005f0e:	621a      	str	r2, [r3, #32]
            KMS_GETSESSION(hSession).pCtx = p_ctx;
 8005f10:	6298      	str	r0, [r3, #40]	; 0x28
            if ((pMechanism->mechanism == CKM_AES_CMAC_GENERAL)
 8005f12:	d156      	bne.n	8005fc2 <sign_verify_init.part.0+0x162>
                && (pMechanism->pParameter != NULL_PTR))
 8005f14:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8005f18:	f1b8 0f00 	cmp.w	r8, #0
 8005f1c:	d047      	beq.n	8005fae <sign_verify_init.part.0+0x14e>
            {
              /* Tag length is specified by the parameter */
              p_ctx->tagLength = *(CK_ULONG_PTR)pMechanism->pParameter;
 8005f1e:	f8d8 3000 	ldr.w	r3, [r8]

            /* Set flag field to default value */
            p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;

            /* Set key size  */
            p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8005f22:	9803      	ldr	r0, [sp, #12]
              p_ctx->tagLength = CA_CRL_AES_BLOCK;
 8005f24:	632b      	str	r3, [r5, #48]	; 0x30
            p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8005f26:	f04f 0800 	mov.w	r8, #0
 8005f2a:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
            p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8005f2e:	6841      	ldr	r1, [r0, #4]
 8005f30:	65a9      	str	r1, [r5, #88]	; 0x58
            /* Read value from the structure. Need to be translated from
              (uint32_t*) to (uint8_t *) */
            KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8005f32:	3008      	adds	r0, #8
 8005f34:	462a      	mov	r2, r5
 8005f36:	f7ff fb60 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
            /* Fill in crypto library context parameters */
            p_ctx->ca_ctx.pmKey = p_ctx->key;
            p_ctx->ca_ctx.mTagSize = (int32_t)p_ctx->tagLength;
 8005f3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005f3c:	666b      	str	r3, [r5, #100]	; 0x64
            p_ctx->ca_ctx.pmTag = p_ctx->tag;
 8005f3e:	f105 0320 	add.w	r3, r5, #32
            p_ctx->ca_ctx.pmKey = p_ctx->key;
 8005f42:	63ed      	str	r5, [r5, #60]	; 0x3c
            p_ctx->ca_ctx.pmTag = p_ctx->tag;
 8005f44:	662b      	str	r3, [r5, #96]	; 0x60

            /* Initialize the operation, by passing the context */
#if (KMS_AES_CMAC & KMS_FCT_SIGN)
            if (sigver_flag == KMS_FLAG_SIGN)
 8005f46:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005f4a:	f1bb 0f00 	cmp.w	fp, #0
 8005f4e:	d140      	bne.n	8005fd2 <sign_verify_init.part.0+0x172>
            {
              if (CA_AES_CMAC_Encrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 8005f50:	f7fc f9ea 	bl	8002328 <CA_AES_CMAC_Encrypt_Init>
 8005f54:	b338      	cbz	r0, 8005fa6 <sign_verify_init.part.0+0x146>
                e_ret_status = CKR_OK;
              }
              else
              {
                /* Free allocated context before returning error */
                KMS_Free(hSession, p_ctx);
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7fe fcf1 	bl	8004940 <KMS_Free>
                KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8005f5e:	2324      	movs	r3, #36	; 0x24
 8005f60:	fb03 770a 	mla	r7, r3, sl, r7
 8005f64:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
              else
              {
                /* Free allocated context before returning error */
                KMS_Free(hSession, p_ctx);
                KMS_GETSESSION(hSession).pCtx = NULL_PTR;
                e_ret_status = CKR_FUNCTION_FAILED;
 8005f68:	2406      	movs	r4, #6
 8005f6a:	e01c      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
      pkms_object = KMS_Objects_GetPointer(hKey);
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	f7ff fa01 	bl	8005374 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL) &&
 8005f72:	b350      	cbz	r0, 8005fca <sign_verify_init.part.0+0x16a>
 8005f74:	6802      	ldr	r2, [r0, #0]
 8005f76:	4b1f      	ldr	r3, [pc, #124]	; (8005ff4 <sign_verify_init.part.0+0x194>)
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d126      	bne.n	8005fca <sign_verify_init.part.0+0x16a>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8005f7c:	6842      	ldr	r2, [r0, #4]
 8005f7e:	f46f 750f 	mvn.w	r5, #572	; 0x23c
 8005f82:	442b      	add	r3, r5
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d120      	bne.n	8005fca <sign_verify_init.part.0+0x16a>
        p_ctx = KMS_Alloc(hSession, sizeof(kms_ecdsa_sv_ctx_t));
 8005f88:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7fe fcb3 	bl	80048f8 <KMS_Alloc>
        if (p_ctx == NULL_PTR)
 8005f92:	b1e0      	cbz	r0, 8005fce <sign_verify_init.part.0+0x16e>
        KMS_GETSESSION(hSession).hKey = hKey;
 8005f94:	2324      	movs	r3, #36	; 0x24
 8005f96:	fb03 770a 	mla	r7, r3, sl, r7
        KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8005f9a:	f8d8 3000 	ldr.w	r3, [r8]
        KMS_GETSESSION(hSession).hKey = hKey;
 8005f9e:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
        KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8005fa2:	623b      	str	r3, [r7, #32]
        KMS_GETSESSION(hSession).pCtx = p_ctx;
 8005fa4:	62b8      	str	r0, [r7, #40]	; 0x28
    default:
      break;
  }

  return e_ret_status;
}
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	b005      	add	sp, #20
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              KMS_Free(hSession, p_ctx);
 8005fae:	4601      	mov	r1, r0
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	f7fe fcc4 	bl	8004940 <KMS_Free>
              KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
    return CKR_ARGUMENTS_BAD;
 8005fbe:	2407      	movs	r4, #7
 8005fc0:	e7f1      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
              p_ctx->tagLength = CA_CRL_AES_BLOCK;
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	e7ad      	b.n	8005f22 <sign_verify_init.part.0+0xc2>
    return CKR_SESSION_HANDLE_INVALID;
 8005fc6:	24b3      	movs	r4, #179	; 0xb3
 8005fc8:	e7ed      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8005fca:	2482      	movs	r4, #130	; 0x82
 8005fcc:	e7eb      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
          e_ret_status = CKR_DEVICE_MEMORY;
 8005fce:	2431      	movs	r4, #49	; 0x31
 8005fd0:	e7e9      	b.n	8005fa6 <sign_verify_init.part.0+0x146>
              if (CA_AES_CMAC_Decrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 8005fd2:	f7fc f9ec 	bl	80023ae <CA_AES_CMAC_Decrypt_Init>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d0e5      	beq.n	8005fa6 <sign_verify_init.part.0+0x146>
                KMS_Free(hSession, p_ctx);
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7fe fcaf 	bl	8004940 <KMS_Free>
                KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8005fe2:	2324      	movs	r3, #36	; 0x24
 8005fe4:	fb03 770a 	mla	r7, r3, sl, r7
 8005fe8:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
 8005fec:	e7bc      	b.n	8005f68 <sign_verify_init.part.0+0x108>
 8005fee:	bf00      	nop
 8005ff0:	20000c48 	.word	0x20000c48
 8005ff4:	b10b0240 	.word	0xb10b0240

08005ff8 <KMS_SignInit>:
  *         @ref sign_verify_init returned values
  */
CK_RV     KMS_SignInit(CK_SESSION_HANDLE hSession,
                       CK_MECHANISM_PTR  pMechanism,
                       CK_OBJECT_HANDLE  hKey)
{
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!KMS_IS_INITIALIZED())
 8005ffa:	4e0e      	ldr	r6, [pc, #56]	; (8006034 <KMS_SignInit+0x3c>)
 8005ffc:	7833      	ldrb	r3, [r6, #0]
{
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	4617      	mov	r7, r2
  if (!KMS_IS_INITIALIZED())
 8006004:	b183      	cbz	r3, 8006028 <KMS_SignInit+0x30>
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8006006:	f7fe faf1 	bl	80045ec <KMS_CheckSessionHdle>
 800600a:	4603      	mov	r3, r0
 800600c:	b978      	cbnz	r0, 800602e <KMS_SignInit+0x36>
 800600e:	463a      	mov	r2, r7
 8006010:	4629      	mov	r1, r5
 8006012:	4620      	mov	r0, r4
 8006014:	f7ff ff24 	bl	8005e60 <sign_verify_init.part.0>
#if defined(KMS_SIGN)
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_SIGN);

  if (e_ret_status == CKR_OK)
 8006018:	b928      	cbnz	r0, 8006026 <KMS_SignInit+0x2e>
  {
    /* If successful, set processing state of the session */
    KMS_GETSESSION(hSession).state = KMS_SESSION_SIGN;
 800601a:	2324      	movs	r3, #36	; 0x24
 800601c:	3c01      	subs	r4, #1
 800601e:	fb03 6404 	mla	r4, r3, r4, r6
 8006022:	2304      	movs	r3, #4
 8006024:	60e3      	str	r3, [r4, #12]

  return e_ret_status;
#else /* KMS_SIGN */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SIGN */
}
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8006028:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800602c:	e7fb      	b.n	8006026 <KMS_SignInit+0x2e>
    return CKR_SESSION_HANDLE_INVALID;
 800602e:	20b3      	movs	r0, #179	; 0xb3
  return e_ret_status;
 8006030:	e7f9      	b.n	8006026 <KMS_SignInit+0x2e>
 8006032:	bf00      	nop
 8006034:	20000c48 	.word	0x20000c48

08006038 <KMS_Sign>:
CK_RV     KMS_Sign(CK_SESSION_HANDLE hSession,         /* the session's handle */
                   CK_BYTE_PTR       pData,           /* the data to sign */
                   CK_ULONG          ulDataLen,       /* count of bytes to sign */
                   CK_BYTE_PTR       pSignature,      /* gets the signature */
                   CK_ULONG_PTR      pulSignatureLen)  /* gets signature length */
{
 8006038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_SIGN)
  CK_RV e_ret_status = CKR_OK;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 800603c:	4d2f      	ldr	r5, [pc, #188]	; (80060fc <KMS_Sign+0xc4>)
{
 800603e:	4699      	mov	r9, r3
  if (!KMS_IS_INITIALIZED())
 8006040:	782b      	ldrb	r3, [r5, #0]
{
 8006042:	4607      	mov	r7, r0
 8006044:	468a      	mov	sl, r1
 8006046:	4693      	mov	fp, r2
 8006048:	46a8      	mov	r8, r5
  if (!KMS_IS_INITIALIZED())
 800604a:	2b00      	cmp	r3, #0
 800604c:	d04e      	beq.n	80060ec <KMS_Sign+0xb4>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800604e:	f7fe facd 	bl	80045ec <KMS_CheckSessionHdle>
 8006052:	4604      	mov	r4, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	d14c      	bne.n	80060f2 <KMS_Sign+0xba>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SIGN)
 8006058:	1e7e      	subs	r6, r7, #1
 800605a:	2524      	movs	r5, #36	; 0x24
 800605c:	fb05 8506 	mla	r5, r5, r6, r8
 8006060:	68eb      	ldr	r3, [r5, #12]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d147      	bne.n	80060f6 <KMS_Sign+0xbe>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  /* If a digest has to be computed */
  switch (KMS_GETSESSION(hSession).Mechanism)
 8006066:	6a2b      	ldr	r3, [r5, #32]
 8006068:	f5a3 5384 	sub.w	r3, r3, #4224	; 0x1080
 800606c:	3b0a      	subs	r3, #10
 800606e:	2b01      	cmp	r3, #1
 8006070:	d911      	bls.n	8006096 <KMS_Sign+0x5e>
    }
#endif /* KMS_AES_CMAC & KMS_FCT_SIGN */

    default:
    {
      e_ret_status = CKR_MECHANISM_INVALID;
 8006072:	2470      	movs	r4, #112	; 0x70

  /* Upon completion error or not:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006074:	2524      	movs	r5, #36	; 0x24
 8006076:	fb05 8506 	mla	r5, r5, r6, r8
 800607a:	2600      	movs	r6, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800607c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800607e:	626e      	str	r6, [r5, #36]	; 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8006080:	b119      	cbz	r1, 800608a <KMS_Sign+0x52>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8006082:	4638      	mov	r0, r7
 8006084:	f7fe fc5c 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8006088:	62ae      	str	r6, [r5, #40]	; 0x28
  }

  KMS_SetStateIdle(hSession);
 800608a:	4638      	mov	r0, r7
 800608c:	f7fe fae4 	bl	8004658 <KMS_SetStateIdle>

  return e_ret_status;
#else /* KMS_SIGN */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SIGN */
}
 8006090:	4620      	mov	r0, r4
 8006092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pkms_object = KMS_Objects_GetPointer(KMS_GETSESSION(hSession).hKey);
 8006096:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006098:	f7ff f96c 	bl	8005374 <KMS_Objects_GetPointer>
    if ((pkms_object != NULL) &&
 800609c:	b320      	cbz	r0, 80060e8 <KMS_Sign+0xb0>
 800609e:	6803      	ldr	r3, [r0, #0]
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <KMS_Sign+0xc8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d120      	bne.n	80060e8 <KMS_Sign+0xb0>
        (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80060a6:	6842      	ldr	r2, [r0, #4]
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <KMS_Sign+0xcc>)
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d11c      	bne.n	80060e8 <KMS_Sign+0xb0>
      switch (KMS_GETSESSION(hSession).Mechanism)
 80060ae:	6a2b      	ldr	r3, [r5, #32]
 80060b0:	f5a3 5384 	sub.w	r3, r3, #4224	; 0x1080
 80060b4:	3b0a      	subs	r3, #10
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d8db      	bhi.n	8006072 <KMS_Sign+0x3a>
          kms_aes_cmac_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80060ba:	6aad      	ldr	r5, [r5, #40]	; 0x28
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 80060bc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
          if (CA_AES_CMAC_Encrypt_Append(&(p_ctx->ca_ctx),
 80060c8:	3534      	adds	r5, #52	; 0x34
 80060ca:	465a      	mov	r2, fp
 80060cc:	4651      	mov	r1, sl
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7fc f940 	bl	8002354 <CA_AES_CMAC_Encrypt_Append>
 80060d4:	b930      	cbnz	r0, 80060e4 <KMS_Sign+0xac>
            if (CA_AES_CMAC_Encrypt_Finish(&(p_ctx->ca_ctx),
 80060d6:	aa0a      	add	r2, sp, #40	; 0x28
 80060d8:	4649      	mov	r1, r9
 80060da:	4628      	mov	r0, r5
 80060dc:	f7fc f954 	bl	8002388 <CA_AES_CMAC_Encrypt_Finish>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d0c7      	beq.n	8006074 <KMS_Sign+0x3c>
              e_ret_status = CKR_FUNCTION_FAILED;
 80060e4:	2406      	movs	r4, #6
 80060e6:	e7c5      	b.n	8006074 <KMS_Sign+0x3c>
      e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 80060e8:	2482      	movs	r4, #130	; 0x82
 80060ea:	e7c3      	b.n	8006074 <KMS_Sign+0x3c>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80060ec:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80060f0:	e7ce      	b.n	8006090 <KMS_Sign+0x58>
    return CKR_SESSION_HANDLE_INVALID;
 80060f2:	24b3      	movs	r4, #179	; 0xb3
 80060f4:	e7cc      	b.n	8006090 <KMS_Sign+0x58>
    return CKR_OPERATION_NOT_INITIALIZED;
 80060f6:	2491      	movs	r4, #145	; 0x91
 80060f8:	e7ca      	b.n	8006090 <KMS_Sign+0x58>
 80060fa:	bf00      	nop
 80060fc:	20000c48 	.word	0x20000c48
 8006100:	b10b0240 	.word	0xb10b0240
 8006104:	b10b0003 	.word	0xb10b0003

08006108 <KMS_VerifyInit>:
  *         @ref sign_verify_init returned values
  */
CK_RV        KMS_VerifyInit(CK_SESSION_HANDLE hSession,
                            CK_MECHANISM_PTR  pMechanism,
                            CK_OBJECT_HANDLE  hKey)
{
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!KMS_IS_INITIALIZED())
 800610a:	4f0e      	ldr	r7, [pc, #56]	; (8006144 <KMS_VerifyInit+0x3c>)
 800610c:	783b      	ldrb	r3, [r7, #0]
{
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	4616      	mov	r6, r2
  if (!KMS_IS_INITIALIZED())
 8006114:	b183      	cbz	r3, 8006138 <KMS_VerifyInit+0x30>
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8006116:	f7fe fa69 	bl	80045ec <KMS_CheckSessionHdle>
 800611a:	b980      	cbnz	r0, 800613e <KMS_VerifyInit+0x36>
 800611c:	2301      	movs	r3, #1
 800611e:	4632      	mov	r2, r6
 8006120:	4629      	mov	r1, r5
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff fe9c 	bl	8005e60 <sign_verify_init.part.0>
#if defined(KMS_VERIFY)
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_VERIFY);

  if (e_ret_status == CKR_OK)
 8006128:	b928      	cbnz	r0, 8006136 <KMS_VerifyInit+0x2e>
  {
    /* If successful, set processing state of the session */
    KMS_GETSESSION(hSession).state = KMS_SESSION_VERIFY;
 800612a:	2324      	movs	r3, #36	; 0x24
 800612c:	3c01      	subs	r4, #1
 800612e:	fb03 7404 	mla	r4, r3, r4, r7
 8006132:	2305      	movs	r3, #5
 8006134:	60e3      	str	r3, [r4, #12]

  return e_ret_status;
#else /* KMS_VERIFY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_VERIFY */
}
 8006136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8006138:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800613c:	e7fb      	b.n	8006136 <KMS_VerifyInit+0x2e>
    return CKR_SESSION_HANDLE_INVALID;
 800613e:	20b3      	movs	r0, #179	; 0xb3
  return e_ret_status;
 8006140:	e7f9      	b.n	8006136 <KMS_VerifyInit+0x2e>
 8006142:	bf00      	nop
 8006144:	20000c48 	.word	0x20000c48

08006148 <KMS_Verify>:
                  CK_BYTE_PTR       pData,           /* signed data */
                  CK_ULONG          ulDataLen,       /* length of signed data */
                  CK_BYTE_PTR       pSignature,      /* signature */
                  CK_ULONG          ulSignatureLen)  /* signature length */

{
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_VERIFY)
  CK_RV    e_ret_status ;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 800614c:	4eb2      	ldr	r6, [pc, #712]	; (8006418 <KMS_Verify+0x2d0>)
{
 800614e:	4699      	mov	r9, r3
  if (!KMS_IS_INITIALIZED())
 8006150:	7833      	ldrb	r3, [r6, #0]
{
 8006152:	b0ab      	sub	sp, #172	; 0xac
 8006154:	4682      	mov	sl, r0
 8006156:	460d      	mov	r5, r1
 8006158:	4617      	mov	r7, r2
  if (!KMS_IS_INITIALIZED())
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8155 	beq.w	800640a <KMS_Verify+0x2c2>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8006160:	f7fe fa44 	bl	80045ec <KMS_CheckSessionHdle>
 8006164:	4604      	mov	r4, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	f040 8152 	bne.w	8006410 <KMS_Verify+0x2c8>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_VERIFY)
 800616c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006170:	2224      	movs	r2, #36	; 0x24
 8006172:	fb02 6203 	mla	r2, r2, r3, r6
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	68d3      	ldr	r3, [r2, #12]
 800617a:	2b05      	cmp	r3, #5
 800617c:	f040 814a 	bne.w	8006414 <KMS_Verify+0x2cc>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  /* If a digest has to be computed */
  switch (KMS_GETSESSION(hSession).Mechanism)
 8006180:	6a13      	ldr	r3, [r2, #32]
 8006182:	f241 0144 	movw	r1, #4164	; 0x1044
 8006186:	428b      	cmp	r3, r1
 8006188:	f000 80f2 	beq.w	8006370 <KMS_Verify+0x228>
 800618c:	d806      	bhi.n	800619c <KMS_Verify+0x54>
 800618e:	f241 0141 	movw	r1, #4161	; 0x1041
 8006192:	428b      	cmp	r3, r1
 8006194:	f000 80d9 	beq.w	800634a <KMS_Verify+0x202>
          /* Encrypt Data */
          if (CA_AES_CMAC_Decrypt_Append(&(p_ctx->ca_ctx),
                                         pData,
                                         (int32_t)ulDataLen) != CA_HASH_SUCCESS)
          {
            e_ret_status = CKR_FUNCTION_FAILED;
 8006198:	2406      	movs	r4, #6
 800619a:	e0c3      	b.n	8006324 <KMS_Verify+0x1dc>
  switch (KMS_GETSESSION(hSession).Mechanism)
 800619c:	f5a3 5384 	sub.w	r3, r3, #4224	; 0x1080
 80061a0:	3b0a      	subs	r3, #10
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d8f8      	bhi.n	8006198 <KMS_Verify+0x50>
    pkms_object = KMS_Objects_GetPointer(KMS_GETSESSION(hSession).hKey);
 80061a6:	9b02      	ldr	r3, [sp, #8]
 80061a8:	f04f 0824 	mov.w	r8, #36	; 0x24
 80061ac:	fb08 6803 	mla	r8, r8, r3, r6
 80061b0:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 80061b4:	f7ff f8de 	bl	8005374 <KMS_Objects_GetPointer>
    if ((pkms_object != NULL) &&
 80061b8:	4683      	mov	fp, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f000 8123 	beq.w	8006406 <KMS_Verify+0x2be>
 80061c0:	6802      	ldr	r2, [r0, #0]
 80061c2:	4b96      	ldr	r3, [pc, #600]	; (800641c <KMS_Verify+0x2d4>)
 80061c4:	429a      	cmp	r2, r3
 80061c6:	f040 811e 	bne.w	8006406 <KMS_Verify+0x2be>
        (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80061ca:	6842      	ldr	r2, [r0, #4]
 80061cc:	f46f 710f 	mvn.w	r1, #572	; 0x23c
 80061d0:	440b      	add	r3, r1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	f040 8117 	bne.w	8006406 <KMS_Verify+0x2be>
      switch (KMS_GETSESSION(hSession).Mechanism)
 80061d8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80061dc:	f241 0244 	movw	r2, #4164	; 0x1044
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d005      	beq.n	80061f0 <KMS_Verify+0xa8>
 80061e4:	f200 80e5 	bhi.w	80063b2 <KMS_Verify+0x26a>
 80061e8:	f241 0241 	movw	r2, #4161	; 0x1041
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d1d3      	bne.n	8006198 <KMS_Verify+0x50>
          kms_ecdsa_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80061f0:	9a02      	ldr	r2, [sp, #8]
 80061f2:	2324      	movs	r3, #36	; 0x24
 80061f4:	fb03 6302 	mla	r3, r3, r2, r6
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 80061f8:	4659      	mov	r1, fp
          kms_ecdsa_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80061fa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 80061fc:	aa05      	add	r2, sp, #20
          CA_ECpoint_stt *PubKey = NULL;
 80061fe:	2300      	movs	r3, #0
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 8006200:	f44f 70c0 	mov.w	r0, #384	; 0x180
          CA_ECDSAsignature_stt *p_sign = NULL;
 8006204:	e9cd 3306 	strd	r3, r3, [sp, #24]
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 8006208:	f7ff f93c 	bl	8005484 <KMS_Objects_SearchAttributes>
          if (e_ret_status != CKR_OK)
 800620c:	2800      	cmp	r0, #0
 800620e:	d1c3      	bne.n	8006198 <KMS_Verify+0x50>
          e_ret_status = KMS_ECC_LoadCurve(pAttr, &EC_st);
 8006210:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006214:	9805      	ldr	r0, [sp, #20]
 8006216:	4641      	mov	r1, r8
 8006218:	f7fd f8a0 	bl	800335c <KMS_ECC_LoadCurve>
          if (e_ret_status != CKR_OK)
 800621c:	2800      	cmp	r0, #0
 800621e:	d1bb      	bne.n	8006198 <KMS_Verify+0x50>
          mb_st.pmBuf = p_ctx->tmpbuffer;
 8006220:	f105 0328 	add.w	r3, r5, #40	; 0x28
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 8006224:	af08      	add	r7, sp, #32
          mb_st.pmBuf = p_ctx->tmpbuffer;
 8006226:	9308      	str	r3, [sp, #32]
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 8006228:	4639      	mov	r1, r7
          mb_st.mSize = (int16_t)sizeof(p_ctx->tmpbuffer);
 800622a:	f44f 7300 	mov.w	r3, #512	; 0x200
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 800622e:	4640      	mov	r0, r8
          mb_st.mSize = (int16_t)sizeof(p_ctx->tmpbuffer);
 8006230:	9309      	str	r3, [sp, #36]	; 0x24
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 8006232:	f7fc fbaf 	bl	8002994 <CA_ECCinitEC>
 8006236:	2800      	cmp	r0, #0
 8006238:	d1ae      	bne.n	8006198 <KMS_Verify+0x50>
          if (CA_ECCinitPoint(&PubKey, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 800623a:	463a      	mov	r2, r7
 800623c:	4641      	mov	r1, r8
 800623e:	a806      	add	r0, sp, #24
 8006240:	f7fc fbac 	bl	800299c <CA_ECCinitPoint>
 8006244:	2800      	cmp	r0, #0
 8006246:	d1a7      	bne.n	8006198 <KMS_Verify+0x50>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_POINT, pkms_object, &pAttr);
 8006248:	aa05      	add	r2, sp, #20
 800624a:	4659      	mov	r1, fp
 800624c:	f240 1081 	movw	r0, #385	; 0x181
 8006250:	f7ff f918 	bl	8005484 <KMS_Objects_SearchAttributes>
          if (e_ret_status != CKR_OK)
 8006254:	2800      	cmp	r0, #0
 8006256:	d19f      	bne.n	8006198 <KMS_Verify+0x50>
          if (pAttr->size > sizeof(p_ctx->der_pub))
 8006258:	9805      	ldr	r0, [sp, #20]
          p_ctx->pub_size = (uint32_t)EC_st.mNsize;
 800625a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
          if (pAttr->size > sizeof(p_ctx->der_pub))
 800625c:	6841      	ldr	r1, [r0, #4]
          p_ctx->pub_size = (uint32_t)EC_st.mNsize;
 800625e:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
          if (pAttr->size > sizeof(p_ctx->der_pub))
 8006262:	2944      	cmp	r1, #68	; 0x44
 8006264:	f200 80cb 	bhi.w	80063fe <KMS_Verify+0x2b6>
          KMS_Objects_BlobU32_2_u8ptr(&(pAttr->data[0]), pAttr->size, p_ctx->der_pub);
 8006268:	f505 740a 	add.w	r4, r5, #552	; 0x228
 800626c:	4622      	mov	r2, r4
 800626e:	3008      	adds	r0, #8
          if (KMS_DerX962_ExtractPublicKeyCoord(p_ctx->der_pub,
 8006270:	f505 7b23 	add.w	fp, r5, #652	; 0x28c
          KMS_Objects_BlobU32_2_u8ptr(&(pAttr->data[0]), pAttr->size, p_ctx->der_pub);
 8006274:	f7ff f9c1 	bl	80055fa <KMS_Objects_BlobU32_2_u8ptr>
          if (KMS_DerX962_ExtractPublicKeyCoord(p_ctx->der_pub,
 8006278:	f505 711b 	add.w	r1, r5, #620	; 0x26c
 800627c:	4620      	mov	r0, r4
 800627e:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
 8006282:	9103      	str	r1, [sp, #12]
 8006284:	465a      	mov	r2, fp
 8006286:	f7fc fd80 	bl	8002d8a <KMS_DerX962_ExtractPublicKeyCoord>
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	4604      	mov	r4, r0
 800628e:	2800      	cmp	r0, #0
 8006290:	d182      	bne.n	8006198 <KMS_Verify+0x50>
          (void)CA_ECCsetPointCoordinate(PubKey, CA_E_ECC_POINT_COORDINATE_X, p_ctx->pub_x, (int32_t)(p_ctx->pub_size));
 8006292:	460a      	mov	r2, r1
 8006294:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
 8006298:	4601      	mov	r1, r0
 800629a:	9806      	ldr	r0, [sp, #24]
 800629c:	f7fc fbcd 	bl	8002a3a <CA_ECCsetPointCoordinate>
          (void)CA_ECCsetPointCoordinate(PubKey, CA_E_ECC_POINT_COORDINATE_Y, p_ctx->pub_y, (int32_t)(p_ctx->pub_size));
 80062a0:	465a      	mov	r2, fp
 80062a2:	2101      	movs	r1, #1
 80062a4:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
 80062a8:	9806      	ldr	r0, [sp, #24]
 80062aa:	f7fc fbc6 	bl	8002a3a <CA_ECCsetPointCoordinate>
          if (CA_ECCvalidatePubKey(PubKey, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 80062ae:	9806      	ldr	r0, [sp, #24]
 80062b0:	463a      	mov	r2, r7
 80062b2:	4641      	mov	r1, r8
 80062b4:	f7fc fd52 	bl	8002d5c <CA_ECCvalidatePubKey>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f47f af6d 	bne.w	8006198 <KMS_Verify+0x50>
          if (CA_ECDSAinitSign(&p_sign, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 80062be:	463a      	mov	r2, r7
 80062c0:	4641      	mov	r1, r8
 80062c2:	a807      	add	r0, sp, #28
 80062c4:	f7fc fbce 	bl	8002a64 <CA_ECDSAinitSign>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f47f af65 	bne.w	8006198 <KMS_Verify+0x50>
          (void)CA_ECDSAsetSignature(p_sign,
 80062ce:	4621      	mov	r1, r4
 80062d0:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
 80062d4:	9807      	ldr	r0, [sp, #28]
 80062d6:	464a      	mov	r2, r9
 80062d8:	f7fc fc10 	bl	8002afc <CA_ECDSAsetSignature>
          (void)CA_ECDSAsetSignature(p_sign,
 80062dc:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
 80062e0:	9807      	ldr	r0, [sp, #28]
 80062e2:	eb09 0203 	add.w	r2, r9, r3
 80062e6:	2101      	movs	r1, #1
 80062e8:	f7fc fc08 	bl	8002afc <CA_ECDSAsetSignature>
          verctx.pmPubKey = PubKey;
 80062ec:	9b06      	ldr	r3, [sp, #24]
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 80062ee:	9700      	str	r7, [sp, #0]
 80062f0:	9a07      	ldr	r2, [sp, #28]
 80062f2:	6a29      	ldr	r1, [r5, #32]
          verctx.pmPubKey = PubKey;
 80062f4:	930a      	str	r3, [sp, #40]	; 0x28
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 80062f6:	4628      	mov	r0, r5
 80062f8:	ab0a      	add	r3, sp, #40	; 0x28
          verctx.pmEC = &EC_st;
 80062fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 80062fe:	f7fc fc12 	bl	8002b26 <CA_ECDSAverify>
            e_ret_status = CKR_SIGNATURE_INVALID;
 8006302:	f240 33eb 	movw	r3, #1003	; 0x3eb
 8006306:	4298      	cmp	r0, r3
 8006308:	bf18      	it	ne
 800630a:	24c0      	movne	r4, #192	; 0xc0
          (void)CA_ECDSAfreeSign(&p_sign, &mb_st);
 800630c:	4639      	mov	r1, r7
 800630e:	a807      	add	r0, sp, #28
 8006310:	f7fc fbf2 	bl	8002af8 <CA_ECDSAfreeSign>
          (void)CA_ECCfreePoint(&PubKey, &mb_st);
 8006314:	4639      	mov	r1, r7
 8006316:	a806      	add	r0, sp, #24
 8006318:	f7fc fb8d 	bl	8002a36 <CA_ECCfreePoint>
          (void)CA_ECCfreeEC(&EC_st, &mb_st);
 800631c:	4639      	mov	r1, r7
 800631e:	4640      	mov	r0, r8
 8006320:	f7fc fb3a 	bl	8002998 <CA_ECCfreeEC>

  /* Upon completion error or not:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006324:	9a02      	ldr	r2, [sp, #8]
 8006326:	2324      	movs	r3, #36	; 0x24
 8006328:	fb03 6602 	mla	r6, r3, r2, r6
 800632c:	2500      	movs	r5, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800632e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006330:	6275      	str	r5, [r6, #36]	; 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8006332:	b119      	cbz	r1, 800633c <KMS_Verify+0x1f4>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8006334:	4650      	mov	r0, sl
 8006336:	f7fe fb03 	bl	8004940 <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800633a:	62b5      	str	r5, [r6, #40]	; 0x28
  }

  KMS_SetStateIdle(hSession);
 800633c:	4650      	mov	r0, sl
 800633e:	f7fe f98b 	bl	8004658 <KMS_SetStateIdle>
  return e_ret_status;

#else /* KMS_VERIFY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_VERIFY */
}
 8006342:	4620      	mov	r0, r4
 8006344:	b02b      	add	sp, #172	; 0xac
 8006346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (ulDataLen == CA_CRL_SHA256_SIZE)
 800634a:	2f20      	cmp	r7, #32
 800634c:	d159      	bne.n	8006402 <KMS_Verify+0x2ba>
      kms_asym_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 800634e:	6a93      	ldr	r3, [r2, #40]	; 0x28
        p_ctx->hashMethod = CA_E_SHA256;
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        (void)memcpy(p_ctx->hash, pData, CA_CRL_SHA256_SIZE);
 8006356:	4619      	mov	r1, r3
 8006358:	462a      	mov	r2, r5
 800635a:	f105 0020 	add.w	r0, r5, #32
 800635e:	f852 cb04 	ldr.w	ip, [r2], #4
 8006362:	f841 cb04 	str.w	ip, [r1], #4
 8006366:	4282      	cmp	r2, r0
 8006368:	d1f9      	bne.n	800635e <KMS_Verify+0x216>
        p_ctx->hashSize = (int32_t)CA_CRL_SHA256_SIZE;
 800636a:	2220      	movs	r2, #32
 800636c:	621a      	str	r2, [r3, #32]
  if (e_ret_status == CKR_OK)
 800636e:	e71a      	b.n	80061a6 <KMS_Verify+0x5e>
      kms_asym_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8006370:	f8d2 8028 	ldr.w	r8, [r2, #40]	; 0x28
      p_ctx->hashMethod = CA_E_SHA256;
 8006374:	2301      	movs	r3, #1
 8006376:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
      HASH_ctxt_st.mFlags = CA_E_HASH_DEFAULT;
 800637a:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
      HASH_ctxt_st.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 800637e:	2320      	movs	r3, #32
      if (CA_SHA256_Init(&HASH_ctxt_st) == CA_AES_SUCCESS)
 8006380:	a80c      	add	r0, sp, #48	; 0x30
      HASH_ctxt_st.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 8006382:	930e      	str	r3, [sp, #56]	; 0x38
      if (CA_SHA256_Init(&HASH_ctxt_st) == CA_AES_SUCCESS)
 8006384:	f7fc fad7 	bl	8002936 <CA_SHA256_Init>
 8006388:	2800      	cmp	r0, #0
 800638a:	f47f af05 	bne.w	8006198 <KMS_Verify+0x50>
        if (CA_SHA256_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen) == CA_AES_SUCCESS)
 800638e:	463a      	mov	r2, r7
 8006390:	4629      	mov	r1, r5
 8006392:	a80c      	add	r0, sp, #48	; 0x30
 8006394:	f7fc fadf 	bl	8002956 <CA_SHA256_Append>
 8006398:	2800      	cmp	r0, #0
 800639a:	f47f aefd 	bne.w	8006198 <KMS_Verify+0x50>
          if (CA_SHA256_Finish(&HASH_ctxt_st, p_ctx->hash, &(p_ctx->hashSize)) == CA_AES_SUCCESS)
 800639e:	f108 0220 	add.w	r2, r8, #32
 80063a2:	4641      	mov	r1, r8
 80063a4:	a80c      	add	r0, sp, #48	; 0x30
 80063a6:	f7fc fae4 	bl	8002972 <CA_SHA256_Finish>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	f43f aefb 	beq.w	80061a6 <KMS_Verify+0x5e>
 80063b0:	e6f2      	b.n	8006198 <KMS_Verify+0x50>
      switch (KMS_GETSESSION(hSession).Mechanism)
 80063b2:	f5a3 5384 	sub.w	r3, r3, #4224	; 0x1080
 80063b6:	3b0a      	subs	r3, #10
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f63f aeed 	bhi.w	8006198 <KMS_Verify+0x50>
          kms_aes_cmac_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80063be:	f8d8 8028 	ldr.w	r8, [r8, #40]	; 0x28
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 80063c2:	f898 3038 	ldrb.w	r3, [r8, #56]	; 0x38
          if (CA_AES_CMAC_Decrypt_Append(&(p_ctx->ca_ctx),
 80063c6:	f108 0b34 	add.w	fp, r8, #52	; 0x34
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
          if (CA_AES_CMAC_Decrypt_Append(&(p_ctx->ca_ctx),
 80063d2:	463a      	mov	r2, r7
 80063d4:	4629      	mov	r1, r5
 80063d6:	4658      	mov	r0, fp
 80063d8:	f7fc f801 	bl	80023de <CA_AES_CMAC_Decrypt_Append>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f47f aedb 	bne.w	8006198 <KMS_Verify+0x50>
          p_ctx->ca_ctx.mTagSize = (int32_t)ulSignatureLen;
 80063e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
          if (CA_AES_CMAC_Decrypt_Finish(&(p_ctx->ca_ctx),
 80063e4:	aa34      	add	r2, sp, #208	; 0xd0
          p_ctx->ca_ctx.pmTag = pSignature;
 80063e6:	e9c8 9318 	strd	r9, r3, [r8, #96]	; 0x60
          if (CA_AES_CMAC_Decrypt_Finish(&(p_ctx->ca_ctx),
 80063ea:	4649      	mov	r1, r9
 80063ec:	4658      	mov	r0, fp
 80063ee:	f7fb fff8 	bl	80023e2 <CA_AES_CMAC_Decrypt_Finish>
            e_ret_status = CKR_SIGNATURE_INVALID;
 80063f2:	f240 33eb 	movw	r3, #1003	; 0x3eb
 80063f6:	4298      	cmp	r0, r3
 80063f8:	bf18      	it	ne
 80063fa:	24c0      	movne	r4, #192	; 0xc0
 80063fc:	e792      	b.n	8006324 <KMS_Verify+0x1dc>
            e_ret_status = CKR_DATA_INVALID;
 80063fe:	2420      	movs	r4, #32
 8006400:	e790      	b.n	8006324 <KMS_Verify+0x1dc>
        e_ret_status = CKR_ARGUMENTS_BAD;
 8006402:	2407      	movs	r4, #7
 8006404:	e78e      	b.n	8006324 <KMS_Verify+0x1dc>
      e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8006406:	2482      	movs	r4, #130	; 0x82
 8006408:	e78c      	b.n	8006324 <KMS_Verify+0x1dc>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800640a:	f44f 74c8 	mov.w	r4, #400	; 0x190
 800640e:	e798      	b.n	8006342 <KMS_Verify+0x1fa>
    return CKR_SESSION_HANDLE_INVALID;
 8006410:	24b3      	movs	r4, #179	; 0xb3
 8006412:	e796      	b.n	8006342 <KMS_Verify+0x1fa>
    return CKR_OPERATION_NOT_INITIALIZED;
 8006414:	2491      	movs	r4, #145	; 0x91
 8006416:	e794      	b.n	8006342 <KMS_Verify+0x1fa>
 8006418:	20000c48 	.word	0x20000c48
 800641c:	b10b0240 	.word	0xb10b0240

08006420 <SE_CallGateService>:
   */
  static SE_LockStatus SE_LockRestrictedServices = SE_UNLOCKED;

  SE_ErrorStatus e_ret_status = SE_ERROR;

  switch (eID)
 8006420:	2892      	cmp	r0, #146	; 0x92
{
 8006422:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8006426:	460c      	mov	r4, r1
  switch (eID)
 8006428:	f000 8086 	beq.w	8006538 <SE_CallGateService+0x118>
 800642c:	d83e      	bhi.n	80064ac <SE_CallGateService+0x8c>
 800642e:	2810      	cmp	r0, #16
 8006430:	d06b      	beq.n	800650a <SE_CallGateService+0xea>
 8006432:	d817      	bhi.n	8006464 <SE_CallGateService+0x44>
 8006434:	2800      	cmp	r0, #0
 8006436:	d070      	beq.n	800651a <SE_CallGateService+0xfa>
 8006438:	1f03      	subs	r3, r0, #4
 800643a:	2b05      	cmp	r3, #5
 800643c:	d965      	bls.n	800650a <SE_CallGateService+0xea>

    default:
    {
#ifdef KMS_ENABLED
      /* Is it a request to the KMS lib */
      if ((eID & SE_MW_ADDON_MSB_MASK) == SE_MW_ADDON_KMS_MSB)
 800643e:	f000 43e0 	and.w	r3, r0, #1879048192	; 0x70000000
 8006442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006446:	d16d      	bne.n	8006524 <SE_CallGateService+0x104>
      {
        CK_RV    l_rv;
        /* Clear SE MW part of the ID, add KMS calling cluster part to the ID */
        KMS_FunctionID_t kmsID = (eID & ~(SE_MW_ADDON_MSB_MASK | KMS_CLUST_MASK)) | KMS_CLUST_UNSEC;
 8006448:	f020 40e1 	bic.w	r0, r0, #1887436800	; 0x70800000
 800644c:	f420 00fe 	bic.w	r0, r0, #8323072	; 0x7f0000

        /* To limit the number of passed parameters, we consider that */
        /* KMS_Entry() returns the CK_RV error. */
        l_rv = KMS_Entry(kmsID, arguments);
 8006450:	4611      	mov	r1, r2
 8006452:	f440 00b4 	orr.w	r0, r0, #5898240	; 0x5a0000
 8006456:	f7fd fbd5 	bl	8003c04 <KMS_Entry>

        /*
         * SE_StatusTypeDef is used to forward the CK_RV result to upper layers
         */
        *peSE_Status = l_rv;
 800645a:	6020      	str	r0, [r4, #0]

        if (l_rv == CKR_OK)
 800645c:	2800      	cmp	r0, #0
 800645e:	d154      	bne.n	800650a <SE_CallGateService+0xea>
        {
          e_ret_status = SE_SUCCESS;
 8006460:	4855      	ldr	r0, [pc, #340]	; (80065b8 <SE_CallGateService+0x198>)
 8006462:	e067      	b.n	8006534 <SE_CallGateService+0x114>
  switch (eID)
 8006464:	2820      	cmp	r0, #32
 8006466:	d1ea      	bne.n	800643e <SE_CallGateService+0x1e>
      p_FwInfo = va_arg(arguments, SE_APP_ActiveFwInfo_t *);
 8006468:	e9d2 9500 	ldrd	r9, r5, [r2]
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 800646c:	2108      	movs	r1, #8
 800646e:	4628      	mov	r0, r5
 8006470:	f7fa fb72 	bl	8000b58 <SE_LL_Buffer_in_ram>
 8006474:	4b50      	ldr	r3, [pc, #320]	; (80065b8 <SE_CallGateService+0x198>)
 8006476:	4298      	cmp	r0, r3
 8006478:	4606      	mov	r6, r0
 800647a:	d146      	bne.n	800650a <SE_CallGateService+0xea>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 800647c:	2108      	movs	r1, #8
 800647e:	4628      	mov	r0, r5
 8006480:	f7fa fb9a 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
 8006484:	42b0      	cmp	r0, r6
 8006486:	d040      	beq.n	800650a <SE_CallGateService+0xea>
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 8006488:	2108      	movs	r1, #8
 800648a:	4628      	mov	r0, r5
 800648c:	f7fa fb64 	bl	8000b58 <SE_LL_Buffer_in_ram>
 8006490:	42b0      	cmp	r0, r6
 8006492:	4680      	mov	r8, r0
 8006494:	d139      	bne.n	800650a <SE_CallGateService+0xea>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 8006496:	2108      	movs	r1, #8
 8006498:	4628      	mov	r0, r5
 800649a:	f7fa fb8d 	bl	8000bb8 <SE_LL_Buffer_part_of_SE_ram>
 800649e:	4540      	cmp	r0, r8
 80064a0:	d033      	beq.n	800650a <SE_CallGateService+0xea>
      e_ret_status = SE_APPLI_GetActiveFwInfo(slot_number, p_FwInfo);
 80064a2:	4629      	mov	r1, r5
 80064a4:	4648      	mov	r0, r9
 80064a6:	f000 f8e7 	bl	8006678 <SE_APPLI_GetActiveFwInfo>
      break;
 80064aa:	e068      	b.n	800657e <SE_CallGateService+0x15e>
  switch (eID)
 80064ac:	2894      	cmp	r0, #148	; 0x94
 80064ae:	d06a      	beq.n	8006586 <SE_CallGateService+0x166>
 80064b0:	d825      	bhi.n	80064fe <SE_CallGateService+0xde>
 80064b2:	2893      	cmp	r0, #147	; 0x93
 80064b4:	d1c3      	bne.n	800643e <SE_CallGateService+0x1e>
      IS_SE_LOCKED_SERVICES();
 80064b6:	f8df a110 	ldr.w	sl, [pc, #272]	; 80065c8 <SE_CallGateService+0x1a8>
 80064ba:	f8da 3000 	ldr.w	r3, [sl]
 80064be:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80064c2:	d12f      	bne.n	8006524 <SE_CallGateService+0x104>
      p_source = va_arg(arguments, const uint8_t *);
 80064c4:	e9d2 9600 	ldrd	r9, r6, [r2]
      length = va_arg(arguments, uint32_t);
 80064c8:	f8d2 8008 	ldr.w	r8, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 80064cc:	4630      	mov	r0, r6
 80064ce:	4641      	mov	r1, r8
 80064d0:	f7fa fb5a 	bl	8000b88 <SE_LL_Buffer_in_SBSFU_ram>
 80064d4:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <SE_CallGateService+0x198>)
 80064d6:	4298      	cmp	r0, r3
 80064d8:	4605      	mov	r5, r0
 80064da:	d116      	bne.n	800650a <SE_CallGateService+0xea>
      IS_SE_LOCKED_SERVICES();
 80064dc:	f8da 3000 	ldr.w	r3, [sl]
 80064e0:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80064e4:	d11e      	bne.n	8006524 <SE_CallGateService+0x104>
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 80064e6:	4641      	mov	r1, r8
 80064e8:	4630      	mov	r0, r6
 80064ea:	f7fa fb4d 	bl	8000b88 <SE_LL_Buffer_in_SBSFU_ram>
 80064ee:	42a8      	cmp	r0, r5
 80064f0:	d10b      	bne.n	800650a <SE_CallGateService+0xea>
      e_ret_status = SE_IMG_Write(p_destination, p_source, length);
 80064f2:	4642      	mov	r2, r8
 80064f4:	4631      	mov	r1, r6
 80064f6:	4648      	mov	r0, r9
 80064f8:	f000 f87c 	bl	80065f4 <SE_IMG_Write>
      break;
 80064fc:	e03f      	b.n	800657e <SE_CallGateService+0x15e>
  switch (eID)
 80064fe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006502:	d04a      	beq.n	800659a <SE_CallGateService+0x17a>
 8006504:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006508:	d199      	bne.n	800643e <SE_CallGateService+0x1e>
      NVIC_SystemReset();

      break;
    }
  }
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <SE_CallGateService+0x19c>)
 800650e:	429a      	cmp	r2, r3
 8006510:	d14f      	bne.n	80065b2 <SE_CallGateService+0x192>
  {
    *peSE_Status = SE_KO;
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <SE_CallGateService+0x1a0>)
 8006514:	482b      	ldr	r0, [pc, #172]	; (80065c4 <SE_CallGateService+0x1a4>)
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	e00c      	b.n	8006534 <SE_CallGateService+0x114>
      IS_SE_LOCKED_SERVICES();
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <SE_CallGateService+0x1a8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8006522:	d001      	beq.n	8006528 <SE_CallGateService+0x108>
 8006524:	f000 f854 	bl	80065d0 <__NVIC_SystemReset>
      SE_SetSystemCoreClock(se_system_core_clock);
 8006528:	6810      	ldr	r0, [r2, #0]
 800652a:	f000 f8c3 	bl	80066b4 <SE_SetSystemCoreClock>
      *peSE_Status = SE_OK;
 800652e:	4b23      	ldr	r3, [pc, #140]	; (80065bc <SE_CallGateService+0x19c>)
      e_ret_status = SE_SUCCESS;
 8006530:	4821      	ldr	r0, [pc, #132]	; (80065b8 <SE_CallGateService+0x198>)
      *peSE_Status = SE_OK;
 8006532:	6023      	str	r3, [r4, #0]
  }
  return e_ret_status;
}
 8006534:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
      IS_SE_LOCKED_SERVICES();
 8006538:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80065c8 <SE_CallGateService+0x1a8>
 800653c:	f8da 3000 	ldr.w	r3, [sl]
 8006540:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8006544:	d1ee      	bne.n	8006524 <SE_CallGateService+0x104>
      p_source = va_arg(arguments, const uint8_t *);
 8006546:	e9d2 6900 	ldrd	r6, r9, [r2]
      length = va_arg(arguments, uint32_t);
 800654a:	f8d2 8008 	ldr.w	r8, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 800654e:	4630      	mov	r0, r6
 8006550:	4641      	mov	r1, r8
 8006552:	f7fa fb19 	bl	8000b88 <SE_LL_Buffer_in_SBSFU_ram>
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <SE_CallGateService+0x198>)
 8006558:	4298      	cmp	r0, r3
 800655a:	4605      	mov	r5, r0
 800655c:	d1d5      	bne.n	800650a <SE_CallGateService+0xea>
      IS_SE_LOCKED_SERVICES();
 800655e:	f8da 3000 	ldr.w	r3, [sl]
 8006562:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8006566:	d1dd      	bne.n	8006524 <SE_CallGateService+0x104>
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 8006568:	4641      	mov	r1, r8
 800656a:	4630      	mov	r0, r6
 800656c:	f7fa fb0c 	bl	8000b88 <SE_LL_Buffer_in_SBSFU_ram>
 8006570:	42a8      	cmp	r0, r5
 8006572:	d1ca      	bne.n	800650a <SE_CallGateService+0xea>
      e_ret_status = SE_IMG_Read(p_destination, p_source, length);
 8006574:	4642      	mov	r2, r8
 8006576:	4649      	mov	r1, r9
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f851 	bl	8006620 <SE_IMG_Read>
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <SE_CallGateService+0x1a4>)
 8006580:	4298      	cmp	r0, r3
 8006582:	d1d7      	bne.n	8006534 <SE_CallGateService+0x114>
 8006584:	e7c1      	b.n	800650a <SE_CallGateService+0xea>
      IS_SE_LOCKED_SERVICES();
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <SE_CallGateService+0x1a8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800658e:	d1c9      	bne.n	8006524 <SE_CallGateService+0x104>
      e_ret_status = SE_IMG_Erase(p_destination, length);
 8006590:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006594:	f000 f85a 	bl	800664c <SE_IMG_Erase>
      break;
 8006598:	e7f1      	b.n	800657e <SE_CallGateService+0x15e>
      SE_LockRestrictedServices = SE_LOCKED;
 800659a:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <SE_CallGateService+0x1a8>)
 800659c:	4e0b      	ldr	r6, [pc, #44]	; (80065cc <SE_CallGateService+0x1ac>)
      SE_LL_CORE_Cleanup();
 800659e:	f7fa fb79 	bl	8000c94 <SE_LL_CORE_Cleanup>
      SE_LockRestrictedServices = SE_LOCKED;
 80065a2:	602e      	str	r6, [r5, #0]
      if (SE_LL_Lock_Keys() != SE_SUCCESS)
 80065a4:	f7fa fb40 	bl	8000c28 <SE_LL_Lock_Keys>
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <SE_CallGateService+0x198>)
 80065aa:	4298      	cmp	r0, r3
 80065ac:	d1ad      	bne.n	800650a <SE_CallGateService+0xea>
      SE_LockRestrictedServices = SE_LOCKED;
 80065ae:	602e      	str	r6, [r5, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 80065b0:	e7c0      	b.n	8006534 <SE_CallGateService+0x114>
 80065b2:	4804      	ldr	r0, [pc, #16]	; (80065c4 <SE_CallGateService+0x1a4>)
  return e_ret_status;
 80065b4:	e7be      	b.n	8006534 <SE_CallGateService+0x114>
 80065b6:	bf00      	nop
 80065b8:	0012310f 	.word	0x0012310f
 80065bc:	0012e223 	.word	0x0012e223
 80065c0:	0013023d 	.word	0x0013023d
 80065c4:	00018799 	.word	0x00018799
 80065c8:	20000c08 	.word	0x20000c08
 80065cc:	7aaaaaaa 	.word	0x7aaaaaaa

080065d0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80065d0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80065d4:	4905      	ldr	r1, [pc, #20]	; (80065ec <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80065d8:	68ca      	ldr	r2, [r1, #12]
 80065da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80065de:	4313      	orrs	r3, r2
 80065e0:	60cb      	str	r3, [r1, #12]
 80065e2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80065e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80065e8:	e7fd      	b.n	80065e6 <__NVIC_SystemReset+0x16>
 80065ea:	bf00      	nop
 80065ec:	e000ed00 	.word	0xe000ed00
 80065f0:	05fa0004 	.word	0x05fa0004

080065f4 <SE_IMG_Write>:
  * @param  Length number of bytes to be written
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Write(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 80065f4:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80065f6:	4c08      	ldr	r4, [pc, #32]	; (8006618 <SE_IMG_Write+0x24>)
 80065f8:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 80065fa:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80065fc:	4284      	cmp	r4, r0
  uint32_t areaend = areabegin + Length - 1U;
 80065fe:	4403      	add	r3, r0
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006600:	d803      	bhi.n	800660a <SE_IMG_Write+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8006602:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006606:	429c      	cmp	r4, r3
 8006608:	d802      	bhi.n	8006610 <SE_IMG_Write+0x1c>
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 800660a:	4804      	ldr	r0, [pc, #16]	; (800661c <SE_IMG_Write+0x28>)
  }
  return ret;
}
 800660c:	bc30      	pop	{r4, r5}
 800660e:	4770      	bx	lr
 8006610:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
 8006612:	f7fa ba39 	b.w	8000a88 <SE_LL_FLASH_Write>
 8006616:	bf00      	nop
 8006618:	08006b28 	.word	0x08006b28
 800661c:	00018799 	.word	0x00018799

08006620 <SE_IMG_Read>:
  * @param  Length number of bytes to be read
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 8006620:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006622:	4c08      	ldr	r4, [pc, #32]	; (8006644 <SE_IMG_Read+0x24>)
 8006624:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 8006626:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006628:	428c      	cmp	r4, r1
  uint32_t areaend = areabegin + Length - 1U;
 800662a:	440b      	add	r3, r1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800662c:	d803      	bhi.n	8006636 <SE_IMG_Read+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 800662e:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006632:	429c      	cmp	r4, r3
 8006634:	d802      	bhi.n	800663c <SE_IMG_Read+0x1c>
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 8006636:	4804      	ldr	r0, [pc, #16]	; (8006648 <SE_IMG_Read+0x28>)
  }
  return ret;
}
 8006638:	bc30      	pop	{r4, r5}
 800663a:	4770      	bx	lr
 800663c:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
 800663e:	f7fa ba51 	b.w	8000ae4 <SE_LL_FLASH_Read>
 8006642:	bf00      	nop
 8006644:	08006b28 	.word	0x08006b28
 8006648:	00018799 	.word	0x00018799

0800664c <SE_IMG_Erase>:

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800664c:	4a08      	ldr	r2, [pc, #32]	; (8006670 <SE_IMG_Erase+0x24>)
 800664e:	6852      	ldr	r2, [r2, #4]
  uint32_t areaend = areabegin + Length - 1U;
 8006650:	1e4b      	subs	r3, r1, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006652:	4282      	cmp	r2, r0
{
 8006654:	b410      	push	{r4}
  uint32_t areaend = areabegin + Length - 1U;
 8006656:	4403      	add	r3, r0
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006658:	d803      	bhi.n	8006662 <SE_IMG_Erase+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 800665a:	f502 7200 	add.w	r2, r2, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800665e:	429a      	cmp	r2, r3
 8006660:	d802      	bhi.n	8006668 <SE_IMG_Erase+0x1c>
    ret = SE_LL_FLASH_Erase(pDestination, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 8006662:	4804      	ldr	r0, [pc, #16]	; (8006674 <SE_IMG_Erase+0x28>)
  }
  return ret;
}
 8006664:	bc10      	pop	{r4}
 8006666:	4770      	bx	lr
 8006668:	bc10      	pop	{r4}
    ret = SE_LL_FLASH_Erase(pDestination, Length);
 800666a:	f7fa b9e3 	b.w	8000a34 <SE_LL_FLASH_Erase>
 800666e:	bf00      	nop
 8006670:	08006b28 	.word	0x08006b28
 8006674:	00018799 	.word	0x00018799

08006678 <SE_APPLI_GetActiveFwInfo>:
  * @param  SlotNumber index of the slot in the list
  * @param p_FwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_GetActiveFwInfo(uint32_t SlotNumber, SE_APP_ActiveFwInfo_t *p_FwInfo)
{
 8006678:	b510      	push	{r4, lr}
  SE_ErrorStatus e_ret_status;
  uint8_t buffer[SE_FW_HEADER_TOT_LEN];     /* to read FW metadata from FLASH */
  SE_FwRawHeaderTypeDef *pfw_image_header;  /* FW metadata */

  /* Check the pointer allocation */
  if (NULL == p_FwInfo)
 800667a:	460c      	mov	r4, r1
{
 800667c:	b0d0      	sub	sp, #320	; 0x140
  if (NULL == p_FwInfo)
 800667e:	b199      	cbz	r1, 80066a8 <SE_APPLI_GetActiveFwInfo+0x30>
  {
    return SE_ERROR;
  }

  /* Check Slot_Number value */
  if (SlotNumber > SFU_NB_MAX_ACTIVE_IMAGE)
 8006680:	2801      	cmp	r0, #1
 8006682:	d811      	bhi.n	80066a8 <SE_APPLI_GetActiveFwInfo+0x30>
    return SE_ERROR;
  }
  /*
   * The Firmware Information is available in the header of the active slot.
   */
  e_ret_status = SE_LL_FLASH_Read(buffer, (uint8_t *) SlotHeaderAdd[SlotNumber], sizeof(buffer));
 8006684:	4b09      	ldr	r3, [pc, #36]	; (80066ac <SE_APPLI_GetActiveFwInfo+0x34>)
 8006686:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800668a:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800668e:	4668      	mov	r0, sp
 8006690:	f7fa fa28 	bl	8000ae4 <SE_LL_FLASH_Read>
  if (e_ret_status != SE_ERROR)
 8006694:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <SE_APPLI_GetActiveFwInfo+0x38>)
 8006696:	4298      	cmp	r0, r3
 8006698:	d004      	beq.n	80066a4 <SE_APPLI_GetActiveFwInfo+0x2c>

    /*
     * We do not check the header validity.
     * We just copy the information.
     */
    p_FwInfo->ActiveFwVersion = pfw_image_header->FwVersion;
 800669a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800669e:	8023      	strh	r3, [r4, #0]
    p_FwInfo->ActiveFwSize = pfw_image_header->FwSize;
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	6063      	str	r3, [r4, #4]
  }

  return e_ret_status;
}
 80066a4:	b050      	add	sp, #320	; 0x140
 80066a6:	bd10      	pop	{r4, pc}
    return SE_ERROR;
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <SE_APPLI_GetActiveFwInfo+0x38>)
 80066aa:	e7fb      	b.n	80066a4 <SE_APPLI_GetActiveFwInfo+0x2c>
 80066ac:	08006b28 	.word	0x08006b28
 80066b0:	00018799 	.word	0x00018799

080066b4 <SE_SetSystemCoreClock>:
  * @param uSystemCoreClock Secure Engine SystemCoreClock variable.
  * @retval None.
  */
void SE_SetSystemCoreClock(uint32_t uSystemCoreClock)
{
  m_uSE_SystemCoreClock = uSystemCoreClock;
 80066b4:	4b01      	ldr	r3, [pc, #4]	; (80066bc <SE_SetSystemCoreClock+0x8>)
 80066b6:	6018      	str	r0, [r3, #0]
}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000f44 	.word	0x20000f44

080066c0 <HAL_GetTick>:
{
  static uint32_t m_uTick = 0U;
  static uint32_t t1 = 0U, tdelta = 0U;
  uint32_t t2;

  t2 =  SysTick->VAL;
 80066c0:	490f      	ldr	r1, [pc, #60]	; (8006700 <HAL_GetTick+0x40>)

  if (t2 <= t1)
 80066c2:	4810      	ldr	r0, [pc, #64]	; (8006704 <HAL_GetTick+0x44>)
 80066c4:	4a10      	ldr	r2, [pc, #64]	; (8006708 <HAL_GetTick+0x48>)
 80066c6:	6803      	ldr	r3, [r0, #0]
{
 80066c8:	b530      	push	{r4, r5, lr}
  t2 =  SysTick->VAL;
 80066ca:	688c      	ldr	r4, [r1, #8]
  if (t2 <= t1)
 80066cc:	6815      	ldr	r5, [r2, #0]
 80066ce:	42a3      	cmp	r3, r4
  {
    tdelta += t1 - t2;
  }
  else
  {
    tdelta += t1 + SysTick->LOAD - t2;
 80066d0:	bf38      	it	cc
 80066d2:	6849      	ldrcc	r1, [r1, #4]
 80066d4:	442b      	add	r3, r5
 80066d6:	bf38      	it	cc
 80066d8:	185b      	addcc	r3, r3, r1
  }

  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 80066da:	490c      	ldr	r1, [pc, #48]	; (800670c <HAL_GetTick+0x4c>)
    tdelta += t1 + SysTick->LOAD - t2;
 80066dc:	1b1b      	subs	r3, r3, r4
  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 80066de:	6809      	ldr	r1, [r1, #0]
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80066e6:	fbb1 f1f5 	udiv	r1, r1, r5
 80066ea:	4299      	cmp	r1, r3
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <HAL_GetTick+0x50>)
 80066ee:	d204      	bcs.n	80066fa <HAL_GetTick+0x3a>
 80066f0:	6819      	ldr	r1, [r3, #0]
  {
    tdelta = 0U;
 80066f2:	2500      	movs	r5, #0
    m_uTick ++;
 80066f4:	3101      	adds	r1, #1
    tdelta = 0U;
 80066f6:	6015      	str	r5, [r2, #0]
    m_uTick ++;
 80066f8:	6019      	str	r1, [r3, #0]
  }

  t1 = t2;
 80066fa:	6004      	str	r4, [r0, #0]
  return m_uTick;
}
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	bd30      	pop	{r4, r5, pc}
 8006700:	e000e010 	.word	0xe000e010
 8006704:	20000f4c 	.word	0x20000f4c
 8006708:	20000f50 	.word	0x20000f50
 800670c:	20000f44 	.word	0x20000f44
 8006710:	20000f48 	.word	0x20000f48

08006714 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006714:	226c      	movs	r2, #108	; 0x6c
 8006716:	2100      	movs	r1, #0
 8006718:	f000 b9d8 	b.w	8006acc <memset>

0800671c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800671c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 800671e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8006722:	b9c1      	cbnz	r1, 8006756 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8006724:	4a19      	ldr	r2, [pc, #100]	; (800678c <mbedtls_sha256_starts_ret+0x70>)
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8006728:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80067b8 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
 800672c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8006732:	4a19      	ldr	r2, [pc, #100]	; (8006798 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8006734:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8006738:	4b18      	ldr	r3, [pc, #96]	; (800679c <mbedtls_sha256_starts_ret+0x80>)
 800673a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 800673e:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <mbedtls_sha256_starts_ret+0x84>)
 8006740:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8006742:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8006746:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800674a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 800674e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8006750:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8006752:	2000      	movs	r0, #0
 8006754:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <mbedtls_sha256_starts_ret+0x88>)
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 800675a:	f8df c060 	ldr.w	ip, [pc, #96]	; 80067bc <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
 800675e:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8006762:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8006766:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800676a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800676e:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <mbedtls_sha256_starts_ret+0x90>)
 8006772:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 8006776:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 800677a:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 800677e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8006782:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <mbedtls_sha256_starts_ret+0x94>)
 8006786:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <mbedtls_sha256_starts_ret+0x98>)
 800678a:	e7e0      	b.n	800674e <mbedtls_sha256_starts_ret+0x32>
 800678c:	6a09e667 	.word	0x6a09e667
 8006790:	bb67ae85 	.word	0xbb67ae85
 8006794:	a54ff53a 	.word	0xa54ff53a
 8006798:	510e527f 	.word	0x510e527f
 800679c:	9b05688c 	.word	0x9b05688c
 80067a0:	1f83d9ab 	.word	0x1f83d9ab
 80067a4:	367cd507 	.word	0x367cd507
 80067a8:	c1059ed8 	.word	0xc1059ed8
 80067ac:	ffc00b31 	.word	0xffc00b31
 80067b0:	64f98fa7 	.word	0x64f98fa7
 80067b4:	befa4fa4 	.word	0xbefa4fa4
 80067b8:	3c6ef372 	.word	0x3c6ef372
 80067bc:	f70e5939 	.word	0xf70e5939

080067c0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b0d1      	sub	sp, #324	; 0x144
 80067c6:	f100 0308 	add.w	r3, r0, #8
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80067d0:	aa08      	add	r2, sp, #32
 80067d2:	9306      	str	r3, [sp, #24]
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	4610      	mov	r0, r2

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 80067d8:	f853 4b04 	ldr.w	r4, [r3], #4
 80067dc:	f840 4b04 	str.w	r4, [r0], #4
    for( i = 0; i < 8; i++ )
 80067e0:	9c06      	ldr	r4, [sp, #24]
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	d1f8      	bne.n	80067d8 <mbedtls_internal_sha256_process+0x18>
 80067e6:	69d3      	ldr	r3, [r2, #28]
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	e9d2 3e05 	ldrd	r3, lr, [r2, #20]
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	6893      	ldr	r3, [r2, #8]
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	e9d2 4c00 	ldrd	r4, ip, [r2]
 80067f8:	68d3      	ldr	r3, [r2, #12]
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	6915      	ldr	r5, [r2, #16]
 80067fe:	4b44      	ldr	r3, [pc, #272]	; (8006910 <mbedtls_internal_sha256_process+0x150>)
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	ae10      	add	r6, sp, #64	; 0x40

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
 8006804:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
 8006808:	f1b9 0f0f 	cmp.w	r9, #15
 800680c:	d868      	bhi.n	80068e0 <mbedtls_internal_sha256_process+0x120>
            GET_UINT32_BE( W[i], data, 4 * i );
 800680e:	784b      	ldrb	r3, [r1, #1]
 8006810:	f891 a000 	ldrb.w	sl, [r1]
 8006814:	f891 8002 	ldrb.w	r8, [r1, #2]
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
 800681e:	f891 a003 	ldrb.w	sl, [r1, #3]
 8006822:	ea43 030a 	orr.w	r3, r3, sl
 8006826:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 800682a:	9f02      	ldr	r7, [sp, #8]
 800682c:	f846 3b04 	str.w	r3, [r6], #4
 8006830:	ea4f 2af5 	mov.w	sl, r5, ror #11
 8006834:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
 8006838:	ea8a 6075 	eor.w	r0, sl, r5, ror #25
 800683c:	ea8e 0a07 	eor.w	sl, lr, r7
 8006840:	ea0a 0a05 	and.w	sl, sl, r5
 8006844:	9f07      	ldr	r7, [sp, #28]
 8006846:	ea8a 0a0e 	eor.w	sl, sl, lr
 800684a:	4482      	add	sl, r0
 800684c:	f857 0b04 	ldr.w	r0, [r7], #4
 8006850:	9707      	str	r7, [sp, #28]
 8006852:	4482      	add	sl, r0
 8006854:	9804      	ldr	r0, [sp, #16]
 8006856:	9f03      	ldr	r7, [sp, #12]
 8006858:	f8cd e010 	str.w	lr, [sp, #16]
 800685c:	4453      	add	r3, sl
 800685e:	4403      	add	r3, r0
 8006860:	9805      	ldr	r0, [sp, #20]
 8006862:	9705      	str	r7, [sp, #20]
 8006864:	4418      	add	r0, r3
 8006866:	4682      	mov	sl, r0
 8006868:	ea44 080c 	orr.w	r8, r4, ip
 800686c:	ea4f 3074 	mov.w	r0, r4, ror #13
 8006870:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8006874:	ea08 0807 	and.w	r8, r8, r7
 8006878:	ea04 0b0c 	and.w	fp, r4, ip
 800687c:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
 8006880:	ea48 080b 	orr.w	r8, r8, fp
    for( i = 0; i < 64; i++ )
 8006884:	f109 0901 	add.w	r9, r9, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 8006888:	4480      	add	r8, r0
    for( i = 0; i < 64; i++ )
 800688a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 800688e:	4443      	add	r3, r8
    for( i = 0; i < 64; i++ )
 8006890:	f101 0104 	add.w	r1, r1, #4
 8006894:	d11b      	bne.n	80068ce <mbedtls_internal_sha256_process+0x10e>
 8006896:	9902      	ldr	r1, [sp, #8]
 8006898:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800689c:	e9cd 510d 	strd	r5, r1, [sp, #52]	; 0x34
 80068a0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80068a4:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80068a8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80068ac:	970b      	str	r7, [sp, #44]	; 0x2c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	f852 1b04 	ldr.w	r1, [r2], #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	440b      	add	r3, r1
 80068b8:	9901      	ldr	r1, [sp, #4]
 80068ba:	f841 3b04 	str.w	r3, [r1], #4
    for( i = 0; i < 8; i++ )
 80068be:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
 80068c0:	9101      	str	r1, [sp, #4]
    for( i = 0; i < 8; i++ )
 80068c2:	428b      	cmp	r3, r1
 80068c4:	d1f3      	bne.n	80068ae <mbedtls_internal_sha256_process+0xee>

    return( 0 );
}
 80068c6:	2000      	movs	r0, #0
 80068c8:	b051      	add	sp, #324	; 0x144
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	f8dd e008 	ldr.w	lr, [sp, #8]
 80068d2:	f8cd c00c 	str.w	ip, [sp, #12]
 80068d6:	9502      	str	r5, [sp, #8]
 80068d8:	46a4      	mov	ip, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 80068da:	4655      	mov	r5, sl
 80068dc:	461c      	mov	r4, r3
 80068de:	e793      	b.n	8006808 <mbedtls_internal_sha256_process+0x48>
            R( i );
 80068e0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80068e4:	f856 0c3c 	ldr.w	r0, [r6, #-60]
 80068e8:	f856 7c40 	ldr.w	r7, [r6, #-64]
 80068ec:	ea4f 48f3 	mov.w	r8, r3, ror #19
 80068f0:	ea88 4873 	eor.w	r8, r8, r3, ror #17
 80068f4:	ea88 2893 	eor.w	r8, r8, r3, lsr #10
 80068f8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80068fc:	ea4f 4bb0 	mov.w	fp, r0, ror #18
 8006900:	443b      	add	r3, r7
 8006902:	ea8b 1bf0 	eor.w	fp, fp, r0, ror #7
 8006906:	4498      	add	r8, r3
 8006908:	ea8b 03d0 	eor.w	r3, fp, r0, lsr #3
 800690c:	4443      	add	r3, r8
 800690e:	e78c      	b.n	800682a <mbedtls_internal_sha256_process+0x6a>
 8006910:	08006c84 	.word	0x08006c84

08006914 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8006914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006918:	4605      	mov	r5, r0
 800691a:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800691c:	4614      	mov	r4, r2
 800691e:	b912      	cbnz	r2, 8006926 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 8006920:	2000      	movs	r0, #0
}
 8006922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 8006926:	6803      	ldr	r3, [r0, #0]
 8006928:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 8006930:	bf22      	ittt	cs
 8006932:	6843      	ldrcs	r3, [r0, #4]
 8006934:	3301      	addcs	r3, #1
 8006936:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 8006938:	b1a7      	cbz	r7, 8006964 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
 800693a:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 800693e:	454a      	cmp	r2, r9
 8006940:	d310      	bcc.n	8006964 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8006942:	f100 0828 	add.w	r8, r0, #40	; 0x28
 8006946:	464a      	mov	r2, r9
 8006948:	eb08 0007 	add.w	r0, r8, r7
 800694c:	f000 f8b0 	bl	8006ab0 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8006950:	4641      	mov	r1, r8
 8006952:	4628      	mov	r0, r5
 8006954:	f7ff ff34 	bl	80067c0 <mbedtls_internal_sha256_process>
 8006958:	2800      	cmp	r0, #0
 800695a:	d1e2      	bne.n	8006922 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
 800695c:	443c      	add	r4, r7
        input += fill;
 800695e:	444e      	add	r6, r9
        ilen  -= fill;
 8006960:	3c40      	subs	r4, #64	; 0x40
        left = 0;
 8006962:	4607      	mov	r7, r0
 8006964:	4426      	add	r6, r4
 8006966:	e005      	b.n	8006974 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff ff29 	bl	80067c0 <mbedtls_internal_sha256_process>
 800696e:	2800      	cmp	r0, #0
 8006970:	d1d7      	bne.n	8006922 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
 8006972:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8006974:	2c3f      	cmp	r4, #63	; 0x3f
 8006976:	eba6 0104 	sub.w	r1, r6, r4
 800697a:	d8f5      	bhi.n	8006968 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
 800697c:	2c00      	cmp	r4, #0
 800697e:	d0cf      	beq.n	8006920 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8006980:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006984:	4622      	mov	r2, r4
 8006986:	4438      	add	r0, r7
 8006988:	f000 f892 	bl	8006ab0 <memcpy>
 800698c:	e7c8      	b.n	8006920 <mbedtls_sha256_update_ret+0xc>

0800698e <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800698e:	6803      	ldr	r3, [r0, #0]
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	4403      	add	r3, r0
{
 8006998:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
 800699a:	2a38      	cmp	r2, #56	; 0x38
{
 800699c:	460d      	mov	r5, r1
 800699e:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
 80069a2:	f04f 0180 	mov.w	r1, #128	; 0x80
{
 80069a6:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 80069a8:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
 80069ac:	eb06 0002 	add.w	r0, r6, r2
 80069b0:	d861      	bhi.n	8006a76 <mbedtls_sha256_finish_ret+0xe8>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80069b2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80069b6:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80069b8:	f000 f888 	bl	8006acc <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80069bc:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 80069c0:	0f5a      	lsrs	r2, r3, #29
 80069c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	ba12      	rev	r2, r2
 80069ca:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80069cc:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80069ce:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80069d0:	4631      	mov	r1, r6
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff fef4 	bl	80067c0 <mbedtls_internal_sha256_process>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d14b      	bne.n	8006a74 <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80069dc:	7ae3      	ldrb	r3, [r4, #11]
 80069de:	702b      	strb	r3, [r5, #0]
 80069e0:	8963      	ldrh	r3, [r4, #10]
 80069e2:	706b      	strb	r3, [r5, #1]
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	70ab      	strb	r3, [r5, #2]
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80069ee:	7be3      	ldrb	r3, [r4, #15]
 80069f0:	712b      	strb	r3, [r5, #4]
 80069f2:	89e3      	ldrh	r3, [r4, #14]
 80069f4:	716b      	strb	r3, [r5, #5]
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	71ab      	strb	r3, [r5, #6]
 80069fc:	68e3      	ldr	r3, [r4, #12]
 80069fe:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8006a00:	7ce3      	ldrb	r3, [r4, #19]
 8006a02:	722b      	strb	r3, [r5, #8]
 8006a04:	8a63      	ldrh	r3, [r4, #18]
 8006a06:	726b      	strb	r3, [r5, #9]
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	72ab      	strb	r3, [r5, #10]
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8006a12:	7de3      	ldrb	r3, [r4, #23]
 8006a14:	732b      	strb	r3, [r5, #12]
 8006a16:	8ae3      	ldrh	r3, [r4, #22]
 8006a18:	736b      	strb	r3, [r5, #13]
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	73ab      	strb	r3, [r5, #14]
 8006a20:	6963      	ldr	r3, [r4, #20]
 8006a22:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8006a24:	7ee3      	ldrb	r3, [r4, #27]
 8006a26:	742b      	strb	r3, [r5, #16]
 8006a28:	8b63      	ldrh	r3, [r4, #26]
 8006a2a:	746b      	strb	r3, [r5, #17]
 8006a2c:	69a3      	ldr	r3, [r4, #24]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	74ab      	strb	r3, [r5, #18]
 8006a32:	69a3      	ldr	r3, [r4, #24]
 8006a34:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8006a36:	7fe3      	ldrb	r3, [r4, #31]
 8006a38:	752b      	strb	r3, [r5, #20]
 8006a3a:	8be3      	ldrh	r3, [r4, #30]
 8006a3c:	756b      	strb	r3, [r5, #21]
 8006a3e:	69e3      	ldr	r3, [r4, #28]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	75ab      	strb	r3, [r5, #22]
 8006a44:	69e3      	ldr	r3, [r4, #28]
 8006a46:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8006a48:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006a4c:	762b      	strb	r3, [r5, #24]
 8006a4e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006a50:	766b      	strb	r3, [r5, #25]
 8006a52:	6a23      	ldr	r3, [r4, #32]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	76ab      	strb	r3, [r5, #26]
 8006a58:	6a23      	ldr	r3, [r4, #32]
 8006a5a:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8006a5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a5e:	b94b      	cbnz	r3, 8006a74 <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8006a60:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006a64:	772b      	strb	r3, [r5, #28]
 8006a66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006a68:	776b      	strb	r3, [r5, #29]
 8006a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	77ab      	strb	r3, [r5, #30]
 8006a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a72:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8006a76:	2100      	movs	r1, #0
 8006a78:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8006a7c:	f000 f826 	bl	8006acc <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8006a80:	4631      	mov	r1, r6
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff fe9c 	bl	80067c0 <mbedtls_internal_sha256_process>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d1f3      	bne.n	8006a74 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	2238      	movs	r2, #56	; 0x38
 8006a90:	4630      	mov	r0, r6
 8006a92:	e791      	b.n	80069b8 <mbedtls_sha256_finish_ret+0x2a>

08006a94 <memcmp>:
 8006a94:	b530      	push	{r4, r5, lr}
 8006a96:	3901      	subs	r1, #1
 8006a98:	2400      	movs	r4, #0
 8006a9a:	42a2      	cmp	r2, r4
 8006a9c:	d101      	bne.n	8006aa2 <memcmp+0xe>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e005      	b.n	8006aae <memcmp+0x1a>
 8006aa2:	5d03      	ldrb	r3, [r0, r4]
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	5d0d      	ldrb	r5, [r1, r4]
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	d0f6      	beq.n	8006a9a <memcmp+0x6>
 8006aac:	1b58      	subs	r0, r3, r5
 8006aae:	bd30      	pop	{r4, r5, pc}

08006ab0 <memcpy>:
 8006ab0:	440a      	add	r2, r1
 8006ab2:	4291      	cmp	r1, r2
 8006ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ab8:	d100      	bne.n	8006abc <memcpy+0xc>
 8006aba:	4770      	bx	lr
 8006abc:	b510      	push	{r4, lr}
 8006abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d1f9      	bne.n	8006abe <memcpy+0xe>
 8006aca:	bd10      	pop	{r4, pc}

08006acc <memset>:
 8006acc:	4402      	add	r2, r0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <memset+0xa>
 8006ad4:	4770      	bx	lr
 8006ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ada:	e7f9      	b.n	8006ad0 <memset+0x4>

08006adc <_init>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	bf00      	nop
 8006ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae2:	bc08      	pop	{r3}
 8006ae4:	469e      	mov	lr, r3
 8006ae6:	4770      	bx	lr

08006ae8 <_fini>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr
 8006af4:	0000      	movs	r0, r0
	...
